{
  "address": "0x14a4e13efb2ad55B18E371a59aeCA54f8b691D5d",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_zkusd",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_zkdlp",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_shortsTracker",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_cooldownDuration",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_fundingAccount",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minZkusd",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minZkdlp",
          "type": "uint256"
        }
      ],
      "name": "addLiquidityForAccount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "aumAddition",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "aumDeduction",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cooldownDuration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "maximise",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "fresh",
          "type": "bool"
        }
      ],
      "name": "getAum",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "maximise",
          "type": "bool"
        }
      ],
      "name": "getAumInZkusd",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAums",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "getGlobalShortAveragePrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_price",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_size",
          "type": "uint256"
        }
      ],
      "name": "getGlobalShortDelta",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_maximise",
          "type": "bool"
        }
      ],
      "name": "getPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gov",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "inPrivateMode",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isHandler",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "lastAddedAt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenOut",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_zkdlpAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minOut",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        }
      ],
      "name": "removeLiquidityForAccount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_aumAddition",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_aumDeduction",
          "type": "uint256"
        }
      ],
      "name": "setAumAdjustment",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_cooldownDuration",
          "type": "uint256"
        }
      ],
      "name": "setCooldownDuration",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_gov",
          "type": "address"
        }
      ],
      "name": "setGov",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_handler",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_isActive",
          "type": "bool"
        }
      ],
      "name": "setHandler",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_inPrivateMode",
          "type": "bool"
        }
      ],
      "name": "setInPrivateMode",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_shortsTrackerAveragePriceWeight",
          "type": "uint256"
        }
      ],
      "name": "setShortsTrackerAveragePriceWeight",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "shortsTracker",
      "outputs": [
        {
          "internalType": "contract IShortsTracker",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "shortsTrackerAveragePriceWeight",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vault",
      "outputs": [
        {
          "internalType": "contract IVault",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "zkUsd",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "zkdlp",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x3d8816a062e439fcaa9fcd8e55bace6357a23d5ab0a212b33305656beddf5b5a",
  "receipt": {
    "to": null,
    "from": "0x4e8730f175811C3079C411309DB823E62a4f9598",
    "contractAddress": "0x14a4e13efb2ad55B18E371a59aeCA54f8b691D5d",
    "transactionIndex": 1,
    "gasUsed": "2272741",
    "logsBloom": "0x
    "blockHash": "0xd49debc7b01f03e9e9ad4d3941a1b2f60045c9c498b01d9c695c9eb711488f6d",
    "transactionHash": "0x3d8816a062e439fcaa9fcd8e55bace6357a23d5ab0a212b33305656beddf5b5a",
    "logs": [],
    "blockNumber": 19387576,
    "cumulativeGasUsed": "2679559",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xf5a47EffA2406dfC0786A9D9b64C261bE49764E1",
    "0x21AAE09E6fF58dbE93a01086151F7cDb281382a1",
    "0xab3B4a9ebfAe2Ffd6482B0FfEEbA7E3952c8e58E",
    "0xA67444Eea8aBe437dAb0a8fdDC2C3d64478e5279",
    0
  ],
  "numDeployments": 1,
  "solcInputHash": "45f986e69ef0b1c3adec9bb2994aea31",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_zkusd\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_zkdlp\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_shortsTracker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_cooldownDuration\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fundingAccount\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minZkusd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minZkdlp\",\"type\":\"uint256\"}],\"name\":\"addLiquidityForAccount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"aumAddition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"aumDeduction\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cooldownDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"maximise\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"fresh\",\"type\":\"bool\"}],\"name\":\"getAum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"maximise\",\"type\":\"bool\"}],\"name\":\"getAumInZkusd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAums\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getGlobalShortAveragePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_size\",\"type\":\"uint256\"}],\"name\":\"getGlobalShortDelta\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_maximise\",\"type\":\"bool\"}],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gov\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inPrivateMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isHandler\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastAddedAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_zkdlpAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minOut\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"removeLiquidityForAccount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_aumAddition\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_aumDeduction\",\"type\":\"uint256\"}],\"name\":\"setAumAdjustment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_cooldownDuration\",\"type\":\"uint256\"}],\"name\":\"setCooldownDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gov\",\"type\":\"address\"}],\"name\":\"setGov\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_handler\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isActive\",\"type\":\"bool\"}],\"name\":\"setHandler\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_inPrivateMode\",\"type\":\"bool\"}],\"name\":\"setInPrivateMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_shortsTrackerAveragePriceWeight\",\"type\":\"uint256\"}],\"name\":\"setShortsTrackerAveragePriceWeight\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shortsTracker\",\"outputs\":[{\"internalType\":\"contract IShortsTracker\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shortsTrackerAveragePriceWeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"contract IVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"zkUsd\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"zkdlp\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/core/ZkdlpManager.sol\":\"ZkdlpManager\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"contracts/access/Governable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\ncontract Governable {\\n    address public gov;\\n    constructor() public {\\n        gov = msg.sender;\\n    }\\n    modifier onlyGov() {\\n        require(msg.sender == gov, \\\"Governable: forbidden\\\");\\n        _;\\n    }\\n    function setGov(address _gov) external onlyGov {\\n        gov = _gov;\\n    }\\n}\",\"keccak256\":\"0xc16ebf2cd4d28502419d8631a3bf20c21e01e1ed67e4fa7712f58d03b728396f\",\"license\":\"MIT\"},\"contracts/core/ZkdlpManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\nimport \\\"./settings/ZkdlpManagerSettings.sol\\\";\\n\\ncontract ZkdlpManager is ZkdlpManagerSettings {\\n    constructor(\\n        address _vault, address _zkusd,\\n        address _zkdlp, address _shortsTracker, uint256 _cooldownDuration) public {\\n        gov = msg.sender;\\n        vault = IVault(_vault);\\n        zkUsd = _zkusd;\\n        zkdlp = _zkdlp;\\n        shortsTracker = IShortsTracker(_shortsTracker);\\n        cooldownDuration = _cooldownDuration;\\n    }\\n//    function addLiquidity(address _token, uint256 _amount, uint256 _minZkusd, uint256 _minZkdlp) external override nonReentrant returns (uint256) {\\n//        if (inPrivateMode) {revert(Errors.ZKDLPMANAGER_ACTION_NOT_ENABLED);}\\n//        return _addLiquidity(msg.sender, msg.sender, _token, _amount, _minZkusd, _minZkdlp);\\n//    }\\n\\n    function addLiquidityForAccount(\\n        address _fundingAccount, address _account,\\n        address _token, uint256 _amount,\\n        uint256 _minZkusd, uint256 _minZkdlp)\\n    external override nonReentrant returns (uint256) {\\n        _validateHandler();\\n        return _addLiquidity(_fundingAccount, _account, _token, _amount, _minZkusd, _minZkdlp);\\n    }\\n\\n//    function removeLiquidity(\\n//        address _tokenOut, uint256 _zkdlpAmount,\\n//        uint256 _minOut, address _receiver)\\n//    external override nonReentrant returns (uint256) {\\n//        if (inPrivateMode) {revert(Errors.ZKDLPMANAGER_ACTION_NOT_ENABLED);}\\n//        return _removeLiquidity(msg.sender, _tokenOut, _zkdlpAmount, _minOut, _receiver);\\n//    }\\n\\n    function removeLiquidityForAccount(\\n        address _account, address _tokenOut,\\n        uint256 _zkdlpAmount, uint256 _minOut, address _receiver)\\n    external override nonReentrant returns (uint256) {\\n        _validateHandler();\\n        return _removeLiquidity(_account, _tokenOut, _zkdlpAmount, _minOut, _receiver);\\n    }\\n\\n    function _addLiquidity(\\n        address _fundingAccount, address _account,\\n        address _token, uint256 _amount,\\n        uint256 _minZkusd, uint256 _minZkdlp)\\n    internal returns (uint256) {\\n        require(_amount > 0, Errors.ZKDLPMANAGER_INVALID_AMOUNT);\\n        uint256 aumInZkusd = getAumInZkusd(true);\\n        uint256 zkdlpSupply = IERC20(zkdlp).totalSupply();\\n        IERC20(_token).safeTransferFrom(_fundingAccount, address(vault), _amount);\\n        uint256 zkusdAmount = vault.buyZKUSD(_token, address(this));\\n        require(zkusdAmount >= _minZkusd, Errors.ZKDLPMANAGER_INSUFFICIENT_ZKUSD_OUTPUT);\\n        uint256 mintAmount = aumInZkusd == 0 || zkdlpSupply == 0 ? zkusdAmount : zkusdAmount.mul(zkdlpSupply).div(aumInZkusd);\\n        require(mintAmount >= _minZkdlp, Errors.ZKDLPMANAGER_INSUFFICIENT_ZKDLP_OUTPUT);\\n        IMintable(zkdlp).mint(_account, mintAmount);\\n        lastAddedAt[_account] = block.timestamp;\\n        emit Events.AddLiquidity(_account, _token, _amount, aumInZkusd, zkdlpSupply, zkusdAmount, mintAmount);\\n        return mintAmount;\\n    }\\n\\n    function _removeLiquidity(\\n        address _account, address _tokenOut,\\n        uint256 _zkdlpAmount, uint256 _minOut,\\n        address _receiver)\\n    internal returns (uint256) {\\n        require(_zkdlpAmount > 0, Errors.ZKDLPMANAGER_INVALID_ZKDLPAMOUNT);\\n        require(lastAddedAt[_account].add(cooldownDuration) <= block.timestamp, Errors.ZKDLPMANAGER_COOLDOWN_DURATION_NOT_YET_PASSED);\\n        uint256 aumInZkusd = getAumInZkusd(false);\\n        uint256 zkdlpSupply = IERC20(zkdlp).totalSupply();\\n        uint256 zkusdAmount = _zkdlpAmount.mul(aumInZkusd).div(zkdlpSupply);\\n        uint256 zkusdBalance = IERC20(zkUsd).balanceOf(address(this));\\n        if (zkusdAmount > zkusdBalance) {\\n            IZKUSD(zkUsd).mint(address(this), zkusdAmount.sub(zkusdBalance));\\n        }\\n        IMintable(zkdlp).burn(_account, _zkdlpAmount);\\n        IERC20(zkUsd).transfer(address(vault), zkusdAmount);\\n        uint256 amountOut = vault.sellZKUSD(_tokenOut, _receiver);\\n        require(amountOut >= _minOut, Errors.ZKDLPMANAGER_INSUFFICIENT_OUTPUT);\\n        emit Events.RemoveLiquidity(_account, _tokenOut, _zkdlpAmount, aumInZkusd, zkdlpSupply, zkusdAmount, amountOut);\\n        return amountOut;\\n    }\\n\\n    function _validateHandler() internal view {\\n        require(isHandler[msg.sender], Errors.ZKDLPMANAGER_FORBIDDEN);\\n    }\\n\\n    function getPrice(bool _maximise) external view returns (uint256) {\\n        uint256 supply = IERC20(zkdlp).totalSupply();\\n        if (supply == 0) return Constants.PRICE_PRECISION;\\n\\n        uint256 aum = getAum(_maximise, false);\\n        return aum.mul(Constants.ZKDLP_PRECISION).div(supply);\\n    }\\n\\n    function getAums() public view returns (uint256[] memory) {\\n        uint256[] memory amounts = new uint256[](2);\\n        amounts[0] = getAum(true, false);\\n        amounts[1] = getAum(false, false);\\n        return amounts;\\n    }\\n\\n    function getAumInZkusd(bool maximise) public override view returns (uint256) {\\n        uint256 aum = getAum(maximise, true);\\n        return aum.mul(10 ** Constants.ZKUSD_DECIMALS).div(Constants.PRICE_PRECISION);\\n    }\\n\\n    function getAum(bool maximise, bool fresh) public view returns (uint256) {\\n        uint256 length = vault.allWhitelistedTokensLength();\\n        uint256 aum = aumAddition;\\n        uint256 shortProfits = 0;\\n\\n        IVault _vault = vault;\\n        IVaultPriceFeed _priceFeed = IVaultPriceFeed(vault.priceFeed());\\n\\n        for (uint256 i = 0; i < length; i++) {\\n            address token = vault.allWhitelistedTokens(i);\\n            if (!vault.whitelistedTokens(token))\\n                continue;\\n\\n            uint256 price;\\n            if (vault.equityTokens(token) || vault.stableTokens(token))\\n                price = _priceFeed.getPrice(token, maximise, false);\\n            else\\n                price = _priceFeed.getPrice(token, maximise, fresh);\\n\\n            uint256 poolAmount = _vault.poolAmounts(token);\\n            uint256 decimals = _vault.tokenDecimals(token);\\n            if (_vault.stableTokens(token)) {\\n                aum = aum.add(poolAmount.mul(price).div(10 ** decimals));\\n            } else {\\n                uint256 size = _vault.globalShortSizes(token);\\n                if (size > 0) {\\n                    (uint256 delta, bool hasProfit) = getGlobalShortDelta(token, price, size);\\n                    if (!hasProfit) {\\n                        aum = aum.add(delta);\\n                    } else {\\n                        shortProfits = shortProfits.add(delta);\\n                    }\\n                }\\n                aum = aum.add(_vault.guaranteedUsd(token));\\n                uint256 reservedAmount = _vault.reservedAmounts(token);\\n                aum = aum.add(poolAmount.sub(reservedAmount).mul(price).div(10 ** decimals));\\n            }\\n        }\\n        aum = shortProfits > aum ? 0 : aum.sub(shortProfits);\\n        return aumDeduction > aum ? 0 : aum.sub(aumDeduction);\\n    }\\n\\n    function getGlobalShortDelta(address _token, uint256 _price, uint256 _size) public view returns (uint256, bool) {\\n        uint256 averagePrice = getGlobalShortAveragePrice(_token);\\n        uint256 priceDelta = averagePrice > _price ? averagePrice.sub(_price) : _price.sub(averagePrice);\\n        uint256 delta = _size.mul(priceDelta).div(averagePrice);\\n        return (delta, averagePrice > _price);\\n    }\\n\\n    function getGlobalShortAveragePrice(address _token) public view returns (uint256) {\\n        IShortsTracker _shortsTracker = shortsTracker;\\n        if (address(_shortsTracker) == address(0) || !_shortsTracker.isGlobalShortDataReady()) {\\n            return vault.globalShortAveragePrices(_token);\\n        }\\n        uint256 _shortsTrackerAveragePriceWeight = shortsTrackerAveragePriceWeight;\\n        if (_shortsTrackerAveragePriceWeight == 0) {\\n            return vault.globalShortAveragePrices(_token);\\n        } else if (_shortsTrackerAveragePriceWeight == Constants.BASIS_POINTS_DIVISOR) {\\n            return _shortsTracker.globalShortAveragePrices(_token);\\n        }\\n        uint256 vaultAveragePrice = vault.globalShortAveragePrices(_token);\\n        uint256 shortsTrackerAveragePrice = _shortsTracker.globalShortAveragePrices(_token);\\n        return vaultAveragePrice.mul(Constants.BASIS_POINTS_DIVISOR.sub(_shortsTrackerAveragePriceWeight)).add(shortsTrackerAveragePrice.mul(_shortsTrackerAveragePriceWeight)).div(Constants.BASIS_POINTS_DIVISOR);\\n    }\\n}\\n\",\"keccak256\":\"0xc2741a808856d3c1c0452c731b4b95ca168ef995c00f8e3d694df78fc700bc9d\",\"license\":\"MIT\"},\"contracts/core/interfaces/IShortsTracker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\ninterface IShortsTracker {\\n    function isGlobalShortDataReady() external view returns (bool);\\n    function globalShortAveragePrices(address _token) external view returns (uint256);\\n    function getNextGlobalShortData(\\n        address _account, address _collateralToken,\\n        address _indexToken, uint256 _nextPrice,\\n        uint256 _sizeDelta, bool _isIncrease) external view returns (uint256, uint256);\\n    function updateGlobalShortData(\\n        address _account, address _collateralToken,\\n        address _indexToken, bool _isLong,\\n        uint256 _sizeDelta, uint256 _markPrice, bool _isIncrease) external;\\n}\",\"keccak256\":\"0x56b4525c777ea2ba6f0c381b3d9575c06983e9a9086bfb590934865ba366bb6b\",\"license\":\"MIT\"},\"contracts/core/interfaces/IVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\nimport \\\"./IVaultUtils.sol\\\";\\ninterface IVault {\\n    function withdrawFees(address _token, address _receiver) external returns (uint256);\\n    function directPoolDeposit(address _token) external;\\n    function buyZKUSD(address _token, address _receiver) external returns (uint256);\\n    function sellZKUSD(address _token, address _receiver) external returns (uint256);\\n    function swap(address _tokenIn, address _tokenOut, address _receiver) external returns (uint256);\\n    function increasePosition(\\n        address _account, address _collateralToken,\\n        address _indexToken, uint256 _sizeDelta, bool _isLong) external;\\n    function decreasePosition(\\n        address _account, address _collateralToken,\\n        address _indexToken, uint256 _collateralDelta,\\n        uint256 _sizeDelta, bool _isLong, address _receiver) external returns (uint256);\\n    function validateLiquidation(\\n        address _account, address _collateralToken,\\n        address _indexToken, bool _isLong, bool _raise) external view returns (uint256, uint256);\\n    function liquidatePosition(\\n        address _account, address _collateralToken,\\n        address _indexToken, bool _isLong, address _feeReceiver) external;\\n\\n    function tokenToUsdMin(address _token, uint256 _tokenAmount) external view returns (uint256);\\n    function priceFeed() external view returns (address);\\n    function fundingRateFactor() external view returns (uint256);\\n    function stableFundingRateFactor() external view returns (uint256);\\n    function cumulativeFundingRates(address _token) external view returns (uint256);\\n    function getNextFundingRate(address _token) external view returns (uint256);\\n    function getFeeBasisPoints(\\n        address _token, uint256 _zkusdDelta,\\n        uint256 _feeBasisPoints, uint256 _taxBasisPoints, bool _increment) external view returns (uint256);\\n    function liquidationFeeUsd() external view returns (uint256);\\n    function taxBasisPoints() external view returns (uint256);\\n    function stableTaxBasisPoints() external view returns (uint256);\\n    function mintBurnFeeBasisPoints() external view returns (uint256);\\n    function swapFeeBasisPoints() external view returns (uint256);\\n    function stableSwapFeeBasisPoints() external view returns (uint256);\\n    function marginFeeBasisPoints() external view returns (uint256);\\n    function allWhitelistedTokensLength() external view returns (uint256);\\n    function allWhitelistedTokens(uint256) external view returns (address);\\n    function whitelistedTokens(address _token) external view returns (bool);\\n    function stableTokens(address _token) external view returns (bool);\\n    function shortableTokens(address _token) external view returns (bool);\\n    function equityTokens(address _token) external view returns (bool);\\n    function feeReserves(address _token) external view returns (uint256);\\n    function globalShortSizes(address _token) external view returns (uint256);\\n    function globalShortAveragePrices(address _token) external view returns (uint256);\\n    function maxGlobalShortSizes(address _token) external view returns (uint256);\\n    function tokenDecimals(address _token) external view returns (uint256);\\n    function tokenWeights(address _token) external view returns (uint256);\\n    function guaranteedUsd(address _token) external view returns (uint256);\\n    function poolAmounts(address _token) external view returns (uint256);\\n    function bufferAmounts(address _token) external view returns (uint256);\\n    function reservedAmounts(address _token) external view returns (uint256);\\n    function zkusdAmounts(address _token) external view returns (uint256);\\n    function maxZkusdAmounts(address _token) external view returns (uint256);\\n    function getRedemptionAmount(address _token, uint256 _zkusdAmount) external view returns (uint256);\\n    function getMaxPrice(address _token) external view returns (uint256);\\n    function getMinPrice(address _token) external view returns (uint256);\\n    function getDelta(\\n        address _indexToken, uint256 _size,\\n        uint256 _averagePrice, bool _isLong, uint256 _lastIncreasedTime) external view returns (bool, uint256);\\n    function getPosition(\\n        address _account, address _collateralToken,\\n        address _indexToken, bool _isLong) external view returns (uint256, uint256, uint256, uint256, uint256, uint256, bool, uint256);\\n    function isPositionExist(address _account, address _collateralToken, address _indexToken, bool _isLong) external view returns (bool, bytes32);\\n    function isInitialized() external view returns (bool);\\n    function isSwapEnabled() external view returns (bool);\\n    function isLeverageEnabled() external view returns (bool);\\n    function router() external view returns (address);\\n    function zkusd() external view returns (address);\\n    function gov() external view returns (address);\\n    function whitelistedTokenCount() external view returns (uint256);\\n    function maxLeverage() external view returns (uint256);\\n    function minProfitTime() external view returns (uint256);\\n    function hasDynamicFees() external view returns (bool);\\n    function fundingInterval() external view returns (uint256);\\n    function totalTokenWeights() external view returns (uint256);\\n    function getTargetZkusdAmount(address _token) external view returns (uint256);\\n    function inManagerMode() external view returns (bool);\\n    function inPrivateLiquidationMode() external view returns (bool);\\n    function maxGasPrice() external view returns (uint256);\\n    function approvedRouters(address _account, address _router) external view returns (bool);\\n    function isLiquidator(address _account) external view returns (bool);\\n    function isManager(address _account) external view returns (bool);\\n    function minProfitBasisPoints(address _token) external view returns (uint256);\\n    function tokenBalances(address _token) external view returns (uint256);\\n    function lastFundingTimes(address _token) external view returns (uint256);\\n\\n    function setMaxLeverage(uint256 _maxLeverage) external;\\n    function setInManagerMode(bool _inManagerMode) external;\\n    function setManager(address _manager, bool _isManager) external;\\n    function setIsSwapEnabled(bool _isSwapEnabled) external;\\n    function setIsLeverageEnabled(bool _isLeverageEnabled) external;\\n    function setMaxGasPrice(uint256 _maxGasPrice) external;\\n    function setZkusdAmount(address _token, uint256 _amount) external;\\n    function setBufferAmount(address _token, uint256 _amount) external;\\n    function setMaxGlobalShortSize(address _token, uint256 _amount) external;\\n    function setInPrivateLiquidationMode(bool _inPrivateLiquidationMode) external;\\n    function setLiquidator(address _liquidator, bool _isActive) external;\\n    function setFundingRate(\\n        uint256 _fundingInterval, uint256 _fundingRateFactor,\\n        uint256 _stableFundingRateFactor) external;\\n    function setFees(\\n        uint256 _taxBasisPoints, uint256 _stableTaxBasisPoints,\\n        uint256 _mintBurnFeeBasisPoints, uint256 _swapFeeBasisPoints,\\n        uint256 _stableSwapFeeBasisPoints, uint256 _marginFeeBasisPoints,\\n        uint256 _liquidationFeeUsd, uint256 _minProfitTime, bool _hasDynamicFees) external;\\n\\n    function setTokenConfig(\\n        address _token, uint256 _tokenDecimals,\\n        uint256 _redemptionBps, uint256 _minProfitBps,\\n        uint256 _maxZkusdAmount, bool _isStable,\\n        bool _isShortable, bool _isEquity) external;\\n    function clearTokenConfig(address _token) external;\\n    function setMinProfitTime(uint256 _minProfitTime) external;\\n    function setPriceFeed(address _priceFeed) external;\\n    function setVaultUtils(IVaultUtils _vaultUtils) external;\\n    function setError(uint256 _errorCode, string calldata _error) external;\\n    function setAllowStableEquity(bool _allowStaleEquityPrice) external;\\n}\\n\",\"keccak256\":\"0x28d99ad666ae7f2912fd9b778d94791bfb9061a90261f8579d7a47e1aaad4c5a\",\"license\":\"MIT\"},\"contracts/core/interfaces/IVaultPriceFeed.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\npragma experimental ABIEncoderV2;\\n\\ninterface IVaultPriceFeed {\\n\\n    function getPrice(address _token, bool _maximise, bool _fresh) external view returns (uint256);\\n    function getUpdateFee(bytes[] calldata _updateData) external view returns (uint256);\\n    function updatePriceFeeds(bytes[] calldata _priceData) external payable;\\n}\\n\",\"keccak256\":\"0x5596570dcc8db061a66584fef7574f3e31d40c19b15151aa7fe3f9faf953bf06\",\"license\":\"MIT\"},\"contracts/core/interfaces/IVaultUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\ninterface IVaultUtils {\\n    function updateCumulativeFundingRate(\\n        address _collateralToken, address _indexToken) external returns (bool);\\n    function validateIncreasePosition(\\n        address _account, address _collateralToken,\\n        address _indexToken, uint256 _sizeDelta, bool _isLong) external view;\\n    function validateDecreasePosition(\\n        address _account, address _collateralToken,\\n        address _indexToken, uint256 _collateralDelta,\\n        uint256 _sizeDelta, bool _isLong, address _receiver) external view;\\n    function validateLiquidation(\\n        address _account, address _collateralToken,\\n        address _indexToken, bool _isLong, bool _raise) external view returns (uint256, uint256);\\n    function getEntryFundingRate(\\n        address _collateralToken, address _indexToken, bool _isLong) external view returns (uint256);\\n    function getPositionFee(\\n        address _account, address _collateralToken,\\n        address _indexToken, bool _isLong, uint256 _sizeDelta) external view returns (uint256);\\n    function getFundingFee(\\n        address _account, address _collateralToken,\\n        address _indexToken, bool _isLong,\\n        uint256 _size, uint256 _entryFundingRate) external view returns (uint256);\\n    function getBuyZkusdFeeBasisPoints(\\n        address _token, uint256 _zkusdAmount) external view returns (uint256);\\n    function getSellZkusdFeeBasisPoints(\\n        address _token, uint256 _zkusdAmount) external view returns (uint256);\\n    function getSwapFeeBasisPoints(\\n        address _tokenIn, address _tokenOut, uint256 _zkusdAmount) external view returns (uint256);\\n    function getFeeBasisPoints(\\n        address _token, uint256 _zkusdDelta,\\n        uint256 _feeBasisPoints, uint256 _taxBasisPoints,\\n        bool _increment) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x1efeae040950453176db5cf84c290223d6ebd4542e7457c7fe35c0d023483522\",\"license\":\"MIT\"},\"contracts/core/interfaces/IZkdlpManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\ninterface IZkdlpManager {\\n    function zkUsd() external view returns (address);\\n    function cooldownDuration() external returns (uint256);\\n    function getAumInZkusd(bool maximise) external view returns (uint256);\\n    function lastAddedAt(address _account) external returns (uint256);\\n//    function addLiquidity(\\n//        address _token, uint256 _amount,\\n//        uint256 _minZkusd, uint256 _minZkdlp) external returns (uint256);\\n    function addLiquidityForAccount(\\n        address _fundingAccount, address _account,\\n        address _token, uint256 _amount,\\n        uint256 _minZkusd, uint256 _minZkdlp) external returns (uint256);\\n//    function removeLiquidity(\\n//        address _tokenOut, uint256 _zkdlpAmount,\\n//        uint256 _minOut, address _receiver) external returns (uint256);\\n    function removeLiquidityForAccount(\\n        address _account, address _tokenOut,\\n        uint256 _zkdlpAmount, uint256 _minOut, address _receiver) external returns (uint256);\\n}\\n\",\"keccak256\":\"0x65f7f6570436a559ac9ab146c5caccb5b1743496d06bc4ecccaf4abe5b19f026\",\"license\":\"MIT\"},\"contracts/core/settings/ZkdlpManagerSettings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\nimport \\\"../storage/ZkdlpManagerStorage.sol\\\";\\nabstract contract ZkdlpManagerSettings is ZkdlpManagerStorage {\\n    function setInPrivateMode(bool _inPrivateMode) external onlyGov {\\n        inPrivateMode = _inPrivateMode;\\n    }\\n    function setShortsTrackerAveragePriceWeight(uint256 _shortsTrackerAveragePriceWeight) external onlyGov {\\n        require(_shortsTrackerAveragePriceWeight <= Constants.BASIS_POINTS_DIVISOR, Errors.ZKDLPMANAGER_INVALID_WEIGHT);\\n        shortsTrackerAveragePriceWeight = _shortsTrackerAveragePriceWeight;\\n    }\\n    function setHandler(address _handler, bool _isActive) external onlyGov {\\n        isHandler[_handler] = _isActive;\\n    }\\n    function setCooldownDuration(uint256 _cooldownDuration) external onlyGov {\\n        require(_cooldownDuration <= Constants.MAX_COOLDOWN_DURATION, Errors.ZKDLPMANAGER_INVALID_COOLDOWNDURATION);\\n        cooldownDuration = _cooldownDuration;\\n    }\\n    function setAumAdjustment(uint256 _aumAddition, uint256 _aumDeduction) external onlyGov {\\n        aumAddition = _aumAddition;\\n        aumDeduction = _aumDeduction;\\n    }\\n}\\n\",\"keccak256\":\"0x5def7be2b648a2e9d94e8585d6c68b5c77eebfd74028a60a0a3f4382e5a6ed59\",\"license\":\"MIT\"},\"contracts/core/storage/ZkdlpManagerAggregators.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\nimport \\\"../../libraries/math/SafeMath.sol\\\";\\nimport \\\"../../libraries/token/IERC20.sol\\\";\\nimport \\\"../../libraries/token/SafeERC20.sol\\\";\\nimport \\\"../../libraries/Events.sol\\\";\\nimport \\\"../../libraries/Errors.sol\\\";\\nimport \\\"../../libraries/Constants.sol\\\";\\nimport \\\"../../libraries/utils/ReentrancyGuard.sol\\\";\\nimport \\\"../interfaces/IVault.sol\\\";\\nimport \\\"../interfaces/IShortsTracker.sol\\\";\\nimport \\\"../interfaces/IZkdlpManager.sol\\\";\\nimport \\\"../interfaces/IVaultPriceFeed.sol\\\";\\nimport \\\"../../tokens/interfaces/IZKUSD.sol\\\";\\nimport \\\"../../tokens/interfaces/IMintable.sol\\\";\\nimport \\\"../../access/Governable.sol\\\";\\n\\nabstract contract ZKdlpManagerAggregators is IZkdlpManager, ReentrancyGuard, Governable {\\n}\\n\",\"keccak256\":\"0xd38719328ba970bb9d8c1227e4b45844479e6299fcafe083df09cd6251291984\",\"license\":\"MIT\"},\"contracts/core/storage/ZkdlpManagerStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\nimport \\\"./ZkdlpManagerAggregators.sol\\\";\\nabstract contract ZkdlpManagerStorage is ZKdlpManagerAggregators {\\n    /* constructor */\\n    IVault public vault;\\n    address public override zkUsd;\\n    address public zkdlp;\\n    IShortsTracker public shortsTracker;\\n    /* settings */\\n    bool public inPrivateMode = true;\\n    uint256 public shortsTrackerAveragePriceWeight;\\n    mapping (address => bool) public isHandler;\\n    uint256 public override cooldownDuration;\\n    uint256 public aumAddition;\\n    uint256 public aumDeduction;\\n    /* misc */\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n    mapping (address => uint256) public override lastAddedAt;\\n}\\n\",\"keccak256\":\"0x9b721604919f60a904f0e064dd1894b0a1979a71a0e2a82b5111dcc11d94e046\",\"license\":\"MIT\"},\"contracts/libraries/Constants.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\nlibrary Constants {\\n    /* BASE */\\n    string public constant ZKDX_ID = \\\"ZKDX\\\";\\n    string public constant ZKDX_TOKEN_NAME = \\\"ZKDX\\\";\\n    string public constant ZKDX_TOKEN_SYMBOL = \\\"ZKDX\\\";\\n    string public constant ZKDLP_ID = \\\"ZKDLP\\\";\\n    string public constant ZKDLP_TOKEN_NAME = \\\"ZKDLP\\\";\\n    string public constant ZKDLP_TOKEN_SYMBOL = \\\"ZKDLP\\\";\\n\\n    string public constant ZKUSD_TOKEN_NAME = \\\"ZKUSD\\\";\\n    string public constant ZKUSD_TOKEN_SYMBOL = \\\"ZKUSD\\\";\\n    /* VaultPriceFeed.sol */\\n    uint256 public constant PRICE_PRECISION = 10 ** 30;\\n    uint256 public constant ONE_USD = PRICE_PRECISION;\\n    uint256 public constant BASIS_POINTS_DIVISOR = 10000;\\n    uint256 public constant MAX_SPREAD_BASIS_POINTS = 50;\\n    uint256 public constant MAX_ADJUSTMENT_INTERVAL = 2 hours;\\n    uint256 public constant MAX_ADJUSTMENT_BASIS_POINTS = 20;\\n    address constant internal FLAG_ARBITRUM_SEQ_OFFLINE = address(bytes20(bytes32(uint256(keccak256(\\\"chainlink.flags.arbitrum-seq-offline\\\")) - 1)));\\n    /* VaultUtils.sol */\\n    uint256 public constant FUNDING_RATE_PRECISION = 1000000;\\n\\n    /* Vault.sol*/\\n    uint256 public constant MIN_LEVERAGE = 10000; // 1x\\n    uint256 public constant ZKUSD_DECIMALS = 18;\\n    uint256 public constant MAX_FEE_BASIS_POINTS = 500; // 5%\\n    uint256 public constant MAX_LIQUIDATION_FEE_USD = 100 * PRICE_PRECISION; // 100 USD\\n\\n    /* OrderBook.sol */\\n    uint256 public constant ZKUSD_PRECISION = 1e18;\\n\\n    /* ZKDLP.sol */\\n    uint256 public constant ZKDLP_PRECISION = 10 ** 18;\\n    uint256 public constant MAX_COOLDOWN_DURATION = 48 hours;\\n\\n    /* ShortsTracker */\\n    uint256 public constant MAX_INT256 = uint256(type(int256).max);\\n}\\n\",\"keccak256\":\"0x049f7d98dc0cb5204187c07330c81fc8057c9471f912763fdc11f80d2ee95fb0\",\"license\":\"MIT\"},\"contracts/libraries/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\nlibrary Errors {\\n    /* Timelock Error Message*/\\n    string public constant Timelock_Invalid_Target = \\\"Timelock: invalid _target\\\";\\n    string public constant Timelock_Invalid_Buffer = \\\"Timelock: invalid _buffer\\\";\\n    string public constant Timelock_Buffer_Cannot_Be_Decreased = \\\"Timelock: buffer cannot be decreased\\\";\\n    string public constant Timelock_invalid_maxLeverage = \\\"Timelock: invalid _maxLeverage\\\";\\n    string public constant Timelock_invalid_fundingRateFactor = \\\"Timelock: invalid _fundingRateFactor\\\";\\n    string public constant Timelock_invalid_stableFundingRateFactor = \\\"Timelock: invalid _stableFundingRateFactor\\\";\\n    string public constant TIMELOCK_INVALID_MAXGASPRICE = \\\"Invalid _maxGasPrice\\\";\\n    string public constant TIMELOCK_INVALID_LENGTHS = \\\"Timelock: invalid lengths\\\";\\n    string public constant TIMELOCK_MAXTOKENSUPPLY_EXCEEDED = \\\"Timelock: maxTokenSupply exceeded\\\";\\n    string public constant TIMELOCK_ACTION_ALREADY_SIGNALLED = \\\"Timelock: action already signalled\\\";\\n    string public constant TIMELOCK_ACTION_NOT_SIGNALLED = \\\"Timelock: action not signalled\\\";\\n    string public constant TIMELOCK_ACTION_TIME_NOT_YET_PASSED = \\\"Timelock: action time not yet passed\\\";\\n    string public constant TIMELOCK_INVALID_ACTION = \\\"Timelock: invalid _action\\\";\\n    string public constant TIMELOCK_INVALID_BUFFER = \\\"Timelock: invalid _buffer\\\";\\n    /* ZKUSD.sol*/\\n    string public constant ZKUSD_FORBIDDEN = \\\"ZKUSD: forbidden\\\";\\n    /* BasePositionManagers.sol */\\n    string public constant BASEPOSITIONMANAGER_MARK_PRICE_LOWER_THAN_LIMIT      = \\\"BasePositionManager: mark price lower than limit\\\";\\n    string public constant BASEPOSITIONMANAGER_MARK_PRICE_HIGHER_THAN_LIMIT     = \\\"BasePositionManager: mark price higher than limit\\\";\\n    string public constant BASEPOSITIONMANAGER_INVALID_PATH_LENGTH              = \\\"BasePositionManager: invalid _path.length\\\";\\n    string public constant BASEPOSITIONMANAGER_INSUFFICIENT_AMOUNTOUT           = \\\"BasePositionManager: insufficient amountOut\\\";\\n    string public constant BASEPOSITIONMANAGER_MAX_GLOBAL_LONGS_EXCEEDED        = \\\"BasePositionManager: max global longs exceeded\\\";\\n    string public constant BASEPOSITIONMANAGER_MAX_GLOBAL_SHORTS_EXCEEDED       = \\\"BasePositionManager: max global shorts exceeded\\\";\\n    string public constant BASEPOSITIONMANAGER_INVALID_SENDER                   = \\\"BasePositionManager: invalid sender\\\";\\n    string public constant BASEPOSITIONMANAGER_TRANSFER_OUT_FAILED              = \\\"BasePositionManager: failed to transfer out ether\\\";\\n    /* PositionManager.sol */\\n    string public constant POSITIONMANAGER_INVALID_PATH_LENGTH                  = \\\"PositionManager: invalid _path.length\\\";\\n    string public constant POSITIONMANAGER_INVALID_PATH                         = \\\"PositionManager: invalid _path\\\";\\n    string public constant POSITIONMANAGER_LONG_DEPOSIT                         = \\\"PositionManager: long deposit\\\";\\n    string public constant POSITIONMANAGER_LONG_LEVERAGE_DECREASE               = \\\"PositionManager: long leverage decrease\\\";\\n    string public constant POSITIONMANAGER_FORBIDDEN                            = \\\"PositionManager: forbidden\\\";\\n    string public constant POSITIONMANAGER_INSUFFICIENT_FEE                     = \\\"PositionManager: insufficient fee\\\";\\n    /* Router.sol*/\\n    string public constant ROUTER_FORBIDDEN                                     = \\\"Router: forbidden\\\";\\n    /* ZkdlpManager.sol */\\n    string public constant ZKDLPMANAGER_ACTION_NOT_ENABLED                      = \\\"ZkdlpManager: action not enabled\\\";\\n    string public constant ZKDLPMANAGER_INVALID_WEIGHT                          = \\\"ZkdlpManager: invalid weight\\\";\\n    string public constant ZKDLPMANAGER_INVALID_COOLDOWNDURATION                = \\\"ZkdlpManager: invalid _cooldownDuration\\\";\\n    string public constant ZKDLPMANAGER_INVALID_AMOUNT                          = \\\"ZkdlpManager: invalid _amount\\\";\\n    string public constant ZKDLPMANAGER_INSUFFICIENT_ZKUSD_OUTPUT               = \\\"ZkdlpManager: insufficient ZKUSD output\\\";\\n    string public constant ZKDLPMANAGER_INSUFFICIENT_ZKDLP_OUTPUT               = \\\"ZkdlpManager: insufficient ZKDLP output\\\";\\n    string public constant ZKDLPMANAGER_INVALID_ZKDLPAMOUNT                     = \\\"ZkdlpManager: invalid _ZKDLPAmount\\\";\\n    string public constant ZKDLPMANAGER_COOLDOWN_DURATION_NOT_YET_PASSED        = \\\"ZkdlpManager: cooldown duration not yet passed\\\";\\n    string public constant ZKDLPMANAGER_INSUFFICIENT_OUTPUT                     = \\\"ZkdlpManager: insufficient output\\\";\\n    string public constant ZKDLPMANAGER_FORBIDDEN                               = \\\"ZkdlpManager: forbidden\\\";\\n    /* ShortsTrack.sol*/\\n    string public constant SHORTSTRACKER_FORBIDDEN                              = \\\"ShortsTracker: forbidden\\\";\\n    string public constant SHORTSTRACKER_INVALID_HANDLER                        = \\\"ShortsTracker: invalid _handler\\\";\\n    string public constant SHORTSTRACKER_ALREADY_MIGRATED                       = \\\"ShortsTracker: already migrated\\\";\\n    string public constant SHORTSTRACKER_OVERFLOW                               = \\\"ShortsTracker: overflow\\\";\\n    /* VaultUtils.sol*/\\n    string public constant VAULT_LOSSES_EXCEED_COLLATERAL                       = \\\"Vault: losses exceed collateral\\\";\\n    string public constant VAULT_FEES_EXCEED_COLLATERAL                         = \\\"Vault: fees exceed collateral\\\";\\n    string public constant VAULT_LIQUIDATION_FEES_EXCEED_COLLATERAL             = \\\"Vault: liquidation fees exceed collateral\\\";\\n    string public constant VAULT_MAXLEVERAGE_EXCEEDED                           = \\\"Vault: maxLeverage exceeded\\\";\\n    /* VaultInternal.sol*/\\n    string internal constant VAULT_POOLAMOUNT_EXCEEDED                          = \\\"Vault: poolAmount exceeded\\\";\\n    string internal constant VAULT_INSUFFICIENT_RESERVE                         = \\\"Vault: insufficient reserve\\\";\\n    string internal constant VAULT_MAX_SHORTS_EXCEEDED                          = \\\"Vault: max shorts exceeded\\\";\\n    string internal constant VAULT_POOLAMOUNT_BUFFER                            = \\\"Vault: poolAmount < buffer\\\";\\n    string internal constant VAULT_INVALID_ERRORCONTROLLER                      = \\\"Vault: invalid errorController\\\";\\n    /* Router.sol */\\n    string internal constant ROUTER_INVALID_SENDER                              = \\\"Router: invalid sender\\\";\\n    string internal constant ROUTER_INVALID_PATH                                = \\\"Router: invalid _path\\\";\\n    string internal constant ROUTER_MARK_PRICE_HIGHER_THAN_LIMIT                = \\\"Router: mark price higher than limit\\\";\\n    string internal constant ROUTER_MARK_PRICE_LOWER_THAN_LIMIT                 = \\\"Router: mark price lower than limit\\\";\\n    string internal constant ROUTER_INVALID_PATH_LENGTH                         = \\\"Router: invalid _path.length\\\";\\n    string internal constant ROUTER_INSUFFICIENT_AMOUNTOUT                      = \\\"Router: insufficient amountOut\\\";\\n    string internal constant ROUTER_INVALID_PLUGIN                              = \\\"Router: invalid plugin\\\";\\n    /* OrderBook.sol*/\\n    string internal constant ORDERBOOK_FORBIDDEN                                = \\\"OrderBook: forbidden\\\";\\n    string internal constant ORDERBOOK_ALREADY_INITIALIZED                      = \\\"OrderBook: already initialized\\\";\\n    string internal constant ORDERBOOK_INVALID_SENDER                           = \\\"OrderBook: invalid sender\\\";\\n    string internal constant ORDERBOOK_INVALID_PATH_LENGTH                      = \\\"OrderBook: invalid _path.length\\\";\\n    string internal constant ORDERBOOK_INVALID_PATH                             = \\\"OrderBook: invalid _path\\\";\\n    string internal constant ORDERBOOK_INVALID_AMOUNTIN                         = \\\"OrderBook: invalid _amountIn\\\";\\n    string internal constant ORDERBOOK_INSUFFICIENT_EXECUTION_FEE               = \\\"OrderBook: insufficient execution fee\\\";\\n    string internal constant ORDERBOOK_ONLY_WETH_COULD_BE_WRAPPED               = \\\"OrderBook: only weth could be wrapped\\\";\\n    string internal constant ORDERBOOK_INCORRECT_VALUE_TRANSFERRED              = \\\"OrderBook: incorrect value transferred\\\";\\n    string internal constant ORDERBOOK_INCORRECT_EXECUTION_FEE_TRANSFERRED      = \\\"OrderBook: incorrect execution fee transferred\\\";\\n    string internal constant ORDERBOOK_NON_EXISTENT_ORDER                       = \\\"OrderBook: non-existent order\\\";\\n    string internal constant ORDERBOOK_INVALID_PRICE_FOR_EXECUTION              = \\\"OrderBook: invalid price for execution\\\";\\n    string internal constant ORDERBOOK_INSUFFICIENT_COLLATERAL                  = \\\"OrderBook: insufficient collateral\\\";\\n    string internal constant ORDERBOOK_INSUFFICIENT_AMOUNTOUT                   = \\\"OrderBook: insufficient amountOut\\\";\\n    /* RewardRouterV2.sol */\\n    string internal constant REWARDROUTER_INVALID_AMOUNT                        = \\\"RewardRouter: invalid _amount\\\";\\n    string internal constant REWARDROUTER_INVALID_MSG_VALUE                     = \\\"RewardRouter: invalid msg.value\\\";\\n    string internal constant REWARDROUTER_ALREADY_INITIALIZED                   = \\\"RewardRouter: already initialized\\\";\\n    string internal constant REWARDROUTER_INVALID_ZKUSDAMOUNT                   = \\\"RewardRouter: invalid _zkusdAmount\\\";\\n\\n    /* YieldToken.sol */\\n    string public constant YIELDTOKEN_ACCOUNT_ALREADY_MARKED                    = \\\"YieldToken: _account already marked\\\";\\n    string public constant YIELDTOKEN_ACCOUNT_NOT_MARKED                        = \\\"YieldToken: _account not marked\\\";\\n    string public constant YIELDTOKEN_TRANSFER_AMOUNT_EXCEEDS_ALLOWANCE         = \\\"YieldToken: transfer amount exceeds allowance\\\";\\n    string public constant YIELDTOKEN_MINT_TO_THE_ZERO_ADDRESS                  = \\\"YieldToken: mint to the zero address\\\";\\n    string public constant YIELDTOKEN_BURN_FROM_THE_ZERO_ADDRESS                = \\\"YieldToken: burn from the zero address\\\";\\n    string public constant YIELDTOKEN_BURN_AMOUNT_EXCEEDS_BALANCE               = \\\"YieldToken: burn amount exceeds balance\\\";\\n    string public constant YIELDTOKEN_TRANSFER_FROM_THE_ZERO_ADDRESS            = \\\"YieldToken: transfer from the zero address\\\";\\n    string public constant YIELDTOKEN_TRANSFER_TO_THE_ZERO_ADDRESS              = \\\"YieldToken: transfer to the zero address\\\";\\n    string public constant YIELDTOKEN_MSG_SENDER_NOT_WHITELISTED                = \\\"YieldToken: msg.sender not whitelisted\\\";\\n    string public constant YIELDTOKEN_TRANSFER_AMOUNT_EXCEEDS_BALANCE           = \\\"YieldToken: transfer amount exceeds balance\\\";\\n    string public constant YIELDTOKEN_APPROVE_FROM_THE_ZERO_ADDRESS             = \\\"YieldToken: approve from the zero address\\\";\\n    string public constant YIELDTOKEN_APPROVE_TO_THE_ZERO_ADDRESS               = \\\"YieldToken: approve to the zero address\\\";\\n\\n    string public constant MINTABLEBASETOKEN_FORBIDDEN                          = \\\"MintableBaseToken: forbidden\\\";\\n    string public constant BASETOKEN_FORBIDDEN                                  = \\\"BaseToken: forbidden\\\";\\n    string public constant BASETOKEN_ACCOUNT_ALREADY_MARKED                     = \\\"BaseToken: _account already marked\\\";\\n    string public constant BASETOKEN_ACCOUNT_NOT_MARKED                         = \\\"BaseToken: _account not marked\\\";\\n    string public constant BASETOKEN_TRANSFER_AMOUNT_EXCEEDS_ALLOWANCE          = \\\"BaseToken: transfer amount exceeds allowance\\\";\\n    string public constant BASETOKEN_MINT_TO_THE_ZERO_ADDRESS                   = \\\"BaseToken: mint to the zero address\\\";\\n    string public constant BASETOKEN_BURN_FROM_THE_ZERO_ADDRESS                 = \\\"BaseToken: burn from the zero address\\\";\\n    string public constant BASETOKEN_BURN_AMOUNT_EXCEEDS_BALANCE                = \\\"BaseToken: burn amount exceeds balance\\\";\\n    string public constant BASETOKEN_TRANSFER_FROM_THE_ZERO_ADDRESS             = \\\"BaseToken: transfer from the zero address\\\";\\n    string public constant BASETOKEN_TRANSFER_TO_THE_ZERO_ADDRESS               = \\\"BaseToken: transfer to the zero address\\\";\\n    string public constant BASETOKEN_MSG_SENDER_NOT_WHITELISTED                 = \\\"BaseToken: msg.sender not whitelisted\\\";\\n    string public constant BASETOKEN_TRANSFER_AMOUNT_EXCEEDS_BALANCE            = \\\"BaseToken: transfer amount exceeds balance\\\";\\n    string public constant BASETOKEN_APPROVE_FROM_THE_ZERO_ADDRESS              = \\\"BaseToken: approve from the zero address\\\";\\n    string public constant BASETOKEN_APPROVE_TO_THE_ZERO_ADDRESS                = \\\"BaseToken: approve to the zero address\\\";\\n}\\n\",\"keccak256\":\"0x05483ba94e083a7e9f288fa9e1ea4d0961880cf669c779b8ad46747b205615d8\",\"license\":\"MIT\"},\"contracts/libraries/Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\nlibrary Events {\\n    /* BasePositionManager Events */\\n    event SetDepositFee(uint256 depositFee);\\n    event SetIncreasePositionBufferBps(uint256 increasePositionBufferBps);\\n    event SetAdmin(address admin);\\n    event WithdrawFees(address token, address receiver, uint256 amount);\\n    event SetMaxGlobalSizes(address[] tokens, uint256[] longSizes, uint256[] shortSizes);\\n    /*Position Manager Events*/\\n    event SetOrderKeeper(address indexed account, bool isActive);\\n    event SetLiquidator(address indexed account, bool isActive);\\n    event SetPartner(address account, bool isActive);\\n    event SetOpened(bool opened);\\n    event SetShouldValidateIncreaseOrder(bool shouldValidateIncreaseOrder);\\n    /* Orderbook.sol events */\\n    event CreateSwapOrder(\\n        address indexed account, uint256 orderIndex,\\n        address[] path, uint256 amountIn, uint256 minOut,\\n        uint256 triggerRatio, bool triggerAboveThreshold, bool shouldUnwrap, uint256 executionFee);\\n    event CancelSwapOrder(\\n        address indexed account, uint256 orderIndex,\\n        address[] path, uint256 amountIn, uint256 minOut,\\n        uint256 triggerRatio, bool triggerAboveThreshold, bool shouldUnwrap, uint256 executionFee);\\n    event UpdateSwapOrder(\\n        address indexed account, uint256 ordexIndex, address[] path, uint256 amountIn, uint256 minOut, uint256 triggerRatio, bool triggerAboveThreshold, bool shouldUnwrap, uint256 executionFee);\\n    event ExecuteSwapOrder(\\n        address indexed account, uint256 orderIndex,\\n        address[] path, uint256 amountIn, uint256 minOut,\\n        uint256 amountOut, uint256 triggerRatio,\\n        bool triggerAboveThreshold, bool shouldUnwrap, uint256 executionFee);\\n    event Initialize(\\n        address router, address vault, address weth,\\n        address zkusd, uint256 minExecutionFee);\\n    event UpdateMinExecutionFee(uint256 minExecutionFee);\\n    event UpdateGov(address gov);\\n    /* Router.sol events*/\\n    event Swap(address account, address tokenIn, address tokenOut, uint256 amountIn, uint256 amountOut);\\n    /* ShortsTracker.sol events*/\\n    event GlobalShortDataUpdated(address indexed token, uint256 globalShortSize, uint256 globalShortAveragePrice);\\n    /* Vault.sol events */\\n    event BuyZKUSD(\\n        address account, address token,\\n        uint256 tokenAmount, uint256 zkusdAmount, uint256 feeBasisPoints);\\n    event SellZKUSD(\\n        address account, address token,\\n        uint256 zkusdAmount, uint256 tokenAmount, uint256 feeBasisPoints);\\n    event Swap(\\n        address account, address tokenIn,\\n        address tokenOut, uint256 amountIn,\\n        uint256 amountOut, uint256 amountOutAfterFees,\\n        uint256 feeBasisPoints);\\n    event IncreasePosition(\\n        bytes32 key, address account,\\n        address collateralToken, address indexToken,\\n        uint256 collateralDelta, uint256 sizeDelta,\\n        bool isLong, uint256 price, uint256 fee);\\n    event DecreasePosition(\\n        bytes32 key, address account,\\n        address collateralToken, address indexToken,\\n        uint256 collateralDelta, uint256 sizeDelta,\\n        bool isLong, uint256 price, uint256 fee);\\n    event LiquidatePosition(\\n        bytes32 key, address account, address collateralToken,\\n        address indexToken, bool isLong, uint256 size,\\n        uint256 collateral, uint256 reserveAmount, int256 realisedPnl, uint256 markPrice);\\n    event UpdatePosition(\\n        bytes32 key, uint256 size, uint256 collateral,\\n        uint256 averagePrice, uint256 entryFundingRate,\\n        uint256 reserveAmount, int256 realisedPnl, uint256 markPrice);\\n    event ClosePosition(\\n        bytes32 key, uint256 size, uint256 collateral,\\n        uint256 averagePrice, uint256 entryFundingRate, uint256 reserveAmount, int256 realisedPnl);\\n    event UpdateFundingRate(address token, uint256 fundingRate);\\n    event UpdatePnl(bytes32 key, bool hasProfit, uint256 delta);\\n    event CollectSwapFees(address token, uint256 feeUsd, uint256 feeTokens);\\n    event CollectMarginFees(address token, uint256 feeUsd, uint256 feeTokens);\\n    event DirectPoolDeposit(address token, uint256 amount);\\n    event IncreasePoolAmount(address token, uint256 amount);\\n    event DecreasePoolAmount(address token, uint256 amount);\\n    event IncreaseZkusdAmount(address token, uint256 amount);\\n    event DecreaseZkusdAmount(address token, uint256 amount);\\n    event IncreaseReservedAmount(address token, uint256 amount);\\n    event DecreaseReservedAmount(address token, uint256 amount);\\n    event IncreaseGuaranteedUsd(address token, uint256 amount);\\n    event DecreaseGuaranteedUsd(address token, uint256 amount);\\n    /* Timelock.sol events */\\n    event SignalPendingAction(bytes32 action);\\n    event SignalApprove(address token, address spender, uint256 amount, bytes32 action);\\n    event SignalWithdrawToken(address target, address token, address receiver, uint256 amount, bytes32 action);\\n    event SignalMint(address token, address receiver, uint256 amount, bytes32 action);\\n    event SignalSetGov(address target, address gov, bytes32 action);\\n    event SignalSetHandler(address target, address handler, bool isActive, bytes32 action);\\n    event SignalSetPriceFeed(address vault, address priceFeed, bytes32 action);\\n    event SignalRedeemZkusd(address vault, address token, uint256 amount);\\n    event SignalVaultSetTokenConfig(\\n        address vault, address token, uint256 tokenDecimals,\\n        uint256 tokenWeight, uint256 minProfitBps, uint256 maxZkusdAmount,\\n        bool isStable, bool isShortable);\\n    event ClearAction(bytes32 action);\\n    /* ZkdlpManager.sol */\\n    event AddLiquidity(address account, address token, uint256 amount, uint256 aumInUsd, uint256 zkdlpSupply, uint256 zkusdAmount, uint256 mintAmount);\\n    event RemoveLiquidity(address account, address token, uint256 zkdlpAmount, uint256 aumInUsd, uint256 zkdlpSupply, uint256 zkusdAmount, uint256 amountOut);\\n    /* RewardRouterV2 */\\n    event StakeZkdx(address account, address token, uint256 amount);\\n    event UnstakeZkdx(address account, address token, uint256 amount);\\n    event StakeZkdlp(address account, uint256 amount);\\n    event UnstakeZkdlp(address account, uint256 amount);\\n\\n    /* OrderBook.sol */\\n    event CreateIncreaseOrder(\\n        address indexed account,\\n        uint256 orderIndex,\\n        address purchaseToken,\\n        uint256 purchaseTokenAmount,\\n        address collateralToken,\\n        address indexToken,\\n        uint256 sizeDelta,\\n        bool isLong,\\n        uint256 triggerPrice,\\n        bool triggerAboveThreshold,\\n        uint256 executionFee\\n    );\\n\\n    event CancelIncreaseOrder(\\n        address indexed account,\\n        uint256 orderIndex,\\n        address purchaseToken,\\n        uint256 purchaseTokenAmount,\\n        address collateralToken,\\n        address indexToken,\\n        uint256 sizeDelta,\\n        bool isLong,\\n        uint256 triggerPrice,\\n        bool triggerAboveThreshold,\\n        uint256 executionFee\\n    );\\n\\n    event ExecuteIncreaseOrder(\\n        address indexed account,\\n        uint256 orderIndex,\\n        address purchaseToken,\\n        uint256 purchaseTokenAmount,\\n        address collateralToken,\\n        address indexToken,\\n        uint256 sizeDelta,\\n        bool isLong,\\n        uint256 triggerPrice,\\n        bool triggerAboveThreshold,\\n        uint256 executionFee,\\n        uint256 executionPrice\\n    );\\n\\n    event UpdateIncreaseOrder(\\n        address indexed account,\\n        uint256 orderIndex,\\n        address collateralToken,\\n        address indexToken,\\n        bool isLong,\\n        uint256 sizeDelta,\\n        uint256 triggerPrice,\\n        bool triggerAboveThreshold\\n    );\\n\\n    event CreateDecreaseOrder(\\n        address indexed account,\\n        uint256 orderIndex,\\n        address collateralToken,\\n        uint256 collateralDelta,\\n        address indexToken,\\n        uint256 sizeDelta,\\n        bool isLong,\\n        uint256 triggerPrice,\\n        bool triggerAboveThreshold,\\n        uint256 executionFee\\n    );\\n\\n    event CancelDecreaseOrder(\\n        address indexed account,\\n        uint256 orderIndex,\\n        address collateralToken,\\n        uint256 collateralDelta,\\n        address indexToken,\\n        uint256 sizeDelta,\\n        bool isLong,\\n        uint256 triggerPrice,\\n        bool triggerAboveThreshold,\\n        uint256 executionFee\\n    );\\n\\n    event ExecuteDecreaseOrder(\\n        address indexed account,\\n        uint256 orderIndex,\\n        address collateralToken,\\n        uint256 collateralDelta,\\n        address indexToken,\\n        uint256 sizeDelta,\\n        bool isLong,\\n        uint256 triggerPrice,\\n        bool triggerAboveThreshold,\\n        uint256 executionFee,\\n        uint256 executionPrice\\n    );\\n\\n    event UpdateDecreaseOrder(\\n        address indexed account,\\n        uint256 orderIndex,\\n        address collateralToken,\\n        uint256 collateralDelta,\\n        address indexToken,\\n        uint256 sizeDelta,\\n        bool isLong,\\n        uint256 triggerPrice,\\n        bool triggerAboveThreshold\\n    );\\n}\\n\",\"keccak256\":\"0x3656730f42a4614b3704801573c526b2a0da4f7d170071c50767a688bcd753f8\",\"license\":\"MIT\"},\"contracts/libraries/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x41b0da7db3e1f79b338824fed2bc4732430b78002a9d51c2cfa86ad5a12c2763\",\"license\":\"MIT\"},\"contracts/libraries/token/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xa3ce253082421a9e79d2b884ae6f60507b0cc73ea356674072091454c44cc556\",\"license\":\"MIT\"},\"contracts/libraries/token/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../math/SafeMath.sol\\\";\\nimport \\\"../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf80766b21ea67a73c81e0dea4543375243938c8b223e29c5d783be61ab3f424c\",\"license\":\"MIT\"},\"contracts/libraries/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.2;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x62dd54ef394959ddda751b6b9053803a746fa32c6b26cb8f871307687bb64e5f\",\"license\":\"MIT\"},\"contracts/libraries/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\ncontract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xae7a1e407ed171ecd3a0d3976875d6c58eefdccf831ebce6314ec94892dffc03\",\"license\":\"MIT\"},\"contracts/tokens/interfaces/IMintable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\ninterface IMintable {\\n    function isMinter(address _account) external returns (bool);\\n    function setMinter(address _minter, bool _isActive) external;\\n    function mint(address _account, uint256 _amount) external;\\n    function burn(address _account, uint256 _amount) external;\\n}\",\"keccak256\":\"0x1cb14f340029d7d16406d49987335f073a0c4006cff2c46fd66b3d2c8717e2f8\",\"license\":\"MIT\"},\"contracts/tokens/interfaces/IZKUSD.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\ninterface IZKUSD {\\n    function addVault(address _vault) external;\\n    function removeVault(address _vault) external;\\n    function mint(address _account, uint256 _amount) external;\\n    function burn(address _account, uint256 _amount) external;\\n}\",\"keccak256\":\"0xd559ec7a5a776135b7fcef14e614a4b4d79044727d3d8ef7f728d47f6567f816\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040526005805460ff60a01b1916600160a01b17905534801561002357600080fd5b506040516126a43803806126a4833981810160405260a081101561004657600080fd5b5080516020820151604083015160608401516080909401516001600081905580546001600160a01b031990811633908117821617909155600280546001600160a01b0396871690831617905560038054948616948216949094179093556004805492851692841692909217909155600580549390941692909116919091179091556008556125cb806100d96000396000f3fe608060405234801561001057600080fd5b506004361061016e5760003560e01c80636a86da19116100ce578063a1acd3d511610087578063a1acd3d5146103be578063ab341df114610409578063b172bb0c14610430578063cfad57a214610438578063e245b5af1461045e578063ed0d1c041461047d578063fbfa77cf146104d55761016e565b80636a86da19146102c757806371d597ad146102e65780638b770e111461032a5780639116c4ae14610350578063966be075146103735780639cb7de4b146103905761016e565b8063440d828a1161012b578063440d828a1461022557806346ea87af1461024b5780634a56443f146102715780634f5f6b5e146102795780635ecbe8d41461029857806364e6617f146102b7578063657bc5d0146102bf5761016e565b8063044c097514610173578063070eacee1461019757806312d43a51146101b357806317eb2a15146101bb578063196b68cb14610215578063352693151461021d575b600080fd5b61017b6104dd565b604080516001600160a01b039092168252519081900360200190f35b61019f6104ec565b604080519115158252519081900360200190f35b61017b6104fc565b610203600480360360c08110156101d157600080fd5b506001600160a01b03813581169160208101358216916040820135169060608101359060808101359060a0013561050b565b60408051918252519081900360200190f35b610203610590565b610203610596565b6102036004803603602081101561023b57600080fd5b50356001600160a01b031661059c565b61019f6004803603602081101561026157600080fd5b50356001600160a01b03166108bf565b61017b6108d4565b6102966004803603602081101561028f57600080fd5b50356108e3565b005b610203600480360360208110156102ae57600080fd5b503515156109f8565b610203610a32565b61017b610a38565b610296600480360360208110156102dd57600080fd5b50351515610a47565b610203600480360360a08110156102fc57600080fd5b506001600160a01b038135811691602081013582169160408201359160608101359160809091013516610ab2565b6102036004803603602081101561034057600080fd5b50356001600160a01b0316610b35565b6102966004803603604081101561036657600080fd5b5080359060200135610b47565b6102966004803603602081101561038957600080fd5b5035610b9f565b610296600480360360408110156103a657600080fd5b506001600160a01b0381351690602001351515610c5e565b6103f0600480360360608110156103d457600080fd5b506001600160a01b038135169060208101359060400135610cd6565b6040805192835290151560208301528051918290030190f35b6102036004803603604081101561041f57600080fd5b508035151590602001351515610d2a565b61020361151d565b6102966004803603602081101561044e57600080fd5b50356001600160a01b0316611523565b6102036004803603602081101561047457600080fd5b50351515611592565b61048561164c565b60408051602080825283518183015283519192839290830191858101910280838360005b838110156104c15781810151838201526020016104a9565b505050509050019250505060405180910390f35b61017b6116bd565b6004546001600160a01b031681565b600554600160a01b900460ff1681565b6001546001600160a01b031681565b600060026000541415610565576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b60026000556105726116cc565b61058087878787878761175f565b6001600055979650505050505050565b60095481565b60085481565b6005546000906001600160a01b031680158061061a5750806001600160a01b0316639a11178f6040518163ffffffff1660e01b815260040160206040518083038186803b1580156105ec57600080fd5b505afa158015610600573d6000803e3d6000fd5b505050506040513d602081101561061657600080fd5b5051155b156106a15760025460408051636274980360e01b81526001600160a01b038681166004830152915191909216916362749803916024808301926020929190829003018186803b15801561066c57600080fd5b505afa158015610680573d6000803e3d6000fd5b505050506040513d602081101561069657600080fd5b505191506108ba9050565b6006548061072c5760025460408051636274980360e01b81526001600160a01b038781166004830152915191909216916362749803916024808301926020929190829003018186803b1580156106f657600080fd5b505afa15801561070a573d6000803e3d6000fd5b505050506040513d602081101561072057600080fd5b505192506108ba915050565b61271081141561078357816001600160a01b03166362749803856040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156106f657600080fd5b60025460408051636274980360e01b81526001600160a01b03878116600483015291516000939290921691636274980391602480820192602092909190829003018186803b1580156107d457600080fd5b505afa1580156107e8573d6000803e3d6000fd5b505050506040513d60208110156107fe57600080fd5b505160408051636274980360e01b81526001600160a01b038881166004830152915192935060009291861691636274980391602480820192602092909190829003018186803b15801561085057600080fd5b505afa158015610864573d6000803e3d6000fd5b505050506040513d602081101561087a57600080fd5b505190506108b36127106108ad6108918487611b10565b6108a76108a061271089611b69565b8790611b10565b90611bab565b90611c05565b9450505050505b919050565b60076020526000908152604090205460ff1681565b6003546001600160a01b031681565b6001546001600160a01b03163314610930576040805162461bcd60e51b81526020600482015260156024820152600080516020612445833981519152604482015290519081900360640190fd5b60408051808201909152601c81527f5a6b646c704d616e616765723a20696e76616c6964207765696768740000000060208201526127108211156109f25760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156109b757818101518382015260200161099f565b50505050905090810190601f1680156109e45780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50600655565b600080610a06836001610d2a565b9050610a2b6c0c9f2c9cd04674edea400000006108ad83670de0b6b3a7640000611b10565b9392505050565b60065481565b6005546001600160a01b031681565b6001546001600160a01b03163314610a94576040805162461bcd60e51b81526020600482015260156024820152600080516020612445833981519152604482015290519081900360640190fd5b60058054911515600160a01b0260ff60a01b19909216919091179055565b600060026000541415610b0c576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b6002600055610b196116cc565b610b268686868686611c47565b60016000559695505050505050565b600b6020526000908152604090205481565b6001546001600160a01b03163314610b94576040805162461bcd60e51b81526020600482015260156024820152600080516020612445833981519152604482015290519081900360640190fd5b600991909155600a55565b6001546001600160a01b03163314610bec576040805162461bcd60e51b81526020600482015260156024820152600080516020612445833981519152604482015290519081900360640190fd5b6202a30081111560405180606001604052806027815260200161256f6027913990610c585760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156109b757818101518382015260200161099f565b50600855565b6001546001600160a01b03163314610cab576040805162461bcd60e51b81526020600482015260156024820152600080516020612445833981519152604482015290519081900360640190fd5b6001600160a01b03919091166000908152600760205260409020805460ff1916911515919091179055565b6000806000610ce48661059c565b90506000858211610cfe57610cf98683611b69565b610d08565b610d088287611b69565b90506000610d1a836108ad8885611b10565b9450505084109050935093915050565b600080600260009054906101000a90046001600160a01b03166001600160a01b0316630842b0766040518163ffffffff1660e01b815260040160206040518083038186803b158015610d7b57600080fd5b505afa158015610d8f573d6000803e3d6000fd5b505050506040513d6020811015610da557600080fd5b505160095460025460408051633a0df78d60e11b8152905193945091926000926001600160a01b03909216918391839163741bef1a916004808301926020929190829003018186803b158015610dfa57600080fd5b505afa158015610e0e573d6000803e3d6000fd5b505050506040513d6020811015610e2457600080fd5b5051905060005b858110156114d45760025460408051630e468baf60e41b81526004810184905290516000926001600160a01b03169163e468baf0916024808301926020929190829003018186803b158015610e7f57600080fd5b505afa158015610e93573d6000803e3d6000fd5b505050506040513d6020811015610ea957600080fd5b505160025460408051630daf9c2160e41b81526001600160a01b038085166004830152915193945091169163daf9c21091602480820192602092909190829003018186803b158015610efa57600080fd5b505afa158015610f0e573d6000803e3d6000fd5b505050506040513d6020811015610f2457600080fd5b5051610f3057506114cc565b6002546040805163a866991560e01b81526001600160a01b0384811660048301529151600093929092169163a866991591602480820192602092909190829003018186803b158015610f8157600080fd5b505afa158015610f95573d6000803e3d6000fd5b505050506040513d6020811015610fab57600080fd5b50518061102d5750600254604080516342b60b0360e01b81526001600160a01b038581166004830152915191909216916342b60b03916024808301926020929190829003018186803b15801561100057600080fd5b505afa158015611014573d6000803e3d6000fd5b505050506040513d602081101561102a57600080fd5b50515b156110be5760408051635ae6916360e01b81526001600160a01b0384811660048301528d1515602483015260006044830152915191861691635ae6916391606480820192602092909190829003018186803b15801561108b57600080fd5b505afa15801561109f573d6000803e3d6000fd5b505050506040513d60208110156110b557600080fd5b50519050611147565b60408051635ae6916360e01b81526001600160a01b0384811660048301528d151560248301528c15156044830152915191861691635ae6916391606480820192602092909190829003018186803b15801561111857600080fd5b505afa15801561112c573d6000803e3d6000fd5b505050506040513d602081101561114257600080fd5b505190505b6000856001600160a01b03166352f55eed846040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561119657600080fd5b505afa1580156111aa573d6000803e3d6000fd5b505050506040513d60208110156111c057600080fd5b5051604080516323b95ceb60e21b81526001600160a01b038681166004830152915192935060009291891691638ee573ac91602480820192602092909190829003018186803b15801561121257600080fd5b505afa158015611226573d6000803e3d6000fd5b505050506040513d602081101561123c57600080fd5b5051604080516342b60b0360e01b81526001600160a01b0387811660048301529151929350908916916342b60b0391602480820192602092909190829003018186803b15801561128b57600080fd5b505afa15801561129f573d6000803e3d6000fd5b505050506040513d60208110156112b557600080fd5b5051156112df576112d86112d1600a83900a6108ad8587611b10565b8a90611bab565b98506114c7565b6000876001600160a01b0316638a78daa8866040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561132e57600080fd5b505afa158015611342573d6000803e3d6000fd5b505050506040513d602081101561135857600080fd5b50519050801561139a57600080611370878785610cd6565b915091508061138a576113838c83611bab565b9b50611397565b6113948b83611bab565b9a505b50505b61141d886001600160a01b031663f07456ce876040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156113ea57600080fd5b505afa1580156113fe573d6000803e3d6000fd5b505050506040513d602081101561141457600080fd5b50518b90611bab565b99506000886001600160a01b031663c3c7b9e9876040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561146e57600080fd5b505afa158015611482573d6000803e3d6000fd5b505050506040513d602081101561149857600080fd5b505190506114c26114bb600a85900a6108ad886114b58987611b69565b90611b10565b8c90611bab565b9a5050505b505050505b600101610e2b565b508383116114eb576114e68484611b69565b6114ee565b60005b935083600a541161150c57600a54611507908590611b69565b61150f565b60005b955050505050505b92915050565b600a5481565b6001546001600160a01b03163314611570576040805162461bcd60e51b81526020600482015260156024820152600080516020612445833981519152604482015290519081900360640190fd5b600180546001600160a01b0319166001600160a01b0392909216919091179055565b60048054604080516318160ddd60e01b8152905160009384936001600160a01b0316926318160ddd9281830192602092829003018186803b1580156115d657600080fd5b505afa1580156115ea573d6000803e3d6000fd5b505050506040513d602081101561160057600080fd5b505190508061161f576c0c9f2c9cd04674edea400000009150506108ba565b600061162c846000610d2a565b9050611644826108ad83670de0b6b3a7640000611b10565b949350505050565b60408051600280825260608083018452928392919060208301908036833701905050905061167c60016000610d2a565b8160008151811061168957fe5b6020026020010181815250506116a0600080610d2a565b816001815181106116ad57fe5b6020908102919091010152905090565b6002546001600160a01b031681565b3360009081526007602090815260409182902054825180840190935260178352762d35b2363826b0b730b3b2b91d103337b93134b23232b760491b9183019190915260ff1661175c5760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156109b757818101518382015260200161099f565b50565b60008084116040518060400160405280601d81526020017f5a6b646c704d616e616765723a20696e76616c6964205f616d6f756e74000000815250906117e65760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156109b757818101518382015260200161099f565b5060006117f360016109f8565b90506000600460009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561184557600080fd5b505afa158015611859573d6000803e3d6000fd5b505050506040513d602081101561186f57600080fd5b5051600254909150611890906001600160a01b03898116918c91168961213d565b600254604080516354d33cf960e01b81526001600160a01b038a81166004830152306024830152915160009392909216916354d33cf99160448082019260209290919082900301818787803b1580156118e857600080fd5b505af11580156118fc573d6000803e3d6000fd5b505050506040513d602081101561191257600080fd5b50516040805160608101909152602780825291925087831015916124fc6020830139906119805760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156109b757818101518382015260200161099f565b50600083158061198e575082155b6119a5576119a0846108ad8486611b10565b6119a7565b815b9050858110156040518060600160405280602781526020016124656027913990611a125760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156109b757818101518382015260200161099f565b5060048054604080516340c10f1960e01b81526001600160a01b038e81169482019490945260248101859052905192909116916340c10f199160448082019260009290919082900301818387803b158015611a6c57600080fd5b505af1158015611a80573d6000803e3d6000fd5b5050506001600160a01b03808c166000818152600b60209081526040918290204290558151928352928d16928201929092528082018b9052606081018790526080810186905260a0810185905260c0810184905290517f38dc38b96482be64113daffd8d464ebda93e856b70ccfc605e69ccf892ab981e92509081900360e00190a19a9950505050505050505050565b600082611b1f57506000611517565b82820282848281611b2c57fe5b0414610a2b5760405162461bcd60e51b81526004018080602001828103825260218152602001806124db6021913960400191505060405180910390fd5b6000610a2b83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f77000081525061219d565b600082820183811015610a2b576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b6000610a2b83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f0000000000008152506121f7565b600080841160405180606001604052806022815260200161254d6022913990611cb15760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156109b757818101518382015260200161099f565b506008546001600160a01b0387166000908152600b60205260409020544291611cda9190611bab565b11156040518060600160405280602e815260200161248c602e913990611d415760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156109b757818101518382015260200161099f565b506000611d4e60006109f8565b90506000600460009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015611da057600080fd5b505afa158015611db4573d6000803e3d6000fd5b505050506040513d6020811015611dca57600080fd5b505190506000611dde826108ad8986611b10565b600354604080516370a0823160e01b815230600482015290519293506000926001600160a01b03909216916370a0823191602480820192602092909190829003018186803b158015611e2f57600080fd5b505afa158015611e43573d6000803e3d6000fd5b505050506040513d6020811015611e5957600080fd5b5051905080821115611ee0576003546001600160a01b03166340c10f1930611e818585611b69565b6040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050600060405180830381600087803b158015611ec757600080fd5b505af1158015611edb573d6000803e3d6000fd5b505050505b6004805460408051632770a7eb60e21b81526001600160a01b038e811694820194909452602481018c905290519290911691639dc29fac9160448082019260009290919082900301818387803b158015611f3957600080fd5b505af1158015611f4d573d6000803e3d6000fd5b50506003546002546040805163a9059cbb60e01b81526001600160a01b03928316600482015260248101889052905191909216935063a9059cbb925060448083019260209291908290030181600087803b158015611faa57600080fd5b505af1158015611fbe573d6000803e3d6000fd5b505050506040513d6020811015611fd457600080fd5b5050600254604080516302718b5760e21b81526001600160a01b038c811660048301528981166024830152915160009392909216916309c62d5c9160448082019260209290919082900301818787803b15801561203057600080fd5b505af1158015612044573d6000803e3d6000fd5b505050506040513d602081101561205a57600080fd5b50516040805160608101909152602180825291925089831015916124ba6020830139906120c85760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156109b757818101518382015260200161099f565b50604080516001600160a01b03808e1682528c1660208201528082018b9052606081018790526080810186905260a0810185905260c0810183905290517f87b9679bb9a4944bafa98c267e7cd4a00ab29fed48afdefae25f0fca5da279409181900360e00190a19a9950505050505050505050565b604080516001600160a01b0380861660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b17905261219790859061225c565b50505050565b600081848411156121ef5760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156109b757818101518382015260200161099f565b505050900390565b600081836122465760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156109b757818101518382015260200161099f565b50600083858161225257fe5b0495945050505050565b60606122b1826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166123129092919063ffffffff16565b80519091501561230d578080602001905160208110156122d057600080fd5b505161230d5760405162461bcd60e51b815260040180806020018281038252602a815260200180612523602a913960400191505060405180910390fd5b505050565b606061164484846000858560006060866001600160a01b031685876040518082805190602001908083835b6020831061235c5780518252601f19909201916020918201910161233d565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d80600081146123be576040519150601f19603f3d011682016040523d82523d6000602084013e6123c3565b606091505b50915091506123d38282866123de565b979650505050505050565b606083156123ed575081610a2b565b8251156123fd5782518084602001fd5b60405162461bcd60e51b81526020600482018181528451602484015284518593919283926044019190850190808383600083156109b757818101518382015260200161099f56fe476f7665726e61626c653a20666f7262696464656e00000000000000000000005a6b646c704d616e616765723a20696e73756666696369656e74205a4b444c50206f75747075745a6b646c704d616e616765723a20636f6f6c646f776e206475726174696f6e206e6f7420796574207061737365645a6b646c704d616e616765723a20696e73756666696369656e74206f7574707574536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f775a6b646c704d616e616765723a20696e73756666696369656e74205a4b555344206f75747075745361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565645a6b646c704d616e616765723a20696e76616c6964205f5a4b444c50416d6f756e745a6b646c704d616e616765723a20696e76616c6964205f636f6f6c646f776e4475726174696f6ea2646970667358221220d63c4ba9730a8ffeceb3069f287015a8be7870af4db9537b9c32ca3ad461596664736f6c634300060c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061016e5760003560e01c80636a86da19116100ce578063a1acd3d511610087578063a1acd3d5146103be578063ab341df114610409578063b172bb0c14610430578063cfad57a214610438578063e245b5af1461045e578063ed0d1c041461047d578063fbfa77cf146104d55761016e565b80636a86da19146102c757806371d597ad146102e65780638b770e111461032a5780639116c4ae14610350578063966be075146103735780639cb7de4b146103905761016e565b8063440d828a1161012b578063440d828a1461022557806346ea87af1461024b5780634a56443f146102715780634f5f6b5e146102795780635ecbe8d41461029857806364e6617f146102b7578063657bc5d0146102bf5761016e565b8063044c097514610173578063070eacee1461019757806312d43a51146101b357806317eb2a15146101bb578063196b68cb14610215578063352693151461021d575b600080fd5b61017b6104dd565b604080516001600160a01b039092168252519081900360200190f35b61019f6104ec565b604080519115158252519081900360200190f35b61017b6104fc565b610203600480360360c08110156101d157600080fd5b506001600160a01b03813581169160208101358216916040820135169060608101359060808101359060a0013561050b565b60408051918252519081900360200190f35b610203610590565b610203610596565b6102036004803603602081101561023b57600080fd5b50356001600160a01b031661059c565b61019f6004803603602081101561026157600080fd5b50356001600160a01b03166108bf565b61017b6108d4565b6102966004803603602081101561028f57600080fd5b50356108e3565b005b610203600480360360208110156102ae57600080fd5b503515156109f8565b610203610a32565b61017b610a38565b610296600480360360208110156102dd57600080fd5b50351515610a47565b610203600480360360a08110156102fc57600080fd5b506001600160a01b038135811691602081013582169160408201359160608101359160809091013516610ab2565b6102036004803603602081101561034057600080fd5b50356001600160a01b0316610b35565b6102966004803603604081101561036657600080fd5b5080359060200135610b47565b6102966004803603602081101561038957600080fd5b5035610b9f565b610296600480360360408110156103a657600080fd5b506001600160a01b0381351690602001351515610c5e565b6103f0600480360360608110156103d457600080fd5b506001600160a01b038135169060208101359060400135610cd6565b6040805192835290151560208301528051918290030190f35b6102036004803603604081101561041f57600080fd5b508035151590602001351515610d2a565b61020361151d565b6102966004803603602081101561044e57600080fd5b50356001600160a01b0316611523565b6102036004803603602081101561047457600080fd5b50351515611592565b61048561164c565b60408051602080825283518183015283519192839290830191858101910280838360005b838110156104c15781810151838201526020016104a9565b505050509050019250505060405180910390f35b61017b6116bd565b6004546001600160a01b031681565b600554600160a01b900460ff1681565b6001546001600160a01b031681565b600060026000541415610565576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b60026000556105726116cc565b61058087878787878761175f565b6001600055979650505050505050565b60095481565b60085481565b6005546000906001600160a01b031680158061061a5750806001600160a01b0316639a11178f6040518163ffffffff1660e01b815260040160206040518083038186803b1580156105ec57600080fd5b505afa158015610600573d6000803e3d6000fd5b505050506040513d602081101561061657600080fd5b5051155b156106a15760025460408051636274980360e01b81526001600160a01b038681166004830152915191909216916362749803916024808301926020929190829003018186803b15801561066c57600080fd5b505afa158015610680573d6000803e3d6000fd5b505050506040513d602081101561069657600080fd5b505191506108ba9050565b6006548061072c5760025460408051636274980360e01b81526001600160a01b038781166004830152915191909216916362749803916024808301926020929190829003018186803b1580156106f657600080fd5b505afa15801561070a573d6000803e3d6000fd5b505050506040513d602081101561072057600080fd5b505192506108ba915050565b61271081141561078357816001600160a01b03166362749803856040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156106f657600080fd5b60025460408051636274980360e01b81526001600160a01b03878116600483015291516000939290921691636274980391602480820192602092909190829003018186803b1580156107d457600080fd5b505afa1580156107e8573d6000803e3d6000fd5b505050506040513d60208110156107fe57600080fd5b505160408051636274980360e01b81526001600160a01b038881166004830152915192935060009291861691636274980391602480820192602092909190829003018186803b15801561085057600080fd5b505afa158015610864573d6000803e3d6000fd5b505050506040513d602081101561087a57600080fd5b505190506108b36127106108ad6108918487611b10565b6108a76108a061271089611b69565b8790611b10565b90611bab565b90611c05565b9450505050505b919050565b60076020526000908152604090205460ff1681565b6003546001600160a01b031681565b6001546001600160a01b03163314610930576040805162461bcd60e51b81526020600482015260156024820152600080516020612445833981519152604482015290519081900360640190fd5b60408051808201909152601c81527f5a6b646c704d616e616765723a20696e76616c6964207765696768740000000060208201526127108211156109f25760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156109b757818101518382015260200161099f565b50505050905090810190601f1680156109e45780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50600655565b600080610a06836001610d2a565b9050610a2b6c0c9f2c9cd04674edea400000006108ad83670de0b6b3a7640000611b10565b9392505050565b60065481565b6005546001600160a01b031681565b6001546001600160a01b03163314610a94576040805162461bcd60e51b81526020600482015260156024820152600080516020612445833981519152604482015290519081900360640190fd5b60058054911515600160a01b0260ff60a01b19909216919091179055565b600060026000541415610b0c576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b6002600055610b196116cc565b610b268686868686611c47565b60016000559695505050505050565b600b6020526000908152604090205481565b6001546001600160a01b03163314610b94576040805162461bcd60e51b81526020600482015260156024820152600080516020612445833981519152604482015290519081900360640190fd5b600991909155600a55565b6001546001600160a01b03163314610bec576040805162461bcd60e51b81526020600482015260156024820152600080516020612445833981519152604482015290519081900360640190fd5b6202a30081111560405180606001604052806027815260200161256f6027913990610c585760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156109b757818101518382015260200161099f565b50600855565b6001546001600160a01b03163314610cab576040805162461bcd60e51b81526020600482015260156024820152600080516020612445833981519152604482015290519081900360640190fd5b6001600160a01b03919091166000908152600760205260409020805460ff1916911515919091179055565b6000806000610ce48661059c565b90506000858211610cfe57610cf98683611b69565b610d08565b610d088287611b69565b90506000610d1a836108ad8885611b10565b9450505084109050935093915050565b600080600260009054906101000a90046001600160a01b03166001600160a01b0316630842b0766040518163ffffffff1660e01b815260040160206040518083038186803b158015610d7b57600080fd5b505afa158015610d8f573d6000803e3d6000fd5b505050506040513d6020811015610da557600080fd5b505160095460025460408051633a0df78d60e11b8152905193945091926000926001600160a01b03909216918391839163741bef1a916004808301926020929190829003018186803b158015610dfa57600080fd5b505afa158015610e0e573d6000803e3d6000fd5b505050506040513d6020811015610e2457600080fd5b5051905060005b858110156114d45760025460408051630e468baf60e41b81526004810184905290516000926001600160a01b03169163e468baf0916024808301926020929190829003018186803b158015610e7f57600080fd5b505afa158015610e93573d6000803e3d6000fd5b505050506040513d6020811015610ea957600080fd5b505160025460408051630daf9c2160e41b81526001600160a01b038085166004830152915193945091169163daf9c21091602480820192602092909190829003018186803b158015610efa57600080fd5b505afa158015610f0e573d6000803e3d6000fd5b505050506040513d6020811015610f2457600080fd5b5051610f3057506114cc565b6002546040805163a866991560e01b81526001600160a01b0384811660048301529151600093929092169163a866991591602480820192602092909190829003018186803b158015610f8157600080fd5b505afa158015610f95573d6000803e3d6000fd5b505050506040513d6020811015610fab57600080fd5b50518061102d5750600254604080516342b60b0360e01b81526001600160a01b038581166004830152915191909216916342b60b03916024808301926020929190829003018186803b15801561100057600080fd5b505afa158015611014573d6000803e3d6000fd5b505050506040513d602081101561102a57600080fd5b50515b156110be5760408051635ae6916360e01b81526001600160a01b0384811660048301528d1515602483015260006044830152915191861691635ae6916391606480820192602092909190829003018186803b15801561108b57600080fd5b505afa15801561109f573d6000803e3d6000fd5b505050506040513d60208110156110b557600080fd5b50519050611147565b60408051635ae6916360e01b81526001600160a01b0384811660048301528d151560248301528c15156044830152915191861691635ae6916391606480820192602092909190829003018186803b15801561111857600080fd5b505afa15801561112c573d6000803e3d6000fd5b505050506040513d602081101561114257600080fd5b505190505b6000856001600160a01b03166352f55eed846040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561119657600080fd5b505afa1580156111aa573d6000803e3d6000fd5b505050506040513d60208110156111c057600080fd5b5051604080516323b95ceb60e21b81526001600160a01b038681166004830152915192935060009291891691638ee573ac91602480820192602092909190829003018186803b15801561121257600080fd5b505afa158015611226573d6000803e3d6000fd5b505050506040513d602081101561123c57600080fd5b5051604080516342b60b0360e01b81526001600160a01b0387811660048301529151929350908916916342b60b0391602480820192602092909190829003018186803b15801561128b57600080fd5b505afa15801561129f573d6000803e3d6000fd5b505050506040513d60208110156112b557600080fd5b5051156112df576112d86112d1600a83900a6108ad8587611b10565b8a90611bab565b98506114c7565b6000876001600160a01b0316638a78daa8866040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561132e57600080fd5b505afa158015611342573d6000803e3d6000fd5b505050506040513d602081101561135857600080fd5b50519050801561139a57600080611370878785610cd6565b915091508061138a576113838c83611bab565b9b50611397565b6113948b83611bab565b9a505b50505b61141d886001600160a01b031663f07456ce876040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156113ea57600080fd5b505afa1580156113fe573d6000803e3d6000fd5b505050506040513d602081101561141457600080fd5b50518b90611bab565b99506000886001600160a01b031663c3c7b9e9876040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561146e57600080fd5b505afa158015611482573d6000803e3d6000fd5b505050506040513d602081101561149857600080fd5b505190506114c26114bb600a85900a6108ad886114b58987611b69565b90611b10565b8c90611bab565b9a5050505b505050505b600101610e2b565b508383116114eb576114e68484611b69565b6114ee565b60005b935083600a541161150c57600a54611507908590611b69565b61150f565b60005b955050505050505b92915050565b600a5481565b6001546001600160a01b03163314611570576040805162461bcd60e51b81526020600482015260156024820152600080516020612445833981519152604482015290519081900360640190fd5b600180546001600160a01b0319166001600160a01b0392909216919091179055565b60048054604080516318160ddd60e01b8152905160009384936001600160a01b0316926318160ddd9281830192602092829003018186803b1580156115d657600080fd5b505afa1580156115ea573d6000803e3d6000fd5b505050506040513d602081101561160057600080fd5b505190508061161f576c0c9f2c9cd04674edea400000009150506108ba565b600061162c846000610d2a565b9050611644826108ad83670de0b6b3a7640000611b10565b949350505050565b60408051600280825260608083018452928392919060208301908036833701905050905061167c60016000610d2a565b8160008151811061168957fe5b6020026020010181815250506116a0600080610d2a565b816001815181106116ad57fe5b6020908102919091010152905090565b6002546001600160a01b031681565b3360009081526007602090815260409182902054825180840190935260178352762d35b2363826b0b730b3b2b91d103337b93134b23232b760491b9183019190915260ff1661175c5760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156109b757818101518382015260200161099f565b50565b60008084116040518060400160405280601d81526020017f5a6b646c704d616e616765723a20696e76616c6964205f616d6f756e74000000815250906117e65760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156109b757818101518382015260200161099f565b5060006117f360016109f8565b90506000600460009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561184557600080fd5b505afa158015611859573d6000803e3d6000fd5b505050506040513d602081101561186f57600080fd5b5051600254909150611890906001600160a01b03898116918c91168961213d565b600254604080516354d33cf960e01b81526001600160a01b038a81166004830152306024830152915160009392909216916354d33cf99160448082019260209290919082900301818787803b1580156118e857600080fd5b505af11580156118fc573d6000803e3d6000fd5b505050506040513d602081101561191257600080fd5b50516040805160608101909152602780825291925087831015916124fc6020830139906119805760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156109b757818101518382015260200161099f565b50600083158061198e575082155b6119a5576119a0846108ad8486611b10565b6119a7565b815b9050858110156040518060600160405280602781526020016124656027913990611a125760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156109b757818101518382015260200161099f565b5060048054604080516340c10f1960e01b81526001600160a01b038e81169482019490945260248101859052905192909116916340c10f199160448082019260009290919082900301818387803b158015611a6c57600080fd5b505af1158015611a80573d6000803e3d6000fd5b5050506001600160a01b03808c166000818152600b60209081526040918290204290558151928352928d16928201929092528082018b9052606081018790526080810186905260a0810185905260c0810184905290517f38dc38b96482be64113daffd8d464ebda93e856b70ccfc605e69ccf892ab981e92509081900360e00190a19a9950505050505050505050565b600082611b1f57506000611517565b82820282848281611b2c57fe5b0414610a2b5760405162461bcd60e51b81526004018080602001828103825260218152602001806124db6021913960400191505060405180910390fd5b6000610a2b83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f77000081525061219d565b600082820183811015610a2b576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b6000610a2b83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f0000000000008152506121f7565b600080841160405180606001604052806022815260200161254d6022913990611cb15760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156109b757818101518382015260200161099f565b506008546001600160a01b0387166000908152600b60205260409020544291611cda9190611bab565b11156040518060600160405280602e815260200161248c602e913990611d415760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156109b757818101518382015260200161099f565b506000611d4e60006109f8565b90506000600460009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015611da057600080fd5b505afa158015611db4573d6000803e3d6000fd5b505050506040513d6020811015611dca57600080fd5b505190506000611dde826108ad8986611b10565b600354604080516370a0823160e01b815230600482015290519293506000926001600160a01b03909216916370a0823191602480820192602092909190829003018186803b158015611e2f57600080fd5b505afa158015611e43573d6000803e3d6000fd5b505050506040513d6020811015611e5957600080fd5b5051905080821115611ee0576003546001600160a01b03166340c10f1930611e818585611b69565b6040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050600060405180830381600087803b158015611ec757600080fd5b505af1158015611edb573d6000803e3d6000fd5b505050505b6004805460408051632770a7eb60e21b81526001600160a01b038e811694820194909452602481018c905290519290911691639dc29fac9160448082019260009290919082900301818387803b158015611f3957600080fd5b505af1158015611f4d573d6000803e3d6000fd5b50506003546002546040805163a9059cbb60e01b81526001600160a01b03928316600482015260248101889052905191909216935063a9059cbb925060448083019260209291908290030181600087803b158015611faa57600080fd5b505af1158015611fbe573d6000803e3d6000fd5b505050506040513d6020811015611fd457600080fd5b5050600254604080516302718b5760e21b81526001600160a01b038c811660048301528981166024830152915160009392909216916309c62d5c9160448082019260209290919082900301818787803b15801561203057600080fd5b505af1158015612044573d6000803e3d6000fd5b505050506040513d602081101561205a57600080fd5b50516040805160608101909152602180825291925089831015916124ba6020830139906120c85760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156109b757818101518382015260200161099f565b50604080516001600160a01b03808e1682528c1660208201528082018b9052606081018790526080810186905260a0810185905260c0810183905290517f87b9679bb9a4944bafa98c267e7cd4a00ab29fed48afdefae25f0fca5da279409181900360e00190a19a9950505050505050505050565b604080516001600160a01b0380861660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b17905261219790859061225c565b50505050565b600081848411156121ef5760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156109b757818101518382015260200161099f565b505050900390565b600081836122465760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156109b757818101518382015260200161099f565b50600083858161225257fe5b0495945050505050565b60606122b1826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166123129092919063ffffffff16565b80519091501561230d578080602001905160208110156122d057600080fd5b505161230d5760405162461bcd60e51b815260040180806020018281038252602a815260200180612523602a913960400191505060405180910390fd5b505050565b606061164484846000858560006060866001600160a01b031685876040518082805190602001908083835b6020831061235c5780518252601f19909201916020918201910161233d565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d80600081146123be576040519150601f19603f3d011682016040523d82523d6000602084013e6123c3565b606091505b50915091506123d38282866123de565b979650505050505050565b606083156123ed575081610a2b565b8251156123fd5782518084602001fd5b60405162461bcd60e51b81526020600482018181528451602484015284518593919283926044019190850190808383600083156109b757818101518382015260200161099f56fe476f7665726e61626c653a20666f7262696464656e00000000000000000000005a6b646c704d616e616765723a20696e73756666696369656e74205a4b444c50206f75747075745a6b646c704d616e616765723a20636f6f6c646f776e206475726174696f6e206e6f7420796574207061737365645a6b646c704d616e616765723a20696e73756666696369656e74206f7574707574536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f775a6b646c704d616e616765723a20696e73756666696369656e74205a4b555344206f75747075745361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565645a6b646c704d616e616765723a20696e76616c6964205f5a4b444c50416d6f756e745a6b646c704d616e616765723a20696e76616c6964205f636f6f6c646f776e4475726174696f6ea2646970667358221220d63c4ba9730a8ffeceb3069f287015a8be7870af4db9537b9c32ca3ad461596664736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 15478,
        "contract": "contracts/core/ZkdlpManager.sol:ZkdlpManager",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 3,
        "contract": "contracts/core/ZkdlpManager.sol:ZkdlpManager",
        "label": "gov",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 13006,
        "contract": "contracts/core/ZkdlpManager.sol:ZkdlpManager",
        "label": "vault",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IVault)7577"
      },
      {
        "astId": 13009,
        "contract": "contracts/core/ZkdlpManager.sol:ZkdlpManager",
        "label": "zkUsd",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 13011,
        "contract": "contracts/core/ZkdlpManager.sol:ZkdlpManager",
        "label": "zkdlp",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 13013,
        "contract": "contracts/core/ZkdlpManager.sol:ZkdlpManager",
        "label": "shortsTracker",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(IShortsTracker)6902"
      },
      {
        "astId": 13016,
        "contract": "contracts/core/ZkdlpManager.sol:ZkdlpManager",
        "label": "inPrivateMode",
        "offset": 20,
        "slot": "5",
        "type": "t_bool"
      },
      {
        "astId": 13018,
        "contract": "contracts/core/ZkdlpManager.sol:ZkdlpManager",
        "label": "shortsTrackerAveragePriceWeight",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 13022,
        "contract": "contracts/core/ZkdlpManager.sol:ZkdlpManager",
        "label": "isHandler",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 13025,
        "contract": "contracts/core/ZkdlpManager.sol:ZkdlpManager",
        "label": "cooldownDuration",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 13027,
        "contract": "contracts/core/ZkdlpManager.sol:ZkdlpManager",
        "label": "aumAddition",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 13029,
        "contract": "contracts/core/ZkdlpManager.sol:ZkdlpManager",
        "label": "aumDeduction",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 13040,
        "contract": "contracts/core/ZkdlpManager.sol:ZkdlpManager",
        "label": "lastAddedAt",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IShortsTracker)6902": {
        "encoding": "inplace",
        "label": "contract IShortsTracker",
        "numberOfBytes": "20"
      },
      "t_contract(IVault)7577": {
        "encoding": "inplace",
        "label": "contract IVault",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}