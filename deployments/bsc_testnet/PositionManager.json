{
  "address": "0x866D91fAC7EeA8d762116173eC9Dd536EC3D705E",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_router",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_shortsTracker",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_weth",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_depositFee",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_orderBook",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "BASIS_POINTS_DIVISOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "admin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_path",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "_indexToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_collateralDelta",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_sizeDelta",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_isLong",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_price",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minOut",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_withdrawETH",
          "type": "bool"
        },
        {
          "internalType": "bytes[]",
          "name": "_updateData",
          "type": "bytes[]"
        }
      ],
      "name": "decreasePosition",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "depositFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_orderIndex",
          "type": "uint256"
        },
        {
          "internalType": "address payable",
          "name": "_feeReceiver",
          "type": "address"
        },
        {
          "internalType": "bytes[]",
          "name": "_updateData",
          "type": "bytes[]"
        }
      ],
      "name": "executeDecreaseOrder",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_orderIndex",
          "type": "uint256"
        },
        {
          "internalType": "address payable",
          "name": "_feeReceiver",
          "type": "address"
        },
        {
          "internalType": "bytes[]",
          "name": "_updateData",
          "type": "bytes[]"
        }
      ],
      "name": "executeIncreaseOrder",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "feeReserves",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gov",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_path",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "_indexToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_sizeDelta",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_isLong",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "_price",
          "type": "uint256"
        },
        {
          "internalType": "bytes[]",
          "name": "_updateData",
          "type": "bytes[]"
        }
      ],
      "name": "increasePosition",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "increasePositionBufferBps",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_path",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "_indexToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_minOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_sizeDelta",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_isLong",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "_price",
          "type": "uint256"
        },
        {
          "internalType": "bytes[]",
          "name": "_updateData",
          "type": "bytes[]"
        }
      ],
      "name": "increasePositionETH",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isLiquidator",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isOrderKeeper",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isPartner",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_collateralToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_indexToken",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_isLong",
          "type": "bool"
        },
        {
          "internalType": "address payable",
          "name": "_feeReceiver",
          "type": "address"
        },
        {
          "internalType": "bytes[]",
          "name": "_updateData",
          "type": "bytes[]"
        }
      ],
      "name": "liquidatePosition",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "liquidationFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "maxGlobalLongSizes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "maxGlobalShortSizes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minLiquidationFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "opened",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "orderBook",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "router",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "_receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "sendValue",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        }
      ],
      "name": "setAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_depositFee",
          "type": "uint256"
        }
      ],
      "name": "setDepositFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_gov",
          "type": "address"
        }
      ],
      "name": "setGov",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_increasePositionBufferBps",
          "type": "uint256"
        }
      ],
      "name": "setIncreasePositionBufferBps",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_isActive",
          "type": "bool"
        }
      ],
      "name": "setLiquidator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_longSizes",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_shortSizes",
          "type": "uint256[]"
        }
      ],
      "name": "setMaxGlobalSizes",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_minLiquidateFee",
          "type": "uint256"
        }
      ],
      "name": "setMinLiquidationFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_opened",
          "type": "bool"
        }
      ],
      "name": "setOpened",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_orderBook",
          "type": "address"
        }
      ],
      "name": "setOrderBook",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_isActive",
          "type": "bool"
        }
      ],
      "name": "setOrderKeeper",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_isActive",
          "type": "bool"
        }
      ],
      "name": "setPartner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_shouldValidateIncreaseOrder",
          "type": "bool"
        }
      ],
      "name": "setShouldValidateIncreaseOrder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "shortsTracker",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "shouldValidateIncreaseOrder",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vault",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "weth",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        }
      ],
      "name": "withdrawFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x52877690d7ca89e3a509590dd5018be4366f5fbfcbba6b9c7ddc33a3ca373fcb",
  "receipt": {
    "to": null,
    "from": "0x4e8730f175811C3079C411309DB823E62a4f9598",
    "contractAddress": "0x866D91fAC7EeA8d762116173eC9Dd536EC3D705E",
    "transactionIndex": 1,
    "gasUsed": "4500548",
    "logsBloom": "0x
    "blockHash": "0x2fa59d422553447e837cfd2c33e6b4a1650713c2b9c70e57bf4005dcad3bdaa7",
    "transactionHash": "0x52877690d7ca89e3a509590dd5018be4366f5fbfcbba6b9c7ddc33a3ca373fcb",
    "logs": [],
    "blockNumber": 32541602,
    "cumulativeGasUsed": "4545919",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x2ef4ad8fd5eC0eDea26bC0f76A65d434713b016a",
    "0xc9470c7aAB7e2FcFD65ff0B2890a0d60856D234b",
    "0xfAcAC6FeB134aCd6960CEf44265e1aCdd8EcE067",
    "0x6ae6634c37D519b4B56c167F44dBfb7c91a71e57",
    50,
    "0x068631b69e0e1B4877a14dCecf7A2f97c2685717"
  ],
  "numDeployments": 1,
  "solcInputHash": "45f986e69ef0b1c3adec9bb2994aea31",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_shortsTracker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_weth\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_depositFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_orderBook\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"BASIS_POINTS_DIVISOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_indexToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_collateralDelta\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sizeDelta\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isLong\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minOut\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_withdrawETH\",\"type\":\"bool\"},{\"internalType\":\"bytes[]\",\"name\":\"_updateData\",\"type\":\"bytes[]\"}],\"name\":\"decreasePosition\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_orderIndex\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"_feeReceiver\",\"type\":\"address\"},{\"internalType\":\"bytes[]\",\"name\":\"_updateData\",\"type\":\"bytes[]\"}],\"name\":\"executeDecreaseOrder\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_orderIndex\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"_feeReceiver\",\"type\":\"address\"},{\"internalType\":\"bytes[]\",\"name\":\"_updateData\",\"type\":\"bytes[]\"}],\"name\":\"executeIncreaseOrder\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"feeReserves\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gov\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_indexToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sizeDelta\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isLong\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"bytes[]\",\"name\":\"_updateData\",\"type\":\"bytes[]\"}],\"name\":\"increasePosition\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"increasePositionBufferBps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_indexToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sizeDelta\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isLong\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"bytes[]\",\"name\":\"_updateData\",\"type\":\"bytes[]\"}],\"name\":\"increasePositionETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isLiquidator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isOrderKeeper\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isPartner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_collateralToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_indexToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isLong\",\"type\":\"bool\"},{\"internalType\":\"address payable\",\"name\":\"_feeReceiver\",\"type\":\"address\"},{\"internalType\":\"bytes[]\",\"name\":\"_updateData\",\"type\":\"bytes[]\"}],\"name\":\"liquidatePosition\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"liquidationFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"maxGlobalLongSizes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"maxGlobalShortSizes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minLiquidationFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"opened\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"orderBook\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"sendValue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_depositFee\",\"type\":\"uint256\"}],\"name\":\"setDepositFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gov\",\"type\":\"address\"}],\"name\":\"setGov\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_increasePositionBufferBps\",\"type\":\"uint256\"}],\"name\":\"setIncreasePositionBufferBps\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isActive\",\"type\":\"bool\"}],\"name\":\"setLiquidator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_longSizes\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_shortSizes\",\"type\":\"uint256[]\"}],\"name\":\"setMaxGlobalSizes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minLiquidateFee\",\"type\":\"uint256\"}],\"name\":\"setMinLiquidationFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_opened\",\"type\":\"bool\"}],\"name\":\"setOpened\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_orderBook\",\"type\":\"address\"}],\"name\":\"setOrderBook\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isActive\",\"type\":\"bool\"}],\"name\":\"setOrderKeeper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isActive\",\"type\":\"bool\"}],\"name\":\"setPartner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_shouldValidateIncreaseOrder\",\"type\":\"bool\"}],\"name\":\"setShouldValidateIncreaseOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shortsTracker\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldValidateIncreaseOrder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"withdrawFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/core/PositionManager.sol\":\"PositionManager\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"contracts/access/Governable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\ncontract Governable {\\n    address public gov;\\n    constructor() public {\\n        gov = msg.sender;\\n    }\\n    modifier onlyGov() {\\n        require(msg.sender == gov, \\\"Governable: forbidden\\\");\\n        _;\\n    }\\n    function setGov(address _gov) external onlyGov {\\n        gov = _gov;\\n    }\\n}\",\"keccak256\":\"0xc16ebf2cd4d28502419d8631a3bf20c21e01e1ed67e4fa7712f58d03b728396f\",\"license\":\"MIT\"},\"contracts/core/BasePositionManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\nimport \\\"./settings/BasePositionManagerSettings.sol\\\";\\n\\ncontract BasePositionManager is BasePositionManagerSettings {\\n\\n    constructor(address _vault, address _router, address _shortsTracker, address _weth, uint256 _depositFee) public {\\n        vault = _vault;\\n        router = _router;\\n        weth = _weth;\\n        depositFee = _depositFee;\\n        shortsTracker = _shortsTracker;\\n        admin = msg.sender;\\n    }\\n\\n    function withdrawFees(address _token, address _receiver) external onlyAdmin {\\n        uint256 amount = feeReserves[_token];\\n        if (amount == 0) {return;}\\n        feeReserves[_token] = 0;\\n        IERC20(_token).safeTransfer(_receiver, amount);\\n        emit Events.WithdrawFees(_token, _receiver, amount);\\n    }\\n\\n    function approve(address _token, address _spender, uint256 _amount) external onlyGov {\\n        IERC20(_token).approve(_spender, _amount);\\n    }\\n\\n    function sendValue(address payable _receiver, uint256 _amount) external onlyGov {\\n        _receiver.sendValue(_amount);\\n    }\\n\\n    function _preChargeFee(address _account, address _collateralToken, address _indexToken, bool _isLong, uint256 _paid) internal {\\n        if (minLiquidationFee == 0)\\n            return;\\n        (bool exist, bytes32 key) = IVault(vault).isPositionExist(_account, _collateralToken, _indexToken, _isLong);\\n        if (!exist) {\\n            uint256 liqFee = msg.value - _paid;\\n            require(liqFee >= minLiquidationFee, Errors.POSITIONMANAGER_INSUFFICIENT_FEE);\\n            liquidationFees[key] = liqFee;\\n            _transferInETH(liqFee);\\n        }\\n    }\\n\\n    function _payLiquidator(address _account, address _collateralToken, address _indexToken, bool _isLong, address payable _feeReceiver) internal {\\n        (bool exist, bytes32 key) = IVault(vault).isPositionExist(_account, _collateralToken, _indexToken, _isLong);\\n        uint256 _payAmount = liquidationFees[key];\\n        if (!exist && _payAmount > 0) {\\n            liquidationFees[key] = 0;\\n            _transferOutETH(_payAmount, _feeReceiver);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xdc55906bc1469a323202f08d8a03aec5f6493dc3d51c0597e5e6135be2ed7bbc\",\"license\":\"MIT\"},\"contracts/core/BasePriceConsumer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\nimport \\\"./interfaces/IVault.sol\\\";\\nimport \\\"./interfaces/IVaultPriceFeed.sol\\\";\\n\\ncontract BasePriceConsumer {\\n\\n    IVault internal _IVault;\\n\\n    constructor(address _vault) public {\\n        _IVault = IVault(_vault);\\n    }\\n\\n    function _update(bytes[] calldata _updateData) internal returns (uint256 _fee) {\\n        if (_updateData.length == 0) return 0;\\n        IVaultPriceFeed priceFeed = IVaultPriceFeed(_IVault.priceFeed());\\n        _fee = priceFeed.getUpdateFee(_updateData);\\n        priceFeed.updatePriceFeeds{value : _fee}(_updateData);\\n    }\\n\\n}\\n\",\"keccak256\":\"0x6f63f4c14899b284c2cf3dbfeb714b2f317ad54965a272c7de9a134473dde878\",\"license\":\"MIT\"},\"contracts/core/PositionManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./BasePositionManager.sol\\\";\\nimport \\\"./BasePriceConsumer.sol\\\";\\nimport \\\"./settings/PositionManagerSettings.sol\\\";\\n\\ncontract PositionManager is BasePositionManager, BasePriceConsumer, PositionManagerSettings {\\n\\n    constructor(\\n        address _vault,\\n        address _router,\\n        address _shortsTracker,\\n        address _weth,\\n        uint256 _depositFee,\\n        address _orderBook\\n    ) public BasePositionManager(_vault, _router, _shortsTracker, _weth, _depositFee) BasePriceConsumer(_vault) {\\n        orderBook = _orderBook;\\n    }\\n\\n    function increasePosition(\\n        address[] memory _path,\\n        address _indexToken,\\n        uint256 _amountIn,\\n        uint256 _minOut,\\n        uint256 _sizeDelta,\\n        bool _isLong,\\n        uint256 _price,\\n        bytes[] calldata _updateData\\n    ) external payable nonReentrant onlyPartnersOrOpened {\\n        uint256 _fee = _update(_updateData);\\n        _preChargeFee(msg.sender, _path[_path.length - 1], _indexToken, _isLong, _fee);\\n\\n        require(_path.length == 1 || _path.length == 2, Errors.POSITIONMANAGER_INVALID_PATH_LENGTH);\\n\\n        if (_amountIn > 0) {\\n            if (_path.length == 1) {\\n                IRouter(router).pluginTransfer(_path[0], msg.sender, address(this), _amountIn);\\n            } else {\\n                IRouter(router).pluginTransfer(_path[0], msg.sender, vault, _amountIn);\\n                _amountIn = _swap(_path, _minOut, address(this));\\n            }\\n            uint256 afterFeeAmount = _collectFees(msg.sender, _path, _amountIn, _indexToken, _isLong, _sizeDelta);\\n            IERC20(_path[_path.length - 1]).safeTransfer(vault, afterFeeAmount);\\n        }\\n        _increasePosition(msg.sender, _path[_path.length - 1], _indexToken, _sizeDelta, _isLong, _price);\\n    }\\n\\n    function increasePositionETH(\\n        address[] memory _path,\\n        address _indexToken,\\n        uint256 _minOut,\\n        uint256 _sizeDelta,\\n        bool _isLong,\\n        uint256 _price,\\n        bytes[] calldata _updateData\\n    ) external payable nonReentrant onlyPartnersOrOpened {\\n        uint256 _fee = _update(_updateData);\\n        require(_path.length == 1 || _path.length == 2, Errors.POSITIONMANAGER_INVALID_PATH_LENGTH);\\n        require(_path[0] == weth, Errors.POSITIONMANAGER_INVALID_PATH);\\n\\n        uint256 _amountIn = msg.value.sub(_fee);\\n        if (_amountIn > 0) {\\n            _transferInETH(_amountIn);\\n            if (_path.length > 1) {\\n                IERC20(weth).safeTransfer(vault, _amountIn);\\n                _amountIn = _swap(_path, _minOut, address(this));\\n            }\\n            uint256 afterFeeAmount = _collectFees(msg.sender, _path, _amountIn, _indexToken, _isLong, _sizeDelta);\\n            IERC20(_path[_path.length - 1]).safeTransfer(vault, afterFeeAmount);\\n        }\\n        _increasePosition(msg.sender, _path[_path.length - 1], _indexToken, _sizeDelta, _isLong, _price);\\n    }\\n\\n    function decreasePosition(\\n        address[] memory _path,\\n        address _indexToken,\\n        uint256 _collateralDelta,\\n        uint256 _sizeDelta,\\n        bool _isLong,\\n        address _receiver,\\n        uint256 _price,\\n        uint256 _minOut,\\n        bool _withdrawETH,\\n        bytes[] calldata _updateData\\n    ) external payable nonReentrant onlyPartnersOrOpened {\\n        _update(_updateData);\\n        require(_path.length == 1 || _path.length == 2, Errors.POSITIONMANAGER_INVALID_PATH_LENGTH);\\n        if (_withdrawETH) require(_path[_path.length - 1] == weth, Errors.POSITIONMANAGER_INVALID_PATH);\\n\\n        uint256 amountOut = _decreasePosition(msg.sender, _path[0], _indexToken, _collateralDelta, _sizeDelta, _isLong, address(this), _price);\\n        _transferOut(amountOut, _path, _receiver, _minOut, _withdrawETH);\\n    }\\n\\n    function _transferOut(\\n        uint256 amountOut,\\n        address[] memory _path,\\n        address _receiver,\\n        uint256 _minOut,\\n        bool _withdrawETH\\n    ) private {\\n        if (amountOut > 0) {\\n            if (_path.length > 1) {\\n                IERC20(_path[0]).safeTransfer(vault, amountOut);\\n                amountOut = _swap(_path, _minOut, address(this));\\n            }\\n            if (_withdrawETH) {\\n                _transferOutETH(amountOut, payable(_receiver));\\n            } else {\\n                IERC20(_path[_path.length - 1]).safeTransfer(_receiver, amountOut);\\n            }\\n        }\\n    }\\n\\n    function liquidatePosition(\\n        address _account,\\n        address _collateralToken,\\n        address _indexToken,\\n        bool _isLong,\\n        address payable _feeReceiver,\\n        bytes[] calldata _updateData\\n    ) external payable nonReentrant {\\n        require(isLiquidator[msg.sender] || msg.sender == _account, Errors.POSITIONMANAGER_FORBIDDEN);\\n        _update(_updateData);\\n        address _vault = vault;\\n        address timelock = IVault(_vault).gov();\\n        (uint256 size, , , , , , ,) = IVault(vault).getPosition(_account, _collateralToken, _indexToken, _isLong);\\n        uint256 markPrice = _isLong ? IVault(_vault).getMinPrice(_indexToken) : IVault(_vault).getMaxPrice(_indexToken);\\n\\n        IShortsTracker(shortsTracker).updateGlobalShortData(_account, _collateralToken, _indexToken, _isLong, size, markPrice, false);\\n        ITimelock(timelock).enableLeverage(_vault);\\n        IVault(_vault).liquidatePosition(_account, _collateralToken, _indexToken, _isLong, _feeReceiver);\\n        ITimelock(timelock).disableLeverage(_vault);\\n        _payLiquidator(_account, _collateralToken, _indexToken, _isLong, _feeReceiver);\\n    }\\n\\n    function executeIncreaseOrder(\\n        address _account,\\n        uint256 _orderIndex,\\n        address payable _feeReceiver,\\n        bytes[] calldata _updateData\\n    ) external payable onlyOrderKeeper {\\n        _update(_updateData);\\n        _validateIncreaseOrder(_account, _orderIndex);\\n\\n        address _vault = vault;\\n        address timelock = IVault(_vault).gov();\\n\\n        (\\n        /*address purchaseToken*/,\\n        /*uint256 purchaseTokenAmount*/,\\n        address collateralToken,\\n        address indexToken,\\n        uint256 sizeDelta,\\n        bool isLong,\\n        /*uint256 triggerPrice*/,\\n        /*bool triggerAboveThreshold*/,\\n        /*uint256 executionFee*/\\n        ) = IOrderBook(orderBook).getIncreaseOrder(_account, _orderIndex);\\n\\n        uint256 markPrice = isLong ? IVault(_vault).getMaxPrice(indexToken) : IVault(_vault).getMinPrice(indexToken);\\n        IShortsTracker(shortsTracker).updateGlobalShortData(_account, collateralToken, indexToken, isLong, sizeDelta, markPrice, true);\\n\\n        ITimelock(timelock).enableLeverage(_vault);\\n        IOrderBook(orderBook).executeIncreaseOrder(_account, _orderIndex, _feeReceiver);\\n        ITimelock(timelock).disableLeverage(_vault);\\n\\n    }\\n\\n    function executeDecreaseOrder(\\n        address _account,\\n        uint256 _orderIndex,\\n        address payable _feeReceiver,\\n        bytes[] calldata _updateData\\n    ) external payable onlyOrderKeeper {\\n        _update(_updateData);\\n        address _vault = vault;\\n        address timelock = IVault(_vault).gov();\\n\\n        (\\n        address collateralToken,\\n        /*uint256 collateralDelta*/,\\n        address indexToken,\\n        uint256 sizeDelta,\\n        bool isLong,\\n        /*uint256 triggerPrice*/,\\n        /*bool triggerAboveThreshold*/,\\n        /*uint256 executionFee*/\\n        ) = IOrderBook(orderBook).getDecreaseOrder(_account, _orderIndex);\\n\\n        uint256 markPrice = isLong ? IVault(_vault).getMinPrice(indexToken) : IVault(_vault).getMaxPrice(indexToken);\\n        IShortsTracker(shortsTracker).updateGlobalShortData(_account, collateralToken, indexToken, isLong, sizeDelta, markPrice, false);\\n\\n        ITimelock(timelock).enableLeverage(_vault);\\n        IOrderBook(orderBook).executeDecreaseOrder(_account, _orderIndex, _feeReceiver);\\n        ITimelock(timelock).disableLeverage(_vault);\\n\\n    }\\n\\n    function _validateIncreaseOrder(address _account, uint256 _orderIndex) internal view {\\n        (\\n        address _purchaseToken,\\n        uint256 _purchaseTokenAmount,\\n        address _collateralToken,\\n        address _indexToken,\\n        uint256 _sizeDelta,\\n        bool _isLong,\\n        , // triggerPrice\\n        , // triggerAboveThreshold\\n        // executionFee\\n        ) = IOrderBook(orderBook).getIncreaseOrder(_account, _orderIndex);\\n\\n        _validateMaxGlobalSize(_indexToken, _isLong, _sizeDelta);\\n\\n        if (!shouldValidateIncreaseOrder) { return; }\\n\\n        // shorts are okay\\n        if (!_isLong) { return; }\\n\\n        // if the position size is not increasing, this is a collateral deposit\\n        require(_sizeDelta > 0, \\\"PositionManager: long deposit\\\");\\n\\n        IVault _vault = IVault(vault);\\n        (uint256 size, uint256 collateral, , , , , , ) = _vault.getPosition(_account, _collateralToken, _indexToken, _isLong);\\n\\n        // if there is no existing position, do not charge a fee\\n        if (size == 0) { return; }\\n\\n        uint256 nextSize = size.add(_sizeDelta);\\n        uint256 collateralDelta = _vault.tokenToUsdMin(_purchaseToken, _purchaseTokenAmount);\\n        uint256 nextCollateral = collateral.add(collateralDelta);\\n\\n        uint256 prevLeverage = size.mul(BASIS_POINTS_DIVISOR).div(collateral);\\n        // allow for a maximum of a increasePositionBufferBps decrease since there might be some swap fees taken from the collateral\\n        uint256 nextLeverageWithBuffer = nextSize.mul(BASIS_POINTS_DIVISOR + increasePositionBufferBps).div(nextCollateral);\\n\\n        require(nextLeverageWithBuffer >= prevLeverage, \\\"PositionManager: long leverage decrease\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xe281d36b2313a10a98fc2db94dfd4ef168997ab8b7970edbaadfced1550b4c8b\",\"license\":\"MIT\"},\"contracts/core/interfaces/IBasePositionManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\ninterface IBasePositionManager {\\n    function maxGlobalLongSizes(address _token) external view returns (uint256);\\n    function maxGlobalShortSizes(address _token) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd76708dc7d8d65da97fdf5c047cbc2be771f8815476e2afd57d36d63d2592609\",\"license\":\"MIT\"},\"contracts/core/interfaces/IOrderBook.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\ninterface IOrderBook {\\n\\n    function getIncreaseOrder(address _account, uint256 _orderIndex) external view returns (\\n        address purchaseToken,\\n        uint256 purchaseTokenAmount,\\n        address collateralToken,\\n        address indexToken,\\n        uint256 sizeDelta,\\n        bool isLong,\\n        uint256 triggerPrice,\\n        bool triggerAboveThreshold,\\n        uint256 executionFee\\n    );\\n\\n    function getDecreaseOrder(address _account, uint256 _orderIndex) external view returns (\\n        address collateralToken,\\n        uint256 collateralDelta,\\n        address indexToken,\\n        uint256 sizeDelta,\\n        bool isLong,\\n        uint256 triggerPrice,\\n        bool triggerAboveThreshold,\\n        uint256 executionFee\\n    );\\n\\n    function executeDecreaseOrder(address, uint256, address payable) external;\\n    function executeIncreaseOrder(address, uint256, address payable) external;\\n}\\n\",\"keccak256\":\"0xea15c5413e388051840d1036373a46beae11ba137f539927ebdd9a2ee961ab32\",\"license\":\"MIT\"},\"contracts/core/interfaces/IRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\ninterface IRouter {\\n    function addPlugin(address _plugin) external;\\n    function pluginTransfer(address _token, address _account, address _receiver, uint256 _amount) external;\\n    function pluginIncreasePosition(\\n        address _account, address _collateralToken,\\n        address _indexToken, uint256 _sizeDelta, bool _isLong) external;\\n    function pluginDecreasePosition(\\n        address _account, address _collateralToken,\\n        address _indexToken, uint256 _collateralDelta,\\n        uint256 _sizeDelta, bool _isLong, address _receiver) external returns (uint256);\\n}\\n\",\"keccak256\":\"0x0e092be50363a8bdfeed38b0652a7a1aec0c57327eec9fafbdfd1ec886075eb4\",\"license\":\"MIT\"},\"contracts/core/interfaces/IShortsTracker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\ninterface IShortsTracker {\\n    function isGlobalShortDataReady() external view returns (bool);\\n    function globalShortAveragePrices(address _token) external view returns (uint256);\\n    function getNextGlobalShortData(\\n        address _account, address _collateralToken,\\n        address _indexToken, uint256 _nextPrice,\\n        uint256 _sizeDelta, bool _isIncrease) external view returns (uint256, uint256);\\n    function updateGlobalShortData(\\n        address _account, address _collateralToken,\\n        address _indexToken, bool _isLong,\\n        uint256 _sizeDelta, uint256 _markPrice, bool _isIncrease) external;\\n}\",\"keccak256\":\"0x56b4525c777ea2ba6f0c381b3d9575c06983e9a9086bfb590934865ba366bb6b\",\"license\":\"MIT\"},\"contracts/core/interfaces/IVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\nimport \\\"./IVaultUtils.sol\\\";\\ninterface IVault {\\n    function withdrawFees(address _token, address _receiver) external returns (uint256);\\n    function directPoolDeposit(address _token) external;\\n    function buyZKUSD(address _token, address _receiver) external returns (uint256);\\n    function sellZKUSD(address _token, address _receiver) external returns (uint256);\\n    function swap(address _tokenIn, address _tokenOut, address _receiver) external returns (uint256);\\n    function increasePosition(\\n        address _account, address _collateralToken,\\n        address _indexToken, uint256 _sizeDelta, bool _isLong) external;\\n    function decreasePosition(\\n        address _account, address _collateralToken,\\n        address _indexToken, uint256 _collateralDelta,\\n        uint256 _sizeDelta, bool _isLong, address _receiver) external returns (uint256);\\n    function validateLiquidation(\\n        address _account, address _collateralToken,\\n        address _indexToken, bool _isLong, bool _raise) external view returns (uint256, uint256);\\n    function liquidatePosition(\\n        address _account, address _collateralToken,\\n        address _indexToken, bool _isLong, address _feeReceiver) external;\\n\\n    function tokenToUsdMin(address _token, uint256 _tokenAmount) external view returns (uint256);\\n    function priceFeed() external view returns (address);\\n    function fundingRateFactor() external view returns (uint256);\\n    function stableFundingRateFactor() external view returns (uint256);\\n    function cumulativeFundingRates(address _token) external view returns (uint256);\\n    function getNextFundingRate(address _token) external view returns (uint256);\\n    function getFeeBasisPoints(\\n        address _token, uint256 _zkusdDelta,\\n        uint256 _feeBasisPoints, uint256 _taxBasisPoints, bool _increment) external view returns (uint256);\\n    function liquidationFeeUsd() external view returns (uint256);\\n    function taxBasisPoints() external view returns (uint256);\\n    function stableTaxBasisPoints() external view returns (uint256);\\n    function mintBurnFeeBasisPoints() external view returns (uint256);\\n    function swapFeeBasisPoints() external view returns (uint256);\\n    function stableSwapFeeBasisPoints() external view returns (uint256);\\n    function marginFeeBasisPoints() external view returns (uint256);\\n    function allWhitelistedTokensLength() external view returns (uint256);\\n    function allWhitelistedTokens(uint256) external view returns (address);\\n    function whitelistedTokens(address _token) external view returns (bool);\\n    function stableTokens(address _token) external view returns (bool);\\n    function shortableTokens(address _token) external view returns (bool);\\n    function equityTokens(address _token) external view returns (bool);\\n    function feeReserves(address _token) external view returns (uint256);\\n    function globalShortSizes(address _token) external view returns (uint256);\\n    function globalShortAveragePrices(address _token) external view returns (uint256);\\n    function maxGlobalShortSizes(address _token) external view returns (uint256);\\n    function tokenDecimals(address _token) external view returns (uint256);\\n    function tokenWeights(address _token) external view returns (uint256);\\n    function guaranteedUsd(address _token) external view returns (uint256);\\n    function poolAmounts(address _token) external view returns (uint256);\\n    function bufferAmounts(address _token) external view returns (uint256);\\n    function reservedAmounts(address _token) external view returns (uint256);\\n    function zkusdAmounts(address _token) external view returns (uint256);\\n    function maxZkusdAmounts(address _token) external view returns (uint256);\\n    function getRedemptionAmount(address _token, uint256 _zkusdAmount) external view returns (uint256);\\n    function getMaxPrice(address _token) external view returns (uint256);\\n    function getMinPrice(address _token) external view returns (uint256);\\n    function getDelta(\\n        address _indexToken, uint256 _size,\\n        uint256 _averagePrice, bool _isLong, uint256 _lastIncreasedTime) external view returns (bool, uint256);\\n    function getPosition(\\n        address _account, address _collateralToken,\\n        address _indexToken, bool _isLong) external view returns (uint256, uint256, uint256, uint256, uint256, uint256, bool, uint256);\\n    function isPositionExist(address _account, address _collateralToken, address _indexToken, bool _isLong) external view returns (bool, bytes32);\\n    function isInitialized() external view returns (bool);\\n    function isSwapEnabled() external view returns (bool);\\n    function isLeverageEnabled() external view returns (bool);\\n    function router() external view returns (address);\\n    function zkusd() external view returns (address);\\n    function gov() external view returns (address);\\n    function whitelistedTokenCount() external view returns (uint256);\\n    function maxLeverage() external view returns (uint256);\\n    function minProfitTime() external view returns (uint256);\\n    function hasDynamicFees() external view returns (bool);\\n    function fundingInterval() external view returns (uint256);\\n    function totalTokenWeights() external view returns (uint256);\\n    function getTargetZkusdAmount(address _token) external view returns (uint256);\\n    function inManagerMode() external view returns (bool);\\n    function inPrivateLiquidationMode() external view returns (bool);\\n    function maxGasPrice() external view returns (uint256);\\n    function approvedRouters(address _account, address _router) external view returns (bool);\\n    function isLiquidator(address _account) external view returns (bool);\\n    function isManager(address _account) external view returns (bool);\\n    function minProfitBasisPoints(address _token) external view returns (uint256);\\n    function tokenBalances(address _token) external view returns (uint256);\\n    function lastFundingTimes(address _token) external view returns (uint256);\\n\\n    function setMaxLeverage(uint256 _maxLeverage) external;\\n    function setInManagerMode(bool _inManagerMode) external;\\n    function setManager(address _manager, bool _isManager) external;\\n    function setIsSwapEnabled(bool _isSwapEnabled) external;\\n    function setIsLeverageEnabled(bool _isLeverageEnabled) external;\\n    function setMaxGasPrice(uint256 _maxGasPrice) external;\\n    function setZkusdAmount(address _token, uint256 _amount) external;\\n    function setBufferAmount(address _token, uint256 _amount) external;\\n    function setMaxGlobalShortSize(address _token, uint256 _amount) external;\\n    function setInPrivateLiquidationMode(bool _inPrivateLiquidationMode) external;\\n    function setLiquidator(address _liquidator, bool _isActive) external;\\n    function setFundingRate(\\n        uint256 _fundingInterval, uint256 _fundingRateFactor,\\n        uint256 _stableFundingRateFactor) external;\\n    function setFees(\\n        uint256 _taxBasisPoints, uint256 _stableTaxBasisPoints,\\n        uint256 _mintBurnFeeBasisPoints, uint256 _swapFeeBasisPoints,\\n        uint256 _stableSwapFeeBasisPoints, uint256 _marginFeeBasisPoints,\\n        uint256 _liquidationFeeUsd, uint256 _minProfitTime, bool _hasDynamicFees) external;\\n\\n    function setTokenConfig(\\n        address _token, uint256 _tokenDecimals,\\n        uint256 _redemptionBps, uint256 _minProfitBps,\\n        uint256 _maxZkusdAmount, bool _isStable,\\n        bool _isShortable, bool _isEquity) external;\\n    function clearTokenConfig(address _token) external;\\n    function setMinProfitTime(uint256 _minProfitTime) external;\\n    function setPriceFeed(address _priceFeed) external;\\n    function setVaultUtils(IVaultUtils _vaultUtils) external;\\n    function setError(uint256 _errorCode, string calldata _error) external;\\n    function setAllowStableEquity(bool _allowStaleEquityPrice) external;\\n}\\n\",\"keccak256\":\"0x28d99ad666ae7f2912fd9b778d94791bfb9061a90261f8579d7a47e1aaad4c5a\",\"license\":\"MIT\"},\"contracts/core/interfaces/IVaultPriceFeed.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\npragma experimental ABIEncoderV2;\\n\\ninterface IVaultPriceFeed {\\n\\n    function getPrice(address _token, bool _maximise, bool _fresh) external view returns (uint256);\\n    function getUpdateFee(bytes[] calldata _updateData) external view returns (uint256);\\n    function updatePriceFeeds(bytes[] calldata _priceData) external payable;\\n}\\n\",\"keccak256\":\"0x5596570dcc8db061a66584fef7574f3e31d40c19b15151aa7fe3f9faf953bf06\",\"license\":\"MIT\"},\"contracts/core/interfaces/IVaultUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\ninterface IVaultUtils {\\n    function updateCumulativeFundingRate(\\n        address _collateralToken, address _indexToken) external returns (bool);\\n    function validateIncreasePosition(\\n        address _account, address _collateralToken,\\n        address _indexToken, uint256 _sizeDelta, bool _isLong) external view;\\n    function validateDecreasePosition(\\n        address _account, address _collateralToken,\\n        address _indexToken, uint256 _collateralDelta,\\n        uint256 _sizeDelta, bool _isLong, address _receiver) external view;\\n    function validateLiquidation(\\n        address _account, address _collateralToken,\\n        address _indexToken, bool _isLong, bool _raise) external view returns (uint256, uint256);\\n    function getEntryFundingRate(\\n        address _collateralToken, address _indexToken, bool _isLong) external view returns (uint256);\\n    function getPositionFee(\\n        address _account, address _collateralToken,\\n        address _indexToken, bool _isLong, uint256 _sizeDelta) external view returns (uint256);\\n    function getFundingFee(\\n        address _account, address _collateralToken,\\n        address _indexToken, bool _isLong,\\n        uint256 _size, uint256 _entryFundingRate) external view returns (uint256);\\n    function getBuyZkusdFeeBasisPoints(\\n        address _token, uint256 _zkusdAmount) external view returns (uint256);\\n    function getSellZkusdFeeBasisPoints(\\n        address _token, uint256 _zkusdAmount) external view returns (uint256);\\n    function getSwapFeeBasisPoints(\\n        address _tokenIn, address _tokenOut, uint256 _zkusdAmount) external view returns (uint256);\\n    function getFeeBasisPoints(\\n        address _token, uint256 _zkusdDelta,\\n        uint256 _feeBasisPoints, uint256 _taxBasisPoints,\\n        bool _increment) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x1efeae040950453176db5cf84c290223d6ebd4542e7457c7fe35c0d023483522\",\"license\":\"MIT\"},\"contracts/core/settings/BasePositionManagerAggregator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\nimport \\\"../../libraries/Events.sol\\\";\\nimport \\\"../../libraries/Errors.sol\\\";\\nimport \\\"../../tokens/interfaces/IWETH.sol\\\";\\nimport \\\"../interfaces/IRouter.sol\\\";\\nimport \\\"../interfaces/IVault.sol\\\";\\nimport \\\"../interfaces/IShortsTracker.sol\\\";\\nimport \\\"../interfaces/IOrderBook.sol\\\";\\nimport \\\"../../peripherals/interfaces/ITimelock.sol\\\";\\nimport \\\"../../libraries/utils/ReentrancyGuard.sol\\\";\\nimport \\\"../../access/Governable.sol\\\";\\nabstract contract BasePositionManagerAggregator is Governable, ReentrancyGuard{\\n}\",\"keccak256\":\"0x0a9d6668a7c864577cd45cceed19b80e908d9d08c4ab506869f3f6cb5c6c2c6f\",\"license\":\"MIT\"},\"contracts/core/settings/BasePositionManagerSettings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\nimport \\\"../storage/BasePositionManagerStorage.sol\\\";\\nimport \\\"./BasePositionManagerAggregator.sol\\\";\\n\\nabstract contract BasePositionManagerSettings is BasePositionManagerAggregator, BasePositionManagerStorage {\\n    function setAdmin(address _admin) external onlyGov {\\n        admin = _admin;\\n        emit Events.SetAdmin(_admin);\\n    }\\n\\n    function setDepositFee(uint256 _depositFee) external onlyAdmin {\\n        depositFee = _depositFee;\\n        emit Events.SetDepositFee(_depositFee);\\n    }\\n\\n    function setIncreasePositionBufferBps(uint256 _increasePositionBufferBps) external onlyAdmin {\\n        increasePositionBufferBps = _increasePositionBufferBps;\\n        emit Events.SetIncreasePositionBufferBps(_increasePositionBufferBps);\\n    }\\n\\n    function setMaxGlobalSizes(address[] memory _tokens, uint256[] memory _longSizes, uint256[] memory _shortSizes) external onlyAdmin {\\n        for (uint256 i = 0; i < _tokens.length; i++) {\\n            address token = _tokens[i];\\n            maxGlobalLongSizes[token] = _longSizes[i];\\n            maxGlobalShortSizes[token] = _shortSizes[i];\\n        }\\n        emit Events.SetMaxGlobalSizes(_tokens, _longSizes, _shortSizes);\\n    }\\n\\n    function setMinLiquidationFee(uint256 _minLiquidateFee) external onlyAdmin {\\n        minLiquidationFee = _minLiquidateFee;\\n    }\\n\\n    function _validateMaxGlobalSize(address _indexToken, bool _isLong, uint256 _sizeDelta) internal view {\\n        if (_sizeDelta == 0) {\\n            return;\\n        }\\n        if (_isLong) {\\n            uint256 maxGlobalLongSize = maxGlobalLongSizes[_indexToken];\\n            if (maxGlobalLongSize > 0 && IVault(vault).guaranteedUsd(_indexToken).add(_sizeDelta) > maxGlobalLongSize) {\\n                revert(Errors.BASEPOSITIONMANAGER_MAX_GLOBAL_LONGS_EXCEEDED);\\n            }\\n        } else {\\n            uint256 maxGlobalShortSize = maxGlobalShortSizes[_indexToken];\\n            if (maxGlobalShortSize > 0 && IVault(vault).globalShortSizes(_indexToken).add(_sizeDelta) > maxGlobalShortSize) {\\n                revert(Errors.BASEPOSITIONMANAGER_MAX_GLOBAL_SHORTS_EXCEEDED);\\n            }\\n        }\\n    }\\n\\n    function _increasePosition(address _account, address _collateralToken, address _indexToken, uint256 _sizeDelta, bool _isLong, uint256 _price) internal {\\n        address _vault = vault;\\n        uint256 markPrice = _isLong ? IVault(_vault).getMaxPrice(_indexToken) : IVault(_vault).getMinPrice(_indexToken);\\n        if (_isLong) {\\n            require(markPrice <= _price, Errors.BASEPOSITIONMANAGER_MARK_PRICE_HIGHER_THAN_LIMIT);\\n        } else {\\n            require(markPrice >= _price, Errors.BASEPOSITIONMANAGER_MARK_PRICE_LOWER_THAN_LIMIT);\\n        }\\n        _validateMaxGlobalSize(_indexToken, _isLong, _sizeDelta);\\n        address timelock = IVault(_vault).gov();\\n        IShortsTracker(shortsTracker).updateGlobalShortData(_account, _collateralToken, _indexToken, _isLong, _sizeDelta, markPrice, true);\\n        ITimelock(timelock).enableLeverage(_vault);\\n        IRouter(router).pluginIncreasePosition(_account, _collateralToken, _indexToken, _sizeDelta, _isLong);\\n        ITimelock(timelock).disableLeverage(_vault);\\n    }\\n\\n    function _decreasePosition(address _account, address _collateralToken, address _indexToken, uint256 _collateralDelta, uint256 _sizeDelta, bool _isLong, address _receiver, uint256 _price) internal returns (uint256) {\\n        address _vault = vault;\\n        uint256 markPrice = _isLong ? IVault(_vault).getMinPrice(_indexToken) : IVault(_vault).getMaxPrice(_indexToken);\\n        if (_isLong) {\\n            require(markPrice >= _price, Errors.BASEPOSITIONMANAGER_MARK_PRICE_LOWER_THAN_LIMIT);\\n        } else {\\n            require(markPrice <= _price, Errors.BASEPOSITIONMANAGER_MARK_PRICE_HIGHER_THAN_LIMIT);\\n        }\\n        address timelock = IVault(_vault).gov();\\n        IShortsTracker(shortsTracker).updateGlobalShortData(_account, _collateralToken, _indexToken, _isLong, _sizeDelta, markPrice, false);\\n        ITimelock(timelock).enableLeverage(_vault);\\n        uint256 amountOut = IRouter(router).pluginDecreasePosition(_account, _collateralToken, _indexToken, _collateralDelta, _sizeDelta, _isLong, _receiver);\\n        ITimelock(timelock).disableLeverage(_vault);\\n        return amountOut;\\n    }\\n\\n    function _swap(address[] memory _path, uint256 _minOut, address _receiver) internal returns (uint256) {\\n        if (_path.length == 2) {\\n            return _vaultSwap(_path[0], _path[1], _minOut, _receiver);\\n        }\\n        revert(Errors.BASEPOSITIONMANAGER_INVALID_PATH_LENGTH);\\n    }\\n\\n    function _vaultSwap(address _tokenIn, address _tokenOut, uint256 _minOut, address _receiver) internal returns (uint256) {\\n        uint256 amountOut = IVault(vault).swap(_tokenIn, _tokenOut, _receiver);\\n        require(amountOut >= _minOut, Errors.BASEPOSITIONMANAGER_INSUFFICIENT_AMOUNTOUT);\\n        return amountOut;\\n    }\\n\\n    function _transferInETH(uint256 _amount) internal {\\n        IWETH(weth).deposit{value : _amount}();\\n    }\\n\\n    function _transferOutETH(uint256 _amountOut, address payable _receiver) internal {\\n        IWETH(weth).withdraw(_amountOut);\\n        (bool sent,) = _receiver.call{value : _amountOut}(\\\"\\\");\\n        require(sent, Errors.BASEPOSITIONMANAGER_TRANSFER_OUT_FAILED);\\n    }\\n\\n    function _collectFees(address _account, address[] memory _path, uint256 _amountIn, address _indexToken, bool _isLong, uint256 _sizeDelta) internal returns (uint256) {\\n        bool shouldDeductFee = _shouldDeductFee(_account, _path, _amountIn, _indexToken, _isLong, _sizeDelta);\\n        if (shouldDeductFee) {\\n            uint256 afterFeeAmount = _amountIn.mul(BASIS_POINTS_DIVISOR.sub(depositFee)).div(BASIS_POINTS_DIVISOR);\\n            uint256 feeAmount = _amountIn.sub(afterFeeAmount);\\n            address feeToken = _path[_path.length - 1];\\n            feeReserves[feeToken] = feeReserves[feeToken].add(feeAmount);\\n            return afterFeeAmount;\\n        }\\n        return _amountIn;\\n    }\\n\\n    function _shouldDeductFee(address _account, address[] memory _path, uint256 _amountIn, address _indexToken, bool _isLong, uint256 _sizeDelta) internal view returns (bool) {\\n        if (!_isLong) {return false;}\\n        if (_sizeDelta == 0) {return true;}\\n        address collateralToken = _path[_path.length - 1];\\n        IVault _vault = IVault(vault);\\n        (uint256 size, uint256 collateral, , , , , ,) = _vault.getPosition(_account, collateralToken, _indexToken, _isLong);\\n        if (size == 0) {return false;}\\n        uint256 nextSize = size.add(_sizeDelta);\\n        uint256 collateralDelta = _vault.tokenToUsdMin(collateralToken, _amountIn);\\n        uint256 nextCollateral = collateral.add(collateralDelta);\\n        uint256 prevLeverage = size.mul(BASIS_POINTS_DIVISOR).div(collateral);\\n        uint256 nextLeverage = nextSize.mul(BASIS_POINTS_DIVISOR + increasePositionBufferBps).div(nextCollateral);\\n        return nextLeverage < prevLeverage;\\n    }\\n}\\n\",\"keccak256\":\"0x40a69fea0123c0596959d115dacc921dac705bdddbc5a7651e69988530df27d7\",\"license\":\"MIT\"},\"contracts/core/settings/PositionManagerAggregator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\nimport \\\"../interfaces/IRouter.sol\\\";\\nimport \\\"../interfaces/IVault.sol\\\";\\nimport \\\"../interfaces/IOrderBook.sol\\\";\\nimport \\\"../../peripherals/interfaces/ITimelock.sol\\\";\\nimport \\\"../../libraries/Events.sol\\\";\\nimport \\\"../../libraries/Errors.sol\\\";\\nabstract contract PositionManagerAggregator{\\n}\",\"keccak256\":\"0x3c21b48e0a65b7a61af548a64947d8310ba13ebb1b31795ea8955a5cfd1993c6\",\"license\":\"MIT\"},\"contracts/core/settings/PositionManagerSettings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\nimport \\\"../storage/PositionManagerStorage.sol\\\";\\nimport \\\"../storage/BasePositionManagerStorage.sol\\\";\\nimport \\\"./PositionManagerAggregator.sol\\\";\\nabstract contract PositionManagerSettings is PositionManagerStorage, BasePositionManagerStorage, PositionManagerAggregator {\\n\\n    function setOrderKeeper(address _account, bool _isActive) external onlyAdmin {\\n        isOrderKeeper[_account] = _isActive;\\n        emit Events.SetOrderKeeper(_account, _isActive);\\n    }\\n    function setLiquidator(address _account, bool _isActive) external onlyAdmin {\\n        isLiquidator[_account] = _isActive;\\n        emit Events.SetLiquidator(_account, _isActive);\\n    }\\n    function setPartner(address _account, bool _isActive) external onlyAdmin {\\n        isPartner[_account] = _isActive;\\n        emit Events.SetPartner(_account, _isActive);\\n    }\\n    function setOpened(bool _opened) external onlyAdmin {\\n        opened = _opened;\\n        emit Events.SetOpened(_opened);\\n    }\\n    function setShouldValidateIncreaseOrder(bool _shouldValidateIncreaseOrder) external onlyAdmin {\\n        shouldValidateIncreaseOrder = _shouldValidateIncreaseOrder;\\n        emit Events.SetShouldValidateIncreaseOrder(_shouldValidateIncreaseOrder);\\n    }\\n    function setOrderBook(address _orderBook) external onlyAdmin {\\n        orderBook = _orderBook;\\n    }\\n}\\n\",\"keccak256\":\"0x8f94e963de65b739aa9e64221a5dea429ff61db3f320ef098d7221809784d693\",\"license\":\"MIT\"},\"contracts/core/storage/BasePositionManagerStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\nimport \\\"../../libraries/math/SafeMath.sol\\\";\\nimport \\\"../../libraries/token/IERC20.sol\\\";\\nimport \\\"../../libraries/token/SafeERC20.sol\\\";\\nimport \\\"../../libraries/utils/Address.sol\\\";\\nimport \\\"../../libraries/Errors.sol\\\";\\nimport \\\"../interfaces/IBasePositionManager.sol\\\";\\nabstract contract BasePositionManagerStorage is IBasePositionManager {\\n\\n    uint256 public constant BASIS_POINTS_DIVISOR = 10000;\\n    uint256 public depositFee;\\n    uint256 public increasePositionBufferBps = 100;\\n    address public admin;\\n    address public vault;\\n    address public shortsTracker;\\n    address public router;\\n    address public weth;\\n    mapping(address => uint256) public override maxGlobalLongSizes;\\n    mapping(address => uint256) public override maxGlobalShortSizes;\\n    mapping(address => uint256) public feeReserves;\\n    uint256 public minLiquidationFee;\\n    mapping(bytes32 => uint256) public liquidationFees;\\n\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n    using Address for address payable;\\n    modifier onlyAdmin() {\\n        require(msg.sender == admin, \\\"BasePositionManager: forbidden\\\");\\n        _;\\n    }\\n    receive() external payable {\\n        require(msg.sender == weth, Errors.BASEPOSITIONMANAGER_INVALID_SENDER);\\n    }\\n}\\n\",\"keccak256\":\"0x3d28d36c7ecec5948996fd767a538afdb4d55dfbe6f56343c1f99456fafcc909\",\"license\":\"MIT\"},\"contracts/core/storage/PositionManagerStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\nimport \\\"../../libraries/Errors.sol\\\";\\nabstract contract PositionManagerStorage {\\n    bool public opened = true;\\n    bool public shouldValidateIncreaseOrder = true;\\n    address public orderBook;\\n    mapping (address => bool) public isOrderKeeper;\\n    mapping (address => bool) public isPartner;\\n    mapping (address => bool) public isLiquidator;\\n    modifier onlyOrderKeeper() {\\n        require(isOrderKeeper[msg.sender], Errors.POSITIONMANAGER_FORBIDDEN);\\n        _;\\n    }\\n    modifier onlyPartnersOrOpened() {\\n        require(isPartner[msg.sender] || opened, Errors.POSITIONMANAGER_FORBIDDEN);\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x4ba0b698c3880e61089b6767db56bc9c97436e40b4712255d653e59c31600963\",\"license\":\"MIT\"},\"contracts/libraries/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\nlibrary Errors {\\n    /* Timelock Error Message*/\\n    string public constant Timelock_Invalid_Target = \\\"Timelock: invalid _target\\\";\\n    string public constant Timelock_Invalid_Buffer = \\\"Timelock: invalid _buffer\\\";\\n    string public constant Timelock_Buffer_Cannot_Be_Decreased = \\\"Timelock: buffer cannot be decreased\\\";\\n    string public constant Timelock_invalid_maxLeverage = \\\"Timelock: invalid _maxLeverage\\\";\\n    string public constant Timelock_invalid_fundingRateFactor = \\\"Timelock: invalid _fundingRateFactor\\\";\\n    string public constant Timelock_invalid_stableFundingRateFactor = \\\"Timelock: invalid _stableFundingRateFactor\\\";\\n    string public constant TIMELOCK_INVALID_MAXGASPRICE = \\\"Invalid _maxGasPrice\\\";\\n    string public constant TIMELOCK_INVALID_LENGTHS = \\\"Timelock: invalid lengths\\\";\\n    string public constant TIMELOCK_MAXTOKENSUPPLY_EXCEEDED = \\\"Timelock: maxTokenSupply exceeded\\\";\\n    string public constant TIMELOCK_ACTION_ALREADY_SIGNALLED = \\\"Timelock: action already signalled\\\";\\n    string public constant TIMELOCK_ACTION_NOT_SIGNALLED = \\\"Timelock: action not signalled\\\";\\n    string public constant TIMELOCK_ACTION_TIME_NOT_YET_PASSED = \\\"Timelock: action time not yet passed\\\";\\n    string public constant TIMELOCK_INVALID_ACTION = \\\"Timelock: invalid _action\\\";\\n    string public constant TIMELOCK_INVALID_BUFFER = \\\"Timelock: invalid _buffer\\\";\\n    /* ZKUSD.sol*/\\n    string public constant ZKUSD_FORBIDDEN = \\\"ZKUSD: forbidden\\\";\\n    /* BasePositionManagers.sol */\\n    string public constant BASEPOSITIONMANAGER_MARK_PRICE_LOWER_THAN_LIMIT      = \\\"BasePositionManager: mark price lower than limit\\\";\\n    string public constant BASEPOSITIONMANAGER_MARK_PRICE_HIGHER_THAN_LIMIT     = \\\"BasePositionManager: mark price higher than limit\\\";\\n    string public constant BASEPOSITIONMANAGER_INVALID_PATH_LENGTH              = \\\"BasePositionManager: invalid _path.length\\\";\\n    string public constant BASEPOSITIONMANAGER_INSUFFICIENT_AMOUNTOUT           = \\\"BasePositionManager: insufficient amountOut\\\";\\n    string public constant BASEPOSITIONMANAGER_MAX_GLOBAL_LONGS_EXCEEDED        = \\\"BasePositionManager: max global longs exceeded\\\";\\n    string public constant BASEPOSITIONMANAGER_MAX_GLOBAL_SHORTS_EXCEEDED       = \\\"BasePositionManager: max global shorts exceeded\\\";\\n    string public constant BASEPOSITIONMANAGER_INVALID_SENDER                   = \\\"BasePositionManager: invalid sender\\\";\\n    string public constant BASEPOSITIONMANAGER_TRANSFER_OUT_FAILED              = \\\"BasePositionManager: failed to transfer out ether\\\";\\n    /* PositionManager.sol */\\n    string public constant POSITIONMANAGER_INVALID_PATH_LENGTH                  = \\\"PositionManager: invalid _path.length\\\";\\n    string public constant POSITIONMANAGER_INVALID_PATH                         = \\\"PositionManager: invalid _path\\\";\\n    string public constant POSITIONMANAGER_LONG_DEPOSIT                         = \\\"PositionManager: long deposit\\\";\\n    string public constant POSITIONMANAGER_LONG_LEVERAGE_DECREASE               = \\\"PositionManager: long leverage decrease\\\";\\n    string public constant POSITIONMANAGER_FORBIDDEN                            = \\\"PositionManager: forbidden\\\";\\n    string public constant POSITIONMANAGER_INSUFFICIENT_FEE                     = \\\"PositionManager: insufficient fee\\\";\\n    /* Router.sol*/\\n    string public constant ROUTER_FORBIDDEN                                     = \\\"Router: forbidden\\\";\\n    /* ZkdlpManager.sol */\\n    string public constant ZKDLPMANAGER_ACTION_NOT_ENABLED                      = \\\"ZkdlpManager: action not enabled\\\";\\n    string public constant ZKDLPMANAGER_INVALID_WEIGHT                          = \\\"ZkdlpManager: invalid weight\\\";\\n    string public constant ZKDLPMANAGER_INVALID_COOLDOWNDURATION                = \\\"ZkdlpManager: invalid _cooldownDuration\\\";\\n    string public constant ZKDLPMANAGER_INVALID_AMOUNT                          = \\\"ZkdlpManager: invalid _amount\\\";\\n    string public constant ZKDLPMANAGER_INSUFFICIENT_ZKUSD_OUTPUT               = \\\"ZkdlpManager: insufficient ZKUSD output\\\";\\n    string public constant ZKDLPMANAGER_INSUFFICIENT_ZKDLP_OUTPUT               = \\\"ZkdlpManager: insufficient ZKDLP output\\\";\\n    string public constant ZKDLPMANAGER_INVALID_ZKDLPAMOUNT                     = \\\"ZkdlpManager: invalid _ZKDLPAmount\\\";\\n    string public constant ZKDLPMANAGER_COOLDOWN_DURATION_NOT_YET_PASSED        = \\\"ZkdlpManager: cooldown duration not yet passed\\\";\\n    string public constant ZKDLPMANAGER_INSUFFICIENT_OUTPUT                     = \\\"ZkdlpManager: insufficient output\\\";\\n    string public constant ZKDLPMANAGER_FORBIDDEN                               = \\\"ZkdlpManager: forbidden\\\";\\n    /* ShortsTrack.sol*/\\n    string public constant SHORTSTRACKER_FORBIDDEN                              = \\\"ShortsTracker: forbidden\\\";\\n    string public constant SHORTSTRACKER_INVALID_HANDLER                        = \\\"ShortsTracker: invalid _handler\\\";\\n    string public constant SHORTSTRACKER_ALREADY_MIGRATED                       = \\\"ShortsTracker: already migrated\\\";\\n    string public constant SHORTSTRACKER_OVERFLOW                               = \\\"ShortsTracker: overflow\\\";\\n    /* VaultUtils.sol*/\\n    string public constant VAULT_LOSSES_EXCEED_COLLATERAL                       = \\\"Vault: losses exceed collateral\\\";\\n    string public constant VAULT_FEES_EXCEED_COLLATERAL                         = \\\"Vault: fees exceed collateral\\\";\\n    string public constant VAULT_LIQUIDATION_FEES_EXCEED_COLLATERAL             = \\\"Vault: liquidation fees exceed collateral\\\";\\n    string public constant VAULT_MAXLEVERAGE_EXCEEDED                           = \\\"Vault: maxLeverage exceeded\\\";\\n    /* VaultInternal.sol*/\\n    string internal constant VAULT_POOLAMOUNT_EXCEEDED                          = \\\"Vault: poolAmount exceeded\\\";\\n    string internal constant VAULT_INSUFFICIENT_RESERVE                         = \\\"Vault: insufficient reserve\\\";\\n    string internal constant VAULT_MAX_SHORTS_EXCEEDED                          = \\\"Vault: max shorts exceeded\\\";\\n    string internal constant VAULT_POOLAMOUNT_BUFFER                            = \\\"Vault: poolAmount < buffer\\\";\\n    string internal constant VAULT_INVALID_ERRORCONTROLLER                      = \\\"Vault: invalid errorController\\\";\\n    /* Router.sol */\\n    string internal constant ROUTER_INVALID_SENDER                              = \\\"Router: invalid sender\\\";\\n    string internal constant ROUTER_INVALID_PATH                                = \\\"Router: invalid _path\\\";\\n    string internal constant ROUTER_MARK_PRICE_HIGHER_THAN_LIMIT                = \\\"Router: mark price higher than limit\\\";\\n    string internal constant ROUTER_MARK_PRICE_LOWER_THAN_LIMIT                 = \\\"Router: mark price lower than limit\\\";\\n    string internal constant ROUTER_INVALID_PATH_LENGTH                         = \\\"Router: invalid _path.length\\\";\\n    string internal constant ROUTER_INSUFFICIENT_AMOUNTOUT                      = \\\"Router: insufficient amountOut\\\";\\n    string internal constant ROUTER_INVALID_PLUGIN                              = \\\"Router: invalid plugin\\\";\\n    /* OrderBook.sol*/\\n    string internal constant ORDERBOOK_FORBIDDEN                                = \\\"OrderBook: forbidden\\\";\\n    string internal constant ORDERBOOK_ALREADY_INITIALIZED                      = \\\"OrderBook: already initialized\\\";\\n    string internal constant ORDERBOOK_INVALID_SENDER                           = \\\"OrderBook: invalid sender\\\";\\n    string internal constant ORDERBOOK_INVALID_PATH_LENGTH                      = \\\"OrderBook: invalid _path.length\\\";\\n    string internal constant ORDERBOOK_INVALID_PATH                             = \\\"OrderBook: invalid _path\\\";\\n    string internal constant ORDERBOOK_INVALID_AMOUNTIN                         = \\\"OrderBook: invalid _amountIn\\\";\\n    string internal constant ORDERBOOK_INSUFFICIENT_EXECUTION_FEE               = \\\"OrderBook: insufficient execution fee\\\";\\n    string internal constant ORDERBOOK_ONLY_WETH_COULD_BE_WRAPPED               = \\\"OrderBook: only weth could be wrapped\\\";\\n    string internal constant ORDERBOOK_INCORRECT_VALUE_TRANSFERRED              = \\\"OrderBook: incorrect value transferred\\\";\\n    string internal constant ORDERBOOK_INCORRECT_EXECUTION_FEE_TRANSFERRED      = \\\"OrderBook: incorrect execution fee transferred\\\";\\n    string internal constant ORDERBOOK_NON_EXISTENT_ORDER                       = \\\"OrderBook: non-existent order\\\";\\n    string internal constant ORDERBOOK_INVALID_PRICE_FOR_EXECUTION              = \\\"OrderBook: invalid price for execution\\\";\\n    string internal constant ORDERBOOK_INSUFFICIENT_COLLATERAL                  = \\\"OrderBook: insufficient collateral\\\";\\n    string internal constant ORDERBOOK_INSUFFICIENT_AMOUNTOUT                   = \\\"OrderBook: insufficient amountOut\\\";\\n    /* RewardRouterV2.sol */\\n    string internal constant REWARDROUTER_INVALID_AMOUNT                        = \\\"RewardRouter: invalid _amount\\\";\\n    string internal constant REWARDROUTER_INVALID_MSG_VALUE                     = \\\"RewardRouter: invalid msg.value\\\";\\n    string internal constant REWARDROUTER_ALREADY_INITIALIZED                   = \\\"RewardRouter: already initialized\\\";\\n    string internal constant REWARDROUTER_INVALID_ZKUSDAMOUNT                   = \\\"RewardRouter: invalid _zkusdAmount\\\";\\n\\n    /* YieldToken.sol */\\n    string public constant YIELDTOKEN_ACCOUNT_ALREADY_MARKED                    = \\\"YieldToken: _account already marked\\\";\\n    string public constant YIELDTOKEN_ACCOUNT_NOT_MARKED                        = \\\"YieldToken: _account not marked\\\";\\n    string public constant YIELDTOKEN_TRANSFER_AMOUNT_EXCEEDS_ALLOWANCE         = \\\"YieldToken: transfer amount exceeds allowance\\\";\\n    string public constant YIELDTOKEN_MINT_TO_THE_ZERO_ADDRESS                  = \\\"YieldToken: mint to the zero address\\\";\\n    string public constant YIELDTOKEN_BURN_FROM_THE_ZERO_ADDRESS                = \\\"YieldToken: burn from the zero address\\\";\\n    string public constant YIELDTOKEN_BURN_AMOUNT_EXCEEDS_BALANCE               = \\\"YieldToken: burn amount exceeds balance\\\";\\n    string public constant YIELDTOKEN_TRANSFER_FROM_THE_ZERO_ADDRESS            = \\\"YieldToken: transfer from the zero address\\\";\\n    string public constant YIELDTOKEN_TRANSFER_TO_THE_ZERO_ADDRESS              = \\\"YieldToken: transfer to the zero address\\\";\\n    string public constant YIELDTOKEN_MSG_SENDER_NOT_WHITELISTED                = \\\"YieldToken: msg.sender not whitelisted\\\";\\n    string public constant YIELDTOKEN_TRANSFER_AMOUNT_EXCEEDS_BALANCE           = \\\"YieldToken: transfer amount exceeds balance\\\";\\n    string public constant YIELDTOKEN_APPROVE_FROM_THE_ZERO_ADDRESS             = \\\"YieldToken: approve from the zero address\\\";\\n    string public constant YIELDTOKEN_APPROVE_TO_THE_ZERO_ADDRESS               = \\\"YieldToken: approve to the zero address\\\";\\n\\n    string public constant MINTABLEBASETOKEN_FORBIDDEN                          = \\\"MintableBaseToken: forbidden\\\";\\n    string public constant BASETOKEN_FORBIDDEN                                  = \\\"BaseToken: forbidden\\\";\\n    string public constant BASETOKEN_ACCOUNT_ALREADY_MARKED                     = \\\"BaseToken: _account already marked\\\";\\n    string public constant BASETOKEN_ACCOUNT_NOT_MARKED                         = \\\"BaseToken: _account not marked\\\";\\n    string public constant BASETOKEN_TRANSFER_AMOUNT_EXCEEDS_ALLOWANCE          = \\\"BaseToken: transfer amount exceeds allowance\\\";\\n    string public constant BASETOKEN_MINT_TO_THE_ZERO_ADDRESS                   = \\\"BaseToken: mint to the zero address\\\";\\n    string public constant BASETOKEN_BURN_FROM_THE_ZERO_ADDRESS                 = \\\"BaseToken: burn from the zero address\\\";\\n    string public constant BASETOKEN_BURN_AMOUNT_EXCEEDS_BALANCE                = \\\"BaseToken: burn amount exceeds balance\\\";\\n    string public constant BASETOKEN_TRANSFER_FROM_THE_ZERO_ADDRESS             = \\\"BaseToken: transfer from the zero address\\\";\\n    string public constant BASETOKEN_TRANSFER_TO_THE_ZERO_ADDRESS               = \\\"BaseToken: transfer to the zero address\\\";\\n    string public constant BASETOKEN_MSG_SENDER_NOT_WHITELISTED                 = \\\"BaseToken: msg.sender not whitelisted\\\";\\n    string public constant BASETOKEN_TRANSFER_AMOUNT_EXCEEDS_BALANCE            = \\\"BaseToken: transfer amount exceeds balance\\\";\\n    string public constant BASETOKEN_APPROVE_FROM_THE_ZERO_ADDRESS              = \\\"BaseToken: approve from the zero address\\\";\\n    string public constant BASETOKEN_APPROVE_TO_THE_ZERO_ADDRESS                = \\\"BaseToken: approve to the zero address\\\";\\n}\\n\",\"keccak256\":\"0x05483ba94e083a7e9f288fa9e1ea4d0961880cf669c779b8ad46747b205615d8\",\"license\":\"MIT\"},\"contracts/libraries/Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\nlibrary Events {\\n    /* BasePositionManager Events */\\n    event SetDepositFee(uint256 depositFee);\\n    event SetIncreasePositionBufferBps(uint256 increasePositionBufferBps);\\n    event SetAdmin(address admin);\\n    event WithdrawFees(address token, address receiver, uint256 amount);\\n    event SetMaxGlobalSizes(address[] tokens, uint256[] longSizes, uint256[] shortSizes);\\n    /*Position Manager Events*/\\n    event SetOrderKeeper(address indexed account, bool isActive);\\n    event SetLiquidator(address indexed account, bool isActive);\\n    event SetPartner(address account, bool isActive);\\n    event SetOpened(bool opened);\\n    event SetShouldValidateIncreaseOrder(bool shouldValidateIncreaseOrder);\\n    /* Orderbook.sol events */\\n    event CreateSwapOrder(\\n        address indexed account, uint256 orderIndex,\\n        address[] path, uint256 amountIn, uint256 minOut,\\n        uint256 triggerRatio, bool triggerAboveThreshold, bool shouldUnwrap, uint256 executionFee);\\n    event CancelSwapOrder(\\n        address indexed account, uint256 orderIndex,\\n        address[] path, uint256 amountIn, uint256 minOut,\\n        uint256 triggerRatio, bool triggerAboveThreshold, bool shouldUnwrap, uint256 executionFee);\\n    event UpdateSwapOrder(\\n        address indexed account, uint256 ordexIndex, address[] path, uint256 amountIn, uint256 minOut, uint256 triggerRatio, bool triggerAboveThreshold, bool shouldUnwrap, uint256 executionFee);\\n    event ExecuteSwapOrder(\\n        address indexed account, uint256 orderIndex,\\n        address[] path, uint256 amountIn, uint256 minOut,\\n        uint256 amountOut, uint256 triggerRatio,\\n        bool triggerAboveThreshold, bool shouldUnwrap, uint256 executionFee);\\n    event Initialize(\\n        address router, address vault, address weth,\\n        address zkusd, uint256 minExecutionFee);\\n    event UpdateMinExecutionFee(uint256 minExecutionFee);\\n    event UpdateGov(address gov);\\n    /* Router.sol events*/\\n    event Swap(address account, address tokenIn, address tokenOut, uint256 amountIn, uint256 amountOut);\\n    /* ShortsTracker.sol events*/\\n    event GlobalShortDataUpdated(address indexed token, uint256 globalShortSize, uint256 globalShortAveragePrice);\\n    /* Vault.sol events */\\n    event BuyZKUSD(\\n        address account, address token,\\n        uint256 tokenAmount, uint256 zkusdAmount, uint256 feeBasisPoints);\\n    event SellZKUSD(\\n        address account, address token,\\n        uint256 zkusdAmount, uint256 tokenAmount, uint256 feeBasisPoints);\\n    event Swap(\\n        address account, address tokenIn,\\n        address tokenOut, uint256 amountIn,\\n        uint256 amountOut, uint256 amountOutAfterFees,\\n        uint256 feeBasisPoints);\\n    event IncreasePosition(\\n        bytes32 key, address account,\\n        address collateralToken, address indexToken,\\n        uint256 collateralDelta, uint256 sizeDelta,\\n        bool isLong, uint256 price, uint256 fee);\\n    event DecreasePosition(\\n        bytes32 key, address account,\\n        address collateralToken, address indexToken,\\n        uint256 collateralDelta, uint256 sizeDelta,\\n        bool isLong, uint256 price, uint256 fee);\\n    event LiquidatePosition(\\n        bytes32 key, address account, address collateralToken,\\n        address indexToken, bool isLong, uint256 size,\\n        uint256 collateral, uint256 reserveAmount, int256 realisedPnl, uint256 markPrice);\\n    event UpdatePosition(\\n        bytes32 key, uint256 size, uint256 collateral,\\n        uint256 averagePrice, uint256 entryFundingRate,\\n        uint256 reserveAmount, int256 realisedPnl, uint256 markPrice);\\n    event ClosePosition(\\n        bytes32 key, uint256 size, uint256 collateral,\\n        uint256 averagePrice, uint256 entryFundingRate, uint256 reserveAmount, int256 realisedPnl);\\n    event UpdateFundingRate(address token, uint256 fundingRate);\\n    event UpdatePnl(bytes32 key, bool hasProfit, uint256 delta);\\n    event CollectSwapFees(address token, uint256 feeUsd, uint256 feeTokens);\\n    event CollectMarginFees(address token, uint256 feeUsd, uint256 feeTokens);\\n    event DirectPoolDeposit(address token, uint256 amount);\\n    event IncreasePoolAmount(address token, uint256 amount);\\n    event DecreasePoolAmount(address token, uint256 amount);\\n    event IncreaseZkusdAmount(address token, uint256 amount);\\n    event DecreaseZkusdAmount(address token, uint256 amount);\\n    event IncreaseReservedAmount(address token, uint256 amount);\\n    event DecreaseReservedAmount(address token, uint256 amount);\\n    event IncreaseGuaranteedUsd(address token, uint256 amount);\\n    event DecreaseGuaranteedUsd(address token, uint256 amount);\\n    /* Timelock.sol events */\\n    event SignalPendingAction(bytes32 action);\\n    event SignalApprove(address token, address spender, uint256 amount, bytes32 action);\\n    event SignalWithdrawToken(address target, address token, address receiver, uint256 amount, bytes32 action);\\n    event SignalMint(address token, address receiver, uint256 amount, bytes32 action);\\n    event SignalSetGov(address target, address gov, bytes32 action);\\n    event SignalSetHandler(address target, address handler, bool isActive, bytes32 action);\\n    event SignalSetPriceFeed(address vault, address priceFeed, bytes32 action);\\n    event SignalRedeemZkusd(address vault, address token, uint256 amount);\\n    event SignalVaultSetTokenConfig(\\n        address vault, address token, uint256 tokenDecimals,\\n        uint256 tokenWeight, uint256 minProfitBps, uint256 maxZkusdAmount,\\n        bool isStable, bool isShortable);\\n    event ClearAction(bytes32 action);\\n    /* ZkdlpManager.sol */\\n    event AddLiquidity(address account, address token, uint256 amount, uint256 aumInUsd, uint256 zkdlpSupply, uint256 zkusdAmount, uint256 mintAmount);\\n    event RemoveLiquidity(address account, address token, uint256 zkdlpAmount, uint256 aumInUsd, uint256 zkdlpSupply, uint256 zkusdAmount, uint256 amountOut);\\n    /* RewardRouterV2 */\\n    event StakeZkdx(address account, address token, uint256 amount);\\n    event UnstakeZkdx(address account, address token, uint256 amount);\\n    event StakeZkdlp(address account, uint256 amount);\\n    event UnstakeZkdlp(address account, uint256 amount);\\n\\n    /* OrderBook.sol */\\n    event CreateIncreaseOrder(\\n        address indexed account,\\n        uint256 orderIndex,\\n        address purchaseToken,\\n        uint256 purchaseTokenAmount,\\n        address collateralToken,\\n        address indexToken,\\n        uint256 sizeDelta,\\n        bool isLong,\\n        uint256 triggerPrice,\\n        bool triggerAboveThreshold,\\n        uint256 executionFee\\n    );\\n\\n    event CancelIncreaseOrder(\\n        address indexed account,\\n        uint256 orderIndex,\\n        address purchaseToken,\\n        uint256 purchaseTokenAmount,\\n        address collateralToken,\\n        address indexToken,\\n        uint256 sizeDelta,\\n        bool isLong,\\n        uint256 triggerPrice,\\n        bool triggerAboveThreshold,\\n        uint256 executionFee\\n    );\\n\\n    event ExecuteIncreaseOrder(\\n        address indexed account,\\n        uint256 orderIndex,\\n        address purchaseToken,\\n        uint256 purchaseTokenAmount,\\n        address collateralToken,\\n        address indexToken,\\n        uint256 sizeDelta,\\n        bool isLong,\\n        uint256 triggerPrice,\\n        bool triggerAboveThreshold,\\n        uint256 executionFee,\\n        uint256 executionPrice\\n    );\\n\\n    event UpdateIncreaseOrder(\\n        address indexed account,\\n        uint256 orderIndex,\\n        address collateralToken,\\n        address indexToken,\\n        bool isLong,\\n        uint256 sizeDelta,\\n        uint256 triggerPrice,\\n        bool triggerAboveThreshold\\n    );\\n\\n    event CreateDecreaseOrder(\\n        address indexed account,\\n        uint256 orderIndex,\\n        address collateralToken,\\n        uint256 collateralDelta,\\n        address indexToken,\\n        uint256 sizeDelta,\\n        bool isLong,\\n        uint256 triggerPrice,\\n        bool triggerAboveThreshold,\\n        uint256 executionFee\\n    );\\n\\n    event CancelDecreaseOrder(\\n        address indexed account,\\n        uint256 orderIndex,\\n        address collateralToken,\\n        uint256 collateralDelta,\\n        address indexToken,\\n        uint256 sizeDelta,\\n        bool isLong,\\n        uint256 triggerPrice,\\n        bool triggerAboveThreshold,\\n        uint256 executionFee\\n    );\\n\\n    event ExecuteDecreaseOrder(\\n        address indexed account,\\n        uint256 orderIndex,\\n        address collateralToken,\\n        uint256 collateralDelta,\\n        address indexToken,\\n        uint256 sizeDelta,\\n        bool isLong,\\n        uint256 triggerPrice,\\n        bool triggerAboveThreshold,\\n        uint256 executionFee,\\n        uint256 executionPrice\\n    );\\n\\n    event UpdateDecreaseOrder(\\n        address indexed account,\\n        uint256 orderIndex,\\n        address collateralToken,\\n        uint256 collateralDelta,\\n        address indexToken,\\n        uint256 sizeDelta,\\n        bool isLong,\\n        uint256 triggerPrice,\\n        bool triggerAboveThreshold\\n    );\\n}\\n\",\"keccak256\":\"0x3656730f42a4614b3704801573c526b2a0da4f7d170071c50767a688bcd753f8\",\"license\":\"MIT\"},\"contracts/libraries/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x41b0da7db3e1f79b338824fed2bc4732430b78002a9d51c2cfa86ad5a12c2763\",\"license\":\"MIT\"},\"contracts/libraries/token/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xa3ce253082421a9e79d2b884ae6f60507b0cc73ea356674072091454c44cc556\",\"license\":\"MIT\"},\"contracts/libraries/token/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../math/SafeMath.sol\\\";\\nimport \\\"../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf80766b21ea67a73c81e0dea4543375243938c8b223e29c5d783be61ab3f424c\",\"license\":\"MIT\"},\"contracts/libraries/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.2;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x62dd54ef394959ddda751b6b9053803a746fa32c6b26cb8f871307687bb64e5f\",\"license\":\"MIT\"},\"contracts/libraries/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\ncontract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xae7a1e407ed171ecd3a0d3976875d6c58eefdccf831ebce6314ec94892dffc03\",\"license\":\"MIT\"},\"contracts/peripherals/interfaces/ITimelock.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\ninterface ITimelock {\\n    function setAdmin(address _admin) external;\\n    function enableLeverage(address _vault) external;\\n    function disableLeverage(address _vault) external;\\n    function setIsLeverageEnabled(address _vault, bool _isLeverageEnabled) external;\\n    function signalSetGov(address _target, address _gov) external;\\n}\",\"keccak256\":\"0x2c58d4a0ad015c86ff4462573881844be781f7c64fb9323c5eefac550e2f33ad\",\"license\":\"MIT\"},\"contracts/tokens/interfaces/IWETH.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\ninterface IWETH {\\n    function deposit() external payable;\\n    function transfer(address to, uint value) external returns (bool);\\n    function withdraw(uint) external;\\n}\",\"keccak256\":\"0x9322725581103de3f494f25318f2ebaf50100d57c2631a26d4c253833bc6bc23\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040526002805461ff001960ff199091166001171661010017905560646007553480156200002e57600080fd5b5060405162004d8838038062004d88833981016040819052620000519162000116565b600080546001600160a01b03199081163390811790925560018055600980546001600160a01b03998a169083168117909155600b8054988a1698831698909817909755600c805495891695821695909517909455600692909255600a8054948716948416949094179093556008805483169091179055601280549091169092179091556002805491909216620100000262010000600160b01b031990911617905562000192565b80516001600160a01b03811681146200011057600080fd5b92915050565b60008060008060008060c087890312156200012f578182fd5b6200013b8888620000f8565b95506200014c8860208901620000f8565b94506200015d8860408901620000f8565b93506200016e8860608901620000f8565b925060808701519150620001868860a08901620000f8565b90509295509295509295565b614be680620001a26000396000f3fe60806040526004361061024a5760003560e01c8063657bc5d011610139578063b0007cf0116100b6578063e85581731161007a578063e85581731461067d578063ef12c67e1461069d578063f2555278146106bd578063f851a440146106dd578063f887ea40146106f2578063fbfa77cf14610707576102a2565b8063b0007cf014610604578063c0eefef414610617578063cfad57a21461062a578063e1f21c671461064a578063e3b462681461066a576102a2565b80639698d25a116100fd5780639698d25a1461057c57806398d1e03a1461059c5780639a0a18bf146105b15780639a1598c8146105d1578063acb092d2146105f1576102a2565b8063657bc5d0146104fd57806367a5279314610512578063704b6c0214610527578063776af5ba146105475780638c0f9aac1461055c576102a2565b80632e931cea116101c7578063490ae2101161018b578063490ae21014610473578063529a356f1461049357806358e707f8146104b35780635f88eade146104d357806360a6d82a146104e8576102a2565b80632e931cea146103e95780633833f5f5146103fc5780633fc8cef3146104295780634453a3741461043e5780634584bd4b1461045e576102a2565b80631ce9cb8f1161020e5780631ce9cb8f146103495780631e2615381461036957806321acf65914610389578063233bfe3b146103a957806324a084df146103c9576102a2565b806305737a24146102a75780631045c74e146102bc578063126082cf146102f257806312d43a51146103075780631b90435914610329576102a2565b366102a257600c54604080516060810190915260238082526001600160a01b03909216331491614b6960208301399061029f5760405162461bcd60e51b8152600401610296919061465a565b60405180910390fd5b50005b600080fd5b6102ba6102b5366004613da7565b61071c565b005b3480156102c857600080fd5b506102dc6102d7366004613c01565b610b53565b6040516102e99190614944565b60405180910390f35b3480156102fe57600080fd5b506102dc610b65565b34801561031357600080fd5b5061031c610b6b565b6040516102e99190614363565b34801561033557600080fd5b506102ba6103443660046141fa565b610b7a565b34801561035557600080fd5b506102dc610364366004613c01565b610bf2565b34801561037557600080fd5b506102ba610384366004613d7a565b610c04565b34801561039557600080fd5b506102ba6103a4366004613d7a565b610c8e565b3480156103b557600080fd5b506102ba6103c436600461425f565b610d1a565b3480156103d557600080fd5b506102ba6103e4366004613c39565b610d79565b6102ba6103f7366004613f39565b610dba565b34801561040857600080fd5b5061041c610417366004613c01565b610f6f565b6040516102e9919061464f565b34801561043557600080fd5b5061031c610f84565b34801561044a57600080fd5b506102ba610459366004613d7a565b610f93565b34801561046a57600080fd5b5061041c611011565b34801561047f57600080fd5b506102ba61048e36600461425f565b61101f565b34801561049f57600080fd5b5061041c6104ae366004613c01565b61107e565b3480156104bf57600080fd5b506102ba6104ce36600461425f565b611093565b3480156104df57600080fd5b5061041c6110c2565b3480156104f457600080fd5b506102dc6110cb565b34801561050957600080fd5b5061031c6110d1565b34801561051e57600080fd5b506102dc6110e0565b34801561053357600080fd5b506102ba610542366004613c01565b6110e6565b34801561055357600080fd5b5061031c61115b565b34801561056857600080fd5b5061041c610577366004613c01565b611170565b34801561058857600080fd5b506102dc610597366004613c01565b611185565b3480156105a857600080fd5b506102dc611197565b3480156105bd57600080fd5b506102ba6105cc3660046141fa565b61119d565b3480156105dd57600080fd5b506102ba6105ec366004613c01565b611205565b6102ba6105ff366004614012565b611259565b6102ba610612366004613da7565b6114a3565b6102ba610625366004613c9c565b611831565b34801561063657600080fd5b506102ba610645366004613c01565b611c99565b34801561065657600080fd5b506102ba610665366004613d3a565b611ce5565b6102ba6106783660046140be565b611d95565b34801561068957600080fd5b506102dc61069836600461425f565b612032565b3480156106a957600080fd5b506102ba6106b8366004614177565b612044565b3480156106c957600080fd5b506102ba6106d8366004613c64565b61214a565b3480156106e957600080fd5b5061031c6121ef565b3480156106fe57600080fd5b5061031c6121fe565b34801561071357600080fd5b5061031c61220d565b33600090815260036020908152604091829020548251808401909352601a8352600080516020614b208339815191529183019190915260ff166107725760405162461bcd60e51b8152600401610296919061465a565b5061077d828261221c565b506107888585612394565b600954604080516312d43a5160e01b815290516001600160a01b039092169160009183916312d43a5191600480820192602092909190829003018186803b1580156107d257600080fd5b505afa1580156107e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061080a9190613c1d565b60025460405163d3bab1d160e01b81529192506000918291829182916201000090046001600160a01b03169063d3bab1d19061084c908e908e90600401614513565b6101206040518083038186803b15801561086557600080fd5b505afa158015610879573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061089d9190613e17565b50505095509550955095505050600081610932576040516340d3096b60e11b81526001600160a01b038816906381a612d6906108dd908790600401614363565b60206040518083038186803b1580156108f557600080fd5b505afa158015610909573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061092d9190614277565b6109ae565b604051637092736960e11b81526001600160a01b0388169063e124e6d29061095e908790600401614363565b60206040518083038186803b15801561097657600080fd5b505afa15801561098a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109ae9190614277565b600a54604051633cc8e33b60e21b81529192506001600160a01b03169063f3238cec906109ec908f908990899088908a908990600190600401614420565b600060405180830381600087803b158015610a0657600080fd5b505af1158015610a1a573d6000803e3d6000fd5b50506040516306d63c1d60e41b81526001600160a01b0389169250636d63c1d09150610a4a908a90600401614363565b600060405180830381600087803b158015610a6457600080fd5b505af1158015610a78573d6000803e3d6000fd5b505060025460405163d38ab51960e01b8152620100009091046001600160a01b0316925063d38ab5199150610ab5908f908f908f9060040161452c565b600060405180830381600087803b158015610acf57600080fd5b505af1158015610ae3573d6000803e3d6000fd5b505060405163d3c87bbb60e01b81526001600160a01b038916925063d3c87bbb9150610b13908a90600401614363565b600060405180830381600087803b158015610b2d57600080fd5b505af1158015610b41573d6000803e3d6000fd5b50505050505050505050505050505050565b600d6020526000908152604090205481565b61271081565b6000546001600160a01b031681565b6008546001600160a01b03163314610ba45760405162461bcd60e51b81526004016102969061488c565b6002805461ff001916610100831515021790556040517fa956222e37fe025ff51e5440ac729a9bd417ff91e485e14dcffa2c0ba8894f4090610be790839061464f565b60405180910390a150565b600f6020526000908152604090205481565b6008546001600160a01b03163314610c2e5760405162461bcd60e51b81526004016102969061488c565b6001600160a01b03821660008181526003602052604090819020805460ff1916841515179055517f1d5bc0255b943d6a5b5279e8a55d74d620baccbceecb25e87a3558f14c4c118e90610c8290849061464f565b60405180910390a25050565b6008546001600160a01b03163314610cb85760405162461bcd60e51b81526004016102969061488c565b6001600160a01b03821660009081526004602052604090819020805460ff1916831515179055517fa4e46c70ff429a91de7d1716d736e877c7cca1c22ac850b23d242530dd95e47490610d0e90849084906144f8565b60405180910390a15050565b6008546001600160a01b03163314610d445760405162461bcd60e51b81526004016102969061488c565b60078190556040517f21167d0d4661af93817ebce920f18986eed3d75d5e1c03f2aed05efcbafbc45290610be7908390614944565b6000546001600160a01b03163314610da35760405162461bcd60e51b8152600401610296906147d5565b610db66001600160a01b0383168261263b565b5050565b60026001541415610ddd5760405162461bcd60e51b81526004016102969061490d565b60026001553360009081526004602052604090205460ff1680610e02575060025460ff165b6040518060400160405280601a8152602001600080516020614b2083398151915281525090610e445760405162461bcd60e51b8152600401610296919061465a565b50610e4f828261221c565b508a5160011480610e6157508a516002145b604051806060016040528060258152602001614b8c6025913990610e985760405162461bcd60e51b8152600401610296919061465a565b508215610f2857600c548b516001600160a01b03909116908c906000198101908110610ec057fe5b60200260200101516001600160a01b0316146040518060400160405280601e81526020017f506f736974696f6e4d616e616765723a20696e76616c6964205f70617468000081525090610f265760405162461bcd60e51b8152600401610296919061465a565b505b6000610f4e338d600081518110610f3b57fe5b60200260200101518d8d8d8d308d6126dc565b9050610f5d818d898888612ac8565b50506001805550505050505050505050565b60036020526000908152604090205460ff1681565b600c546001600160a01b031681565b6008546001600160a01b03163314610fbd5760405162461bcd60e51b81526004016102969061488c565b6001600160a01b03821660008181526005602052604090819020805460ff1916841515179055517f8c0d56805c3b43d441481229dc64bee168253ffe4305f37ab7cfe63b1c4268c690610c8290849061464f565b600254610100900460ff1681565b6008546001600160a01b031633146110495760405162461bcd60e51b81526004016102969061488c565b60068190556040517f974fd3c1fcb4653dfc4fb740c4c692cd212d55c28f163f310128cb64d830067590610be7908390614944565b60056020526000908152604090205460ff1681565b6008546001600160a01b031633146110bd5760405162461bcd60e51b81526004016102969061488c565b601055565b60025460ff1681565b60105481565b600a546001600160a01b031681565b60065481565b6000546001600160a01b031633146111105760405162461bcd60e51b8152600401610296906147d5565b600880546001600160a01b0319166001600160a01b0383161790556040517f5a272403b402d892977df56625f4164ccaf70ca3863991c43ecfe76a6905b0a190610be7908390614363565b6002546201000090046001600160a01b031681565b60046020526000908152604090205460ff1681565b600e6020526000908152604090205481565b60075481565b6008546001600160a01b031633146111c75760405162461bcd60e51b81526004016102969061488c565b6002805460ff19168215151790556040517fb396a770d36909ca07c2b7d7d408f43c9bb74425c5d17caf44336c4f09c4209490610be790839061464f565b6008546001600160a01b0316331461122f5760405162461bcd60e51b81526004016102969061488c565b600280546001600160a01b03909216620100000262010000600160b01b0319909216919091179055565b6002600154141561127c5760405162461bcd60e51b81526004016102969061490d565b60026001553360009081526004602052604090205460ff16806112a1575060025460ff165b6040518060400160405280601a8152602001600080516020614b20833981519152815250906112e35760405162461bcd60e51b8152600401610296919061465a565b5060006112f0838361221c565b9050885160011480611303575088516002145b604051806060016040528060258152602001614b8c602591399061133a5760405162461bcd60e51b8152600401610296919061465a565b50600c5489516001600160a01b03909116908a9060009061135757fe5b60200260200101516001600160a01b0316146040518060400160405280601e81526020017f506f736974696f6e4d616e616765723a20696e76616c6964205f706174680000815250906113bd5760405162461bcd60e51b8152600401610296919061465a565b5060006113ca3483612b37565b9050801561146e576113db81612b80565b60018a51111561141057600954600c54611402916001600160a01b03918216911683612bec565b61140d8a8930612c42565b90505b6000611420338c848d8b8d612cbb565b905061146c600960009054906101000a90046001600160a01b0316828d60018f51038151811061144c57fe5b60200260200101516001600160a01b0316612bec9092919063ffffffff16565b505b611493338b60018d51038151811061148257fe5b60200260200101518b8a8a8a612d94565b5050600180555050505050505050565b33600090815260036020908152604091829020548251808401909352601a8352600080516020614b208339815191529183019190915260ff166114f95760405162461bcd60e51b8152600401610296919061465a565b50611504828261221c565b50600954604080516312d43a5160e01b815290516001600160a01b039092169160009183916312d43a5191600480820192602092909190829003018186803b15801561154f57600080fd5b505afa158015611563573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115879190613c1d565b600254604051630130197760e11b81529192506000918291829182916201000090046001600160a01b03169063026032ee906115c9908e908e90600401614513565b6101006040518083038186803b1580156115e257600080fd5b505afa1580156115f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061161a9190613eb2565b5050509450945094505093506000816116ae57604051637092736960e11b81526001600160a01b0388169063e124e6d290611659908790600401614363565b60206040518083038186803b15801561167157600080fd5b505afa158015611685573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116a99190614277565b61172a565b6040516340d3096b60e11b81526001600160a01b038816906381a612d6906116da908790600401614363565b60206040518083038186803b1580156116f257600080fd5b505afa158015611706573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061172a9190614277565b600a54604051633cc8e33b60e21b81529192506001600160a01b03169063f3238cec90611768908f908990899088908a908990600090600401614420565b600060405180830381600087803b15801561178257600080fd5b505af1158015611796573d6000803e3d6000fd5b50506040516306d63c1d60e41b81526001600160a01b0389169250636d63c1d091506117c6908a90600401614363565b600060405180830381600087803b1580156117e057600080fd5b505af11580156117f4573d6000803e3d6000fd5b50506002546040516308eca22560e11b8152620100009091046001600160a01b031692506311d9444a9150610ab5908f908f908f9060040161452c565b600260015414156118545760405162461bcd60e51b81526004016102969061490d565b60026001553360009081526005602052604090205460ff168061187f5750336001600160a01b038816145b6040518060400160405280601a8152602001600080516020614b20833981519152815250906118c15760405162461bcd60e51b8152600401610296919061465a565b506118cc828261221c565b50600954604080516312d43a5160e01b815290516001600160a01b039092169160009183916312d43a5191600480820192602092909190829003018186803b15801561191757600080fd5b505afa15801561192b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061194f9190613c1d565b600954604051634a3f088d60e01b81529192506000916001600160a01b0390911690634a3f088d9061198b908d908d908d908d906004016143c4565b6101006040518083038186803b1580156119a457600080fd5b505afa1580156119b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119dc919061428f565b505050505050509050600087611a6d57604051637092736960e11b81526001600160a01b0385169063e124e6d290611a18908c90600401614363565b60206040518083038186803b158015611a3057600080fd5b505afa158015611a44573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a689190614277565b611ae9565b6040516340d3096b60e11b81526001600160a01b038516906381a612d690611a99908c90600401614363565b60206040518083038186803b158015611ab157600080fd5b505afa158015611ac5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ae99190614277565b600a54604051633cc8e33b60e21b81529192506001600160a01b03169063f3238cec90611b27908e908e908e908e9089908990600090600401614420565b600060405180830381600087803b158015611b4157600080fd5b505af1158015611b55573d6000803e3d6000fd5b50506040516306d63c1d60e41b81526001600160a01b0386169250636d63c1d09150611b85908790600401614363565b600060405180830381600087803b158015611b9f57600080fd5b505af1158015611bb3573d6000803e3d6000fd5b5050604051631bc5d52960e31b81526001600160a01b038716925063de2ea9489150611beb908e908e908e908e908e906004016143ee565b600060405180830381600087803b158015611c0557600080fd5b505af1158015611c19573d6000803e3d6000fd5b505060405163d3c87bbb60e01b81526001600160a01b038616925063d3c87bbb9150611c49908790600401614363565b600060405180830381600087803b158015611c6357600080fd5b505af1158015611c77573d6000803e3d6000fd5b50505050611c888b8b8b8b8b613149565b505060018055505050505050505050565b6000546001600160a01b03163314611cc35760405162461bcd60e51b8152600401610296906147d5565b600080546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b03163314611d0f5760405162461bcd60e51b8152600401610296906147d5565b60405163095ea7b360e01b81526001600160a01b0384169063095ea7b390611d3d9085908590600401614513565b602060405180830381600087803b158015611d5757600080fd5b505af1158015611d6b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d8f9190614216565b50505050565b60026001541415611db85760405162461bcd60e51b81526004016102969061490d565b60026001553360009081526004602052604090205460ff1680611ddd575060025460ff165b6040518060400160405280601a8152602001600080516020614b2083398151915281525090611e1f5760405162461bcd60e51b8152600401610296919061465a565b506000611e2c838361221c565b9050611e52338b60018d510381518110611e4257fe5b60200260200101518b888561321d565b895160011480611e63575089516002145b604051806060016040528060258152602001614b8c6025913990611e9a5760405162461bcd60e51b8152600401610296919061465a565b50871561200d57895160011415611f2e57600b548a516001600160a01b0390911690631b827878908c90600090611ecd57fe5b602002602001015133308c6040518563ffffffff1660e01b8152600401611ef79493929190614377565b600060405180830381600087803b158015611f1157600080fd5b505af1158015611f25573d6000803e3d6000fd5b50505050611fcf565b600b548a516001600160a01b0390911690631b827878908c90600090611f5057fe5b602002602001015133600960009054906101000a90046001600160a01b03168c6040518563ffffffff1660e01b8152600401611f8f9493929190614377565b600060405180830381600087803b158015611fa957600080fd5b505af1158015611fbd573d6000803e3d6000fd5b50505050611fcc8a8830612c42565b97505b6000611fdf338c8b8d8a8c612cbb565b905061200b600960009054906101000a90046001600160a01b0316828d60018f51038151811061144c57fe5b505b611493338b60018d51038151811061202157fe5b60200260200101518b898989612d94565b60116020526000908152604090205481565b6008546001600160a01b0316331461206e5760405162461bcd60e51b81526004016102969061488c565b60005b835181101561210957600084828151811061208857fe5b6020026020010151905083828151811061209e57fe5b6020026020010151600d6000836001600160a01b03166001600160a01b03168152602001908152602001600020819055508282815181106120db57fe5b6020908102919091018101516001600160a01b039092166000908152600e9091526040902055600101612071565b507fae32d569b058895b9620d6552b09aaffedc9a6f396be4d595a224ad09f8b213983838360405161213d9392919061454f565b60405180910390a1505050565b6008546001600160a01b031633146121745760405162461bcd60e51b81526004016102969061488c565b6001600160a01b0382166000908152600f6020526040902054806121985750610db6565b6001600160a01b0383166000818152600f60205260408120556121bc908383612bec565b7f4f1b51dd7a2fcb861aa2670f668be66835c4ee12b4bbbf037e4d0018f39819e483838360405161213d939291906144d4565b6008546001600160a01b031681565b600b546001600160a01b031681565b6009546001600160a01b031681565b60008161222b5750600061238e565b60125460408051633a0df78d60e11b815290516000926001600160a01b03169163741bef1a916004808301926020929190829003018186803b15801561227057600080fd5b505afa158015612284573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122a89190613c1d565b60405163d47eed4560e01b81529091506001600160a01b0382169063d47eed45906122d990879087906004016145ba565b60206040518083038186803b1580156122f157600080fd5b505afa158015612305573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123299190614277565b9150806001600160a01b031663ef9e5e288386866040518463ffffffff1660e01b815260040161235a9291906145ba565b6000604051808303818588803b15801561237357600080fd5b505af1158015612387573d6000803e3d6000fd5b5050505050505b92915050565b60008060008060008060028054906101000a90046001600160a01b03166001600160a01b031663d3bab1d189896040518363ffffffff1660e01b81526004016123de929190614513565b6101206040518083038186803b1580156123f757600080fd5b505afa15801561240b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061242f9190613e17565b505050955095509550955095509550612449838284613324565b600254610100900460ff1661246357505050505050610db6565b8061247357505050505050610db6565b600082116124935760405162461bcd60e51b81526004016102969061468d565b600954604051634a3f088d60e01b81526001600160a01b039091169060009081908390634a3f088d906124d0908e908b908b908a906004016143c4565b6101006040518083038186803b1580156124e957600080fd5b505afa1580156124fd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612521919061428f565b50505050505091509150816000141561254257505050505050505050610db6565b600061254e83876134b4565b90506000846001600160a01b0316630a48d5a98c8c6040518363ffffffff1660e01b8152600401612580929190614513565b60206040518083038186803b15801561259857600080fd5b505afa1580156125ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125d09190614277565b905060006125de84836134b4565b905060006125f8856125f2886127106134d9565b90613513565b90506000612619836125f260075461271001886134d990919063ffffffff16565b905081811015610b415760405162461bcd60e51b815260040161029690614845565b8047101561265b5760405162461bcd60e51b815260040161029690614758565b6000826001600160a01b03168260405161267490614360565b60006040518083038185875af1925050503d80600081146126b1576040519150601f19603f3d011682016040523d82523d6000602084013e6126b6565b606091505b50509050806126d75760405162461bcd60e51b8152600401610296906146fb565b505050565b6009546000906001600160a01b0316818561277257604051637092736960e11b81526001600160a01b0383169063e124e6d29061271d908c90600401614363565b60206040518083038186803b15801561273557600080fd5b505afa158015612749573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061276d9190614277565b6127ee565b6040516340d3096b60e11b81526001600160a01b038316906381a612d69061279e908c90600401614363565b60206040518083038186803b1580156127b657600080fd5b505afa1580156127ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127ee9190614277565b905085156128375783811015604051806060016040528060308152602001614a5f60309139906128315760405162461bcd60e51b8152600401610296919061465a565b50612874565b83811115604051806060016040528060318152602001614aef60319139906128725760405162461bcd60e51b8152600401610296919061465a565b505b6000826001600160a01b03166312d43a516040518163ffffffff1660e01b815260040160206040518083038186803b1580156128af57600080fd5b505afa1580156128c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128e79190613c1d565b600a54604051633cc8e33b60e21b81529192506001600160a01b03169063f3238cec90612925908f908f908f908d908f908a90600090600401614420565b600060405180830381600087803b15801561293f57600080fd5b505af1158015612953573d6000803e3d6000fd5b50506040516306d63c1d60e41b81526001600160a01b0384169250636d63c1d09150612983908690600401614363565b600060405180830381600087803b15801561299d57600080fd5b505af11580156129b1573d6000803e3d6000fd5b505050506000600b60009054906101000a90046001600160a01b03166001600160a01b0316632662166b8e8e8e8e8e8e8e6040518863ffffffff1660e01b8152600401612a049796959493929190614495565b602060405180830381600087803b158015612a1e57600080fd5b505af1158015612a32573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a569190614277565b60405163d3c87bbb60e01b81529091506001600160a01b0383169063d3c87bbb90612a85908790600401614363565b600060405180830381600087803b158015612a9f57600080fd5b505af1158015612ab3573d6000803e3d6000fd5b50929f9e505050505050505050505050505050565b8415612b3057600184511115612b06576009548451612af8916001600160a01b0316908790879060009061144c57fe5b612b03848330612c42565b94505b8015612b1b57612b168584613555565b612b30565b612b3083868660018851038151811061144c57fe5b5050505050565b6000612b7983836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f77000081525061364e565b9392505050565b600c60009054906101000a90046001600160a01b03166001600160a01b031663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b158015612bd057600080fd5b505af1158015612be4573d6000803e3d6000fd5b505050505050565b6126d78363a9059cbb60e01b8484604051602401612c0b929190614513565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915261367a565b6000835160021415612c8957612c8284600081518110612c5e57fe5b602002602001015185600181518110612c7357fe5b60200260200101518585613709565b9050612b79565b604051806060016040528060298152602001614b406029913960405162461bcd60e51b8152600401610296919061465a565b600080612ccc8888888888886137db565b90508015612d85576000612cfd6127106125f2612cf6600654612710612b3790919063ffffffff16565b8a906134d9565b90506000612d0b8883612b37565b905060008960018b510381518110612d1f57fe5b60200260200101519050612d6182600f6000846001600160a01b03166001600160a01b03168152602001908152602001600020546134b490919063ffffffff16565b6001600160a01b039091166000908152600f6020526040902055509150612d8a9050565b859150505b9695505050505050565b6009546001600160a01b0316600083612e28576040516340d3096b60e11b81526001600160a01b038316906381a612d690612dd3908990600401614363565b60206040518083038186803b158015612deb57600080fd5b505afa158015612dff573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e239190614277565b612ea4565b604051637092736960e11b81526001600160a01b0383169063e124e6d290612e54908990600401614363565b60206040518083038186803b158015612e6c57600080fd5b505afa158015612e80573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ea49190614277565b90508315612eed5782811115604051806060016040528060318152602001614aef6031913990612ee75760405162461bcd60e51b8152600401610296919061465a565b50612f2a565b82811015604051806060016040528060308152602001614a5f6030913990612f285760405162461bcd60e51b8152600401610296919061465a565b505b612f35868587613324565b6000826001600160a01b03166312d43a516040518163ffffffff1660e01b815260040160206040518083038186803b158015612f7057600080fd5b505afa158015612f84573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fa89190613c1d565b600a54604051633cc8e33b60e21b81529192506001600160a01b03169063f3238cec90612fe6908c908c908c908b908d908a90600190600401614420565b600060405180830381600087803b15801561300057600080fd5b505af1158015613014573d6000803e3d6000fd5b50506040516306d63c1d60e41b81526001600160a01b0384169250636d63c1d09150613044908690600401614363565b600060405180830381600087803b15801561305e57600080fd5b505af1158015613072573d6000803e3d6000fd5b5050600b54604051630f8ee8bb60e11b81526001600160a01b039091169250631f1dd17691506130ae908c908c908c908c908c90600401614461565b600060405180830381600087803b1580156130c857600080fd5b505af11580156130dc573d6000803e3d6000fd5b505060405163d3c87bbb60e01b81526001600160a01b038416925063d3c87bbb915061310c908690600401614363565b600060405180830381600087803b15801561312657600080fd5b505af115801561313a573d6000803e3d6000fd5b50505050505050505050505050565b60095460405163054451db60e21b815260009182916001600160a01b0390911690631511476c90613184908a908a908a908a906004016143c4565b604080518083038186803b15801561319b57600080fd5b505afa1580156131af573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131d39190614232565b6000818152601160205260409020549193509150821580156131f55750600081115b15613213576000828152601160205260408120556132138185613555565b5050505050505050565b60105461322957612b30565b60095460405163054451db60e21b815260009182916001600160a01b0390911690631511476c90613264908a908a908a908a906004016143c4565b604080518083038186803b15801561327b57600080fd5b505afa15801561328f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132b39190614232565b915091508161331b5760008334039050601054811015604051806060016040528060218152602001614a1360219139906133005760405162461bcd60e51b8152600401610296919061465a565b50600082815260116020526040902081905561321381612b80565b50505050505050565b8061332e576126d7565b8115613422576001600160a01b0383166000908152600d602052604090205480158015906133e5575060095460405163783a2b6760e11b815282916133e39185916001600160a01b03169063f07456ce9061338d908a90600401614363565b60206040518083038186803b1580156133a557600080fd5b505afa1580156133b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133dd9190614277565b906134b4565b115b1561341c576040518060600160405280602e81526020016149e5602e913960405162461bcd60e51b8152600401610296919061465a565b506126d7565b6001600160a01b0383166000908152600e6020526040902054801580159061347d575060095460405163114f1b5560e31b8152829161347b9185916001600160a01b031690638a78daa89061338d908a90600401614363565b115b15611d8f576040518060600160405280602f8152602001614a8f602f913960405162461bcd60e51b8152600401610296919061465a565b600082820183811015612b795760405162461bcd60e51b8152600401610296906146c4565b6000826134e85750600061238e565b828202828482816134f557fe5b0414612b795760405162461bcd60e51b815260040161029690614804565b6000612b7983836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f0000000000008152506139ab565b600c54604051632e1a7d4d60e01b81526001600160a01b0390911690632e1a7d4d90613585908590600401614944565b600060405180830381600087803b15801561359f57600080fd5b505af11580156135b3573d6000803e3d6000fd5b505050506000816001600160a01b0316836040516135d090614360565b60006040518083038185875af1925050503d806000811461360d576040519150601f19603f3d011682016040523d82523d6000602084013e613612565b606091505b5050905080604051806060016040528060318152602001614abe6031913990611d8f5760405162461bcd60e51b8152600401610296919061465a565b600081848411156136725760405162461bcd60e51b8152600401610296919061465a565b505050900390565b60606136cf826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166139e29092919063ffffffff16565b8051909150156126d757808060200190518101906136ed9190614216565b6126d75760405162461bcd60e51b8152600401610296906148c3565b600954604051634998b10960e11b815260009182916001600160a01b0390911690639331621290613742908990899088906004016143a1565b602060405180830381600087803b15801561375c57600080fd5b505af1158015613770573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137949190614277565b9050838110156040518060600160405280602b8152602001614a34602b9139906137d15760405162461bcd60e51b8152600401610296919061465a565b5095945050505050565b6000826137ea57506000612d8a565b816137f757506001612d8a565b60008660018851038151811061380957fe5b6020908102919091010151600954604051634a3f088d60e01b81529192506001600160a01b03169060009081908390634a3f088d90613852908e9088908d908d906004016143c4565b6101006040518083038186803b15801561386b57600080fd5b505afa15801561387f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138a3919061428f565b5050505050509150915081600014156138c3576000945050505050612d8a565b60006138cf83886134b4565b90506000846001600160a01b0316630a48d5a9878d6040518363ffffffff1660e01b8152600401613901929190614513565b60206040518083038186803b15801561391957600080fd5b505afa15801561392d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139519190614277565b9050600061395f84836134b4565b90506000613973856125f2886127106134d9565b90506000613994836125f260075461271001886134d990919063ffffffff16565b919091109f9e505050505050505050505050505050565b600081836139cc5760405162461bcd60e51b8152600401610296919061465a565b5060008385816139d857fe5b0495945050505050565b60606139f184846000856139f9565b949350505050565b606082471015613a1b5760405162461bcd60e51b81526004016102969061478f565b60006060866001600160a01b03168587604051613a389190614344565b60006040518083038185875af1925050503d8060008114613a75576040519150601f19603f3d011682016040523d82523d6000602084013e613a7a565b606091505b5091509150613a8a828286613a95565b979650505050505050565b60608315613aa4575081612b79565b825115613ab45782518084602001fd5b8160405162461bcd60e51b8152600401610296919061465a565b803561238e816149be565b600082601f830112613ae9578081fd5b8135613afc613af782614973565b61494d565b818152915060208083019084810181840286018201871015613b1d57600080fd5b60005b84811015613b45578135613b33816149be565b84529282019290820190600101613b20565b505050505092915050565b60008083601f840112613b61578182fd5b5081356001600160401b03811115613b77578182fd5b6020830191508360208083028501011115613b9157600080fd5b9250929050565b600082601f830112613ba8578081fd5b8135613bb6613af782614973565b818152915060208083019084810181840286018201871015613bd757600080fd5b60005b84811015613b4557813584529282019290820190600101613bda565b803561238e816149d6565b600060208284031215613c12578081fd5b8135612b79816149be565b600060208284031215613c2e578081fd5b8151612b79816149be565b60008060408385031215613c4b578081fd5b8235613c56816149be565b946020939093013593505050565b60008060408385031215613c76578182fd5b8235613c81816149be565b91506020830135613c91816149be565b809150509250929050565b600080600080600080600060c0888a031215613cb6578283fd5b8735613cc1816149be565b96506020880135613cd1816149be565b95506040880135613ce1816149be565b94506060880135613cf1816149d6565b93506080880135613d01816149be565b925060a08801356001600160401b03811115613d1b578283fd5b613d278a828b01613b50565b989b979a50959850939692959293505050565b600080600060608486031215613d4e578283fd5b8335613d59816149be565b92506020840135613d69816149be565b929592945050506040919091013590565b60008060408385031215613d8c578182fd5b8235613d97816149be565b91506020830135613c91816149d6565b600080600080600060808688031215613dbe578081fd5b8535613dc9816149be565b9450602086013593506040860135613de0816149be565b925060608601356001600160401b03811115613dfa578182fd5b613e0688828901613b50565b969995985093965092949392505050565b60008060008060008060008060006101208a8c031215613e35578182fd5b8951613e40816149be565b60208b015160408c0151919a509850613e58816149be565b60608b0151909750613e69816149be565b60808b015160a08c01519197509550613e81816149d6565b60c08b015160e08c01519195509350613e99816149d6565b809250506101008a015190509295985092959850929598565b600080600080600080600080610100898b031215613ece578182fd5b8851613ed9816149be565b60208a015160408b01519199509750613ef1816149be565b60608a015160808b01519197509550613f09816149d6565b60a08a015160c08b01519195509350613f21816149d6565b8092505060e089015190509295985092959890939650565b60008060008060008060008060008060006101408c8e031215613f5a578485fd5b6001600160401b03808d351115613f6f578586fd5b613f7c8e8e358f01613ad9565b9b50613f8b8e60208f01613ace565b9a5060408d0135995060608d01359850613fa88e60808f01613bf6565b9750613fb78e60a08f01613ace565b965060c08d0135955060e08d01359450613fd58e6101008f01613bf6565b9350806101208e01351115613fe8578283fd5b50613ffa8d6101208e01358e01613b50565b81935080925050509295989b509295989b9093969950565b60008060008060008060008060e0898b03121561402d578182fd5b88356001600160401b0380821115614043578384fd5b61404f8c838d01613ad9565b995060208b01359150614061826149be565b90975060408a0135965060608a0135955060808a013590614081826149d6565b90945060a08a0135935060c08a0135908082111561409d578384fd5b506140aa8b828c01613b50565b999c989b5096995094979396929594505050565b60008060008060008060008060006101008a8c0312156140dc578283fd5b89356001600160401b03808211156140f2578485fd5b6140fe8d838e01613ad9565b9a5060208c01359150614110826149be565b90985060408b0135975060608b0135965060808b0135955060a08b013590614137826149d6565b90945060c08b0135935060e08b01359080821115614153578384fd5b506141608c828d01613b50565b915080935050809150509295985092959850929598565b60008060006060848603121561418b578081fd5b83356001600160401b03808211156141a1578283fd5b6141ad87838801613ad9565b945060208601359150808211156141c2578283fd5b6141ce87838801613b98565b935060408601359150808211156141e3578283fd5b506141f086828701613b98565b9150509250925092565b60006020828403121561420b578081fd5b8135612b79816149d6565b600060208284031215614227578081fd5b8151612b79816149d6565b60008060408385031215614244578182fd5b825161424f816149d6565b6020939093015192949293505050565b600060208284031215614270578081fd5b5035919050565b600060208284031215614288578081fd5b5051919050565b600080600080600080600080610100898b0312156142ab578182fd5b885197506020890151965060408901519550606089015194506080890151935060a0890151925060c0890151613f21816149d6565b6000815180845260208085019450808401835b8381101561430f578151875295820195908201906001016142f3565b509495945050505050565b60008284528282602086013780602084860101526020601f19601f85011685010190509392505050565b60008251614356818460208701614992565b9190910192915050565b90565b6001600160a01b0391909116815260200190565b6001600160a01b039485168152928416602084015292166040820152606081019190915260800190565b6001600160a01b0393841681529183166020830152909116604082015260600190565b6001600160a01b039485168152928416602084015292166040820152901515606082015260800190565b6001600160a01b0395861681529385166020850152918416604084015215156060830152909116608082015260a00190565b6001600160a01b03978816815295871660208701529390951660408501529015156060840152608083015260a082019290925290151560c082015260e00190565b6001600160a01b03958616815293851660208501529190931660408301526060820192909252901515608082015260a00190565b6001600160a01b0397881681529587166020870152938616604086015260608501929092526080840152151560a083015290911660c082015260e00190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b039290921682521515602082015260400190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b0393841681526020810192909252909116604082015260600190565b606080825284519082018190526000906020906080840190828801845b828110156145915781516001600160a01b03168452928401929084019060010161456c565b505050838103828501526145a581876142e0565b9150508281036040840152612d8a81856142e0565b602080825281810183905260009060408482028401810190840186845b8781101561464257868403603f190183528135368a9003601e190181126145fc578687fd5b890180356001600160401b03811115614613578788fd5b8036038b1315614621578788fd5b61462e868289850161431a565b9550505091840191908401906001016145d7565b5091979650505050505050565b901515815260200190565b6000602082528251806020840152614679816040850160208701614992565b601f01601f19169190910160400192915050565b6020808252601d908201527f506f736974696f6e4d616e616765723a206c6f6e67206465706f736974000000604082015260600190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b6020808252603a908201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260408201527f6563697069656e74206d61792068617665207265766572746564000000000000606082015260800190565b6020808252601d908201527f416464726573733a20696e73756666696369656e742062616c616e6365000000604082015260600190565b60208082526026908201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6040820152651c8818d85b1b60d21b606082015260800190565b60208082526015908201527423b7bb32b93730b136329d103337b93134b23232b760591b604082015260600190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6040820152607760f81b606082015260800190565b60208082526027908201527f506f736974696f6e4d616e616765723a206c6f6e67206c6576657261676520646040820152666563726561736560c81b606082015260800190565b6020808252601e908201527f42617365506f736974696f6e4d616e616765723a20666f7262696464656e0000604082015260600190565b6020808252602a908201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6040820152691bdd081cdd58d8d9595960b21b606082015260800190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b90815260200190565b6040518181016001600160401b038111828210171561496b57600080fd5b604052919050565b60006001600160401b03821115614988578081fd5b5060209081020190565b60005b838110156149ad578181015183820152602001614995565b83811115611d8f5750506000910152565b6001600160a01b03811681146149d357600080fd5b50565b80151581146149d357600080fdfe42617365506f736974696f6e4d616e616765723a206d617820676c6f62616c206c6f6e6773206578636565646564506f736974696f6e4d616e616765723a20696e73756666696369656e742066656542617365506f736974696f6e4d616e616765723a20696e73756666696369656e7420616d6f756e744f757442617365506f736974696f6e4d616e616765723a206d61726b207072696365206c6f776572207468616e206c696d697442617365506f736974696f6e4d616e616765723a206d617820676c6f62616c2073686f72747320657863656564656442617365506f736974696f6e4d616e616765723a206661696c656420746f207472616e73666572206f757420657468657242617365506f736974696f6e4d616e616765723a206d61726b20707269636520686967686572207468616e206c696d6974506f736974696f6e4d616e616765723a20666f7262696464656e00000000000042617365506f736974696f6e4d616e616765723a20696e76616c6964205f706174682e6c656e67746842617365506f736974696f6e4d616e616765723a20696e76616c69642073656e646572506f736974696f6e4d616e616765723a20696e76616c6964205f706174682e6c656e677468a26469706673582212200a0bb2418d6512a31f736f4a7bc271c6b03b19ea27cf633bda7093cc5a286e1764736f6c634300060c0033",
  "deployedBytecode": "0x60806040526004361061024a5760003560e01c8063657bc5d011610139578063b0007cf0116100b6578063e85581731161007a578063e85581731461067d578063ef12c67e1461069d578063f2555278146106bd578063f851a440146106dd578063f887ea40146106f2578063fbfa77cf14610707576102a2565b8063b0007cf014610604578063c0eefef414610617578063cfad57a21461062a578063e1f21c671461064a578063e3b462681461066a576102a2565b80639698d25a116100fd5780639698d25a1461057c57806398d1e03a1461059c5780639a0a18bf146105b15780639a1598c8146105d1578063acb092d2146105f1576102a2565b8063657bc5d0146104fd57806367a5279314610512578063704b6c0214610527578063776af5ba146105475780638c0f9aac1461055c576102a2565b80632e931cea116101c7578063490ae2101161018b578063490ae21014610473578063529a356f1461049357806358e707f8146104b35780635f88eade146104d357806360a6d82a146104e8576102a2565b80632e931cea146103e95780633833f5f5146103fc5780633fc8cef3146104295780634453a3741461043e5780634584bd4b1461045e576102a2565b80631ce9cb8f1161020e5780631ce9cb8f146103495780631e2615381461036957806321acf65914610389578063233bfe3b146103a957806324a084df146103c9576102a2565b806305737a24146102a75780631045c74e146102bc578063126082cf146102f257806312d43a51146103075780631b90435914610329576102a2565b366102a257600c54604080516060810190915260238082526001600160a01b03909216331491614b6960208301399061029f5760405162461bcd60e51b8152600401610296919061465a565b60405180910390fd5b50005b600080fd5b6102ba6102b5366004613da7565b61071c565b005b3480156102c857600080fd5b506102dc6102d7366004613c01565b610b53565b6040516102e99190614944565b60405180910390f35b3480156102fe57600080fd5b506102dc610b65565b34801561031357600080fd5b5061031c610b6b565b6040516102e99190614363565b34801561033557600080fd5b506102ba6103443660046141fa565b610b7a565b34801561035557600080fd5b506102dc610364366004613c01565b610bf2565b34801561037557600080fd5b506102ba610384366004613d7a565b610c04565b34801561039557600080fd5b506102ba6103a4366004613d7a565b610c8e565b3480156103b557600080fd5b506102ba6103c436600461425f565b610d1a565b3480156103d557600080fd5b506102ba6103e4366004613c39565b610d79565b6102ba6103f7366004613f39565b610dba565b34801561040857600080fd5b5061041c610417366004613c01565b610f6f565b6040516102e9919061464f565b34801561043557600080fd5b5061031c610f84565b34801561044a57600080fd5b506102ba610459366004613d7a565b610f93565b34801561046a57600080fd5b5061041c611011565b34801561047f57600080fd5b506102ba61048e36600461425f565b61101f565b34801561049f57600080fd5b5061041c6104ae366004613c01565b61107e565b3480156104bf57600080fd5b506102ba6104ce36600461425f565b611093565b3480156104df57600080fd5b5061041c6110c2565b3480156104f457600080fd5b506102dc6110cb565b34801561050957600080fd5b5061031c6110d1565b34801561051e57600080fd5b506102dc6110e0565b34801561053357600080fd5b506102ba610542366004613c01565b6110e6565b34801561055357600080fd5b5061031c61115b565b34801561056857600080fd5b5061041c610577366004613c01565b611170565b34801561058857600080fd5b506102dc610597366004613c01565b611185565b3480156105a857600080fd5b506102dc611197565b3480156105bd57600080fd5b506102ba6105cc3660046141fa565b61119d565b3480156105dd57600080fd5b506102ba6105ec366004613c01565b611205565b6102ba6105ff366004614012565b611259565b6102ba610612366004613da7565b6114a3565b6102ba610625366004613c9c565b611831565b34801561063657600080fd5b506102ba610645366004613c01565b611c99565b34801561065657600080fd5b506102ba610665366004613d3a565b611ce5565b6102ba6106783660046140be565b611d95565b34801561068957600080fd5b506102dc61069836600461425f565b612032565b3480156106a957600080fd5b506102ba6106b8366004614177565b612044565b3480156106c957600080fd5b506102ba6106d8366004613c64565b61214a565b3480156106e957600080fd5b5061031c6121ef565b3480156106fe57600080fd5b5061031c6121fe565b34801561071357600080fd5b5061031c61220d565b33600090815260036020908152604091829020548251808401909352601a8352600080516020614b208339815191529183019190915260ff166107725760405162461bcd60e51b8152600401610296919061465a565b5061077d828261221c565b506107888585612394565b600954604080516312d43a5160e01b815290516001600160a01b039092169160009183916312d43a5191600480820192602092909190829003018186803b1580156107d257600080fd5b505afa1580156107e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061080a9190613c1d565b60025460405163d3bab1d160e01b81529192506000918291829182916201000090046001600160a01b03169063d3bab1d19061084c908e908e90600401614513565b6101206040518083038186803b15801561086557600080fd5b505afa158015610879573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061089d9190613e17565b50505095509550955095505050600081610932576040516340d3096b60e11b81526001600160a01b038816906381a612d6906108dd908790600401614363565b60206040518083038186803b1580156108f557600080fd5b505afa158015610909573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061092d9190614277565b6109ae565b604051637092736960e11b81526001600160a01b0388169063e124e6d29061095e908790600401614363565b60206040518083038186803b15801561097657600080fd5b505afa15801561098a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109ae9190614277565b600a54604051633cc8e33b60e21b81529192506001600160a01b03169063f3238cec906109ec908f908990899088908a908990600190600401614420565b600060405180830381600087803b158015610a0657600080fd5b505af1158015610a1a573d6000803e3d6000fd5b50506040516306d63c1d60e41b81526001600160a01b0389169250636d63c1d09150610a4a908a90600401614363565b600060405180830381600087803b158015610a6457600080fd5b505af1158015610a78573d6000803e3d6000fd5b505060025460405163d38ab51960e01b8152620100009091046001600160a01b0316925063d38ab5199150610ab5908f908f908f9060040161452c565b600060405180830381600087803b158015610acf57600080fd5b505af1158015610ae3573d6000803e3d6000fd5b505060405163d3c87bbb60e01b81526001600160a01b038916925063d3c87bbb9150610b13908a90600401614363565b600060405180830381600087803b158015610b2d57600080fd5b505af1158015610b41573d6000803e3d6000fd5b50505050505050505050505050505050565b600d6020526000908152604090205481565b61271081565b6000546001600160a01b031681565b6008546001600160a01b03163314610ba45760405162461bcd60e51b81526004016102969061488c565b6002805461ff001916610100831515021790556040517fa956222e37fe025ff51e5440ac729a9bd417ff91e485e14dcffa2c0ba8894f4090610be790839061464f565b60405180910390a150565b600f6020526000908152604090205481565b6008546001600160a01b03163314610c2e5760405162461bcd60e51b81526004016102969061488c565b6001600160a01b03821660008181526003602052604090819020805460ff1916841515179055517f1d5bc0255b943d6a5b5279e8a55d74d620baccbceecb25e87a3558f14c4c118e90610c8290849061464f565b60405180910390a25050565b6008546001600160a01b03163314610cb85760405162461bcd60e51b81526004016102969061488c565b6001600160a01b03821660009081526004602052604090819020805460ff1916831515179055517fa4e46c70ff429a91de7d1716d736e877c7cca1c22ac850b23d242530dd95e47490610d0e90849084906144f8565b60405180910390a15050565b6008546001600160a01b03163314610d445760405162461bcd60e51b81526004016102969061488c565b60078190556040517f21167d0d4661af93817ebce920f18986eed3d75d5e1c03f2aed05efcbafbc45290610be7908390614944565b6000546001600160a01b03163314610da35760405162461bcd60e51b8152600401610296906147d5565b610db66001600160a01b0383168261263b565b5050565b60026001541415610ddd5760405162461bcd60e51b81526004016102969061490d565b60026001553360009081526004602052604090205460ff1680610e02575060025460ff165b6040518060400160405280601a8152602001600080516020614b2083398151915281525090610e445760405162461bcd60e51b8152600401610296919061465a565b50610e4f828261221c565b508a5160011480610e6157508a516002145b604051806060016040528060258152602001614b8c6025913990610e985760405162461bcd60e51b8152600401610296919061465a565b508215610f2857600c548b516001600160a01b03909116908c906000198101908110610ec057fe5b60200260200101516001600160a01b0316146040518060400160405280601e81526020017f506f736974696f6e4d616e616765723a20696e76616c6964205f70617468000081525090610f265760405162461bcd60e51b8152600401610296919061465a565b505b6000610f4e338d600081518110610f3b57fe5b60200260200101518d8d8d8d308d6126dc565b9050610f5d818d898888612ac8565b50506001805550505050505050505050565b60036020526000908152604090205460ff1681565b600c546001600160a01b031681565b6008546001600160a01b03163314610fbd5760405162461bcd60e51b81526004016102969061488c565b6001600160a01b03821660008181526005602052604090819020805460ff1916841515179055517f8c0d56805c3b43d441481229dc64bee168253ffe4305f37ab7cfe63b1c4268c690610c8290849061464f565b600254610100900460ff1681565b6008546001600160a01b031633146110495760405162461bcd60e51b81526004016102969061488c565b60068190556040517f974fd3c1fcb4653dfc4fb740c4c692cd212d55c28f163f310128cb64d830067590610be7908390614944565b60056020526000908152604090205460ff1681565b6008546001600160a01b031633146110bd5760405162461bcd60e51b81526004016102969061488c565b601055565b60025460ff1681565b60105481565b600a546001600160a01b031681565b60065481565b6000546001600160a01b031633146111105760405162461bcd60e51b8152600401610296906147d5565b600880546001600160a01b0319166001600160a01b0383161790556040517f5a272403b402d892977df56625f4164ccaf70ca3863991c43ecfe76a6905b0a190610be7908390614363565b6002546201000090046001600160a01b031681565b60046020526000908152604090205460ff1681565b600e6020526000908152604090205481565b60075481565b6008546001600160a01b031633146111c75760405162461bcd60e51b81526004016102969061488c565b6002805460ff19168215151790556040517fb396a770d36909ca07c2b7d7d408f43c9bb74425c5d17caf44336c4f09c4209490610be790839061464f565b6008546001600160a01b0316331461122f5760405162461bcd60e51b81526004016102969061488c565b600280546001600160a01b03909216620100000262010000600160b01b0319909216919091179055565b6002600154141561127c5760405162461bcd60e51b81526004016102969061490d565b60026001553360009081526004602052604090205460ff16806112a1575060025460ff165b6040518060400160405280601a8152602001600080516020614b20833981519152815250906112e35760405162461bcd60e51b8152600401610296919061465a565b5060006112f0838361221c565b9050885160011480611303575088516002145b604051806060016040528060258152602001614b8c602591399061133a5760405162461bcd60e51b8152600401610296919061465a565b50600c5489516001600160a01b03909116908a9060009061135757fe5b60200260200101516001600160a01b0316146040518060400160405280601e81526020017f506f736974696f6e4d616e616765723a20696e76616c6964205f706174680000815250906113bd5760405162461bcd60e51b8152600401610296919061465a565b5060006113ca3483612b37565b9050801561146e576113db81612b80565b60018a51111561141057600954600c54611402916001600160a01b03918216911683612bec565b61140d8a8930612c42565b90505b6000611420338c848d8b8d612cbb565b905061146c600960009054906101000a90046001600160a01b0316828d60018f51038151811061144c57fe5b60200260200101516001600160a01b0316612bec9092919063ffffffff16565b505b611493338b60018d51038151811061148257fe5b60200260200101518b8a8a8a612d94565b5050600180555050505050505050565b33600090815260036020908152604091829020548251808401909352601a8352600080516020614b208339815191529183019190915260ff166114f95760405162461bcd60e51b8152600401610296919061465a565b50611504828261221c565b50600954604080516312d43a5160e01b815290516001600160a01b039092169160009183916312d43a5191600480820192602092909190829003018186803b15801561154f57600080fd5b505afa158015611563573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115879190613c1d565b600254604051630130197760e11b81529192506000918291829182916201000090046001600160a01b03169063026032ee906115c9908e908e90600401614513565b6101006040518083038186803b1580156115e257600080fd5b505afa1580156115f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061161a9190613eb2565b5050509450945094505093506000816116ae57604051637092736960e11b81526001600160a01b0388169063e124e6d290611659908790600401614363565b60206040518083038186803b15801561167157600080fd5b505afa158015611685573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116a99190614277565b61172a565b6040516340d3096b60e11b81526001600160a01b038816906381a612d6906116da908790600401614363565b60206040518083038186803b1580156116f257600080fd5b505afa158015611706573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061172a9190614277565b600a54604051633cc8e33b60e21b81529192506001600160a01b03169063f3238cec90611768908f908990899088908a908990600090600401614420565b600060405180830381600087803b15801561178257600080fd5b505af1158015611796573d6000803e3d6000fd5b50506040516306d63c1d60e41b81526001600160a01b0389169250636d63c1d091506117c6908a90600401614363565b600060405180830381600087803b1580156117e057600080fd5b505af11580156117f4573d6000803e3d6000fd5b50506002546040516308eca22560e11b8152620100009091046001600160a01b031692506311d9444a9150610ab5908f908f908f9060040161452c565b600260015414156118545760405162461bcd60e51b81526004016102969061490d565b60026001553360009081526005602052604090205460ff168061187f5750336001600160a01b038816145b6040518060400160405280601a8152602001600080516020614b20833981519152815250906118c15760405162461bcd60e51b8152600401610296919061465a565b506118cc828261221c565b50600954604080516312d43a5160e01b815290516001600160a01b039092169160009183916312d43a5191600480820192602092909190829003018186803b15801561191757600080fd5b505afa15801561192b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061194f9190613c1d565b600954604051634a3f088d60e01b81529192506000916001600160a01b0390911690634a3f088d9061198b908d908d908d908d906004016143c4565b6101006040518083038186803b1580156119a457600080fd5b505afa1580156119b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119dc919061428f565b505050505050509050600087611a6d57604051637092736960e11b81526001600160a01b0385169063e124e6d290611a18908c90600401614363565b60206040518083038186803b158015611a3057600080fd5b505afa158015611a44573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a689190614277565b611ae9565b6040516340d3096b60e11b81526001600160a01b038516906381a612d690611a99908c90600401614363565b60206040518083038186803b158015611ab157600080fd5b505afa158015611ac5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ae99190614277565b600a54604051633cc8e33b60e21b81529192506001600160a01b03169063f3238cec90611b27908e908e908e908e9089908990600090600401614420565b600060405180830381600087803b158015611b4157600080fd5b505af1158015611b55573d6000803e3d6000fd5b50506040516306d63c1d60e41b81526001600160a01b0386169250636d63c1d09150611b85908790600401614363565b600060405180830381600087803b158015611b9f57600080fd5b505af1158015611bb3573d6000803e3d6000fd5b5050604051631bc5d52960e31b81526001600160a01b038716925063de2ea9489150611beb908e908e908e908e908e906004016143ee565b600060405180830381600087803b158015611c0557600080fd5b505af1158015611c19573d6000803e3d6000fd5b505060405163d3c87bbb60e01b81526001600160a01b038616925063d3c87bbb9150611c49908790600401614363565b600060405180830381600087803b158015611c6357600080fd5b505af1158015611c77573d6000803e3d6000fd5b50505050611c888b8b8b8b8b613149565b505060018055505050505050505050565b6000546001600160a01b03163314611cc35760405162461bcd60e51b8152600401610296906147d5565b600080546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b03163314611d0f5760405162461bcd60e51b8152600401610296906147d5565b60405163095ea7b360e01b81526001600160a01b0384169063095ea7b390611d3d9085908590600401614513565b602060405180830381600087803b158015611d5757600080fd5b505af1158015611d6b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d8f9190614216565b50505050565b60026001541415611db85760405162461bcd60e51b81526004016102969061490d565b60026001553360009081526004602052604090205460ff1680611ddd575060025460ff165b6040518060400160405280601a8152602001600080516020614b2083398151915281525090611e1f5760405162461bcd60e51b8152600401610296919061465a565b506000611e2c838361221c565b9050611e52338b60018d510381518110611e4257fe5b60200260200101518b888561321d565b895160011480611e63575089516002145b604051806060016040528060258152602001614b8c6025913990611e9a5760405162461bcd60e51b8152600401610296919061465a565b50871561200d57895160011415611f2e57600b548a516001600160a01b0390911690631b827878908c90600090611ecd57fe5b602002602001015133308c6040518563ffffffff1660e01b8152600401611ef79493929190614377565b600060405180830381600087803b158015611f1157600080fd5b505af1158015611f25573d6000803e3d6000fd5b50505050611fcf565b600b548a516001600160a01b0390911690631b827878908c90600090611f5057fe5b602002602001015133600960009054906101000a90046001600160a01b03168c6040518563ffffffff1660e01b8152600401611f8f9493929190614377565b600060405180830381600087803b158015611fa957600080fd5b505af1158015611fbd573d6000803e3d6000fd5b50505050611fcc8a8830612c42565b97505b6000611fdf338c8b8d8a8c612cbb565b905061200b600960009054906101000a90046001600160a01b0316828d60018f51038151811061144c57fe5b505b611493338b60018d51038151811061202157fe5b60200260200101518b898989612d94565b60116020526000908152604090205481565b6008546001600160a01b0316331461206e5760405162461bcd60e51b81526004016102969061488c565b60005b835181101561210957600084828151811061208857fe5b6020026020010151905083828151811061209e57fe5b6020026020010151600d6000836001600160a01b03166001600160a01b03168152602001908152602001600020819055508282815181106120db57fe5b6020908102919091018101516001600160a01b039092166000908152600e9091526040902055600101612071565b507fae32d569b058895b9620d6552b09aaffedc9a6f396be4d595a224ad09f8b213983838360405161213d9392919061454f565b60405180910390a1505050565b6008546001600160a01b031633146121745760405162461bcd60e51b81526004016102969061488c565b6001600160a01b0382166000908152600f6020526040902054806121985750610db6565b6001600160a01b0383166000818152600f60205260408120556121bc908383612bec565b7f4f1b51dd7a2fcb861aa2670f668be66835c4ee12b4bbbf037e4d0018f39819e483838360405161213d939291906144d4565b6008546001600160a01b031681565b600b546001600160a01b031681565b6009546001600160a01b031681565b60008161222b5750600061238e565b60125460408051633a0df78d60e11b815290516000926001600160a01b03169163741bef1a916004808301926020929190829003018186803b15801561227057600080fd5b505afa158015612284573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122a89190613c1d565b60405163d47eed4560e01b81529091506001600160a01b0382169063d47eed45906122d990879087906004016145ba565b60206040518083038186803b1580156122f157600080fd5b505afa158015612305573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123299190614277565b9150806001600160a01b031663ef9e5e288386866040518463ffffffff1660e01b815260040161235a9291906145ba565b6000604051808303818588803b15801561237357600080fd5b505af1158015612387573d6000803e3d6000fd5b5050505050505b92915050565b60008060008060008060028054906101000a90046001600160a01b03166001600160a01b031663d3bab1d189896040518363ffffffff1660e01b81526004016123de929190614513565b6101206040518083038186803b1580156123f757600080fd5b505afa15801561240b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061242f9190613e17565b505050955095509550955095509550612449838284613324565b600254610100900460ff1661246357505050505050610db6565b8061247357505050505050610db6565b600082116124935760405162461bcd60e51b81526004016102969061468d565b600954604051634a3f088d60e01b81526001600160a01b039091169060009081908390634a3f088d906124d0908e908b908b908a906004016143c4565b6101006040518083038186803b1580156124e957600080fd5b505afa1580156124fd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612521919061428f565b50505050505091509150816000141561254257505050505050505050610db6565b600061254e83876134b4565b90506000846001600160a01b0316630a48d5a98c8c6040518363ffffffff1660e01b8152600401612580929190614513565b60206040518083038186803b15801561259857600080fd5b505afa1580156125ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125d09190614277565b905060006125de84836134b4565b905060006125f8856125f2886127106134d9565b90613513565b90506000612619836125f260075461271001886134d990919063ffffffff16565b905081811015610b415760405162461bcd60e51b815260040161029690614845565b8047101561265b5760405162461bcd60e51b815260040161029690614758565b6000826001600160a01b03168260405161267490614360565b60006040518083038185875af1925050503d80600081146126b1576040519150601f19603f3d011682016040523d82523d6000602084013e6126b6565b606091505b50509050806126d75760405162461bcd60e51b8152600401610296906146fb565b505050565b6009546000906001600160a01b0316818561277257604051637092736960e11b81526001600160a01b0383169063e124e6d29061271d908c90600401614363565b60206040518083038186803b15801561273557600080fd5b505afa158015612749573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061276d9190614277565b6127ee565b6040516340d3096b60e11b81526001600160a01b038316906381a612d69061279e908c90600401614363565b60206040518083038186803b1580156127b657600080fd5b505afa1580156127ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127ee9190614277565b905085156128375783811015604051806060016040528060308152602001614a5f60309139906128315760405162461bcd60e51b8152600401610296919061465a565b50612874565b83811115604051806060016040528060318152602001614aef60319139906128725760405162461bcd60e51b8152600401610296919061465a565b505b6000826001600160a01b03166312d43a516040518163ffffffff1660e01b815260040160206040518083038186803b1580156128af57600080fd5b505afa1580156128c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128e79190613c1d565b600a54604051633cc8e33b60e21b81529192506001600160a01b03169063f3238cec90612925908f908f908f908d908f908a90600090600401614420565b600060405180830381600087803b15801561293f57600080fd5b505af1158015612953573d6000803e3d6000fd5b50506040516306d63c1d60e41b81526001600160a01b0384169250636d63c1d09150612983908690600401614363565b600060405180830381600087803b15801561299d57600080fd5b505af11580156129b1573d6000803e3d6000fd5b505050506000600b60009054906101000a90046001600160a01b03166001600160a01b0316632662166b8e8e8e8e8e8e8e6040518863ffffffff1660e01b8152600401612a049796959493929190614495565b602060405180830381600087803b158015612a1e57600080fd5b505af1158015612a32573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a569190614277565b60405163d3c87bbb60e01b81529091506001600160a01b0383169063d3c87bbb90612a85908790600401614363565b600060405180830381600087803b158015612a9f57600080fd5b505af1158015612ab3573d6000803e3d6000fd5b50929f9e505050505050505050505050505050565b8415612b3057600184511115612b06576009548451612af8916001600160a01b0316908790879060009061144c57fe5b612b03848330612c42565b94505b8015612b1b57612b168584613555565b612b30565b612b3083868660018851038151811061144c57fe5b5050505050565b6000612b7983836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f77000081525061364e565b9392505050565b600c60009054906101000a90046001600160a01b03166001600160a01b031663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b158015612bd057600080fd5b505af1158015612be4573d6000803e3d6000fd5b505050505050565b6126d78363a9059cbb60e01b8484604051602401612c0b929190614513565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915261367a565b6000835160021415612c8957612c8284600081518110612c5e57fe5b602002602001015185600181518110612c7357fe5b60200260200101518585613709565b9050612b79565b604051806060016040528060298152602001614b406029913960405162461bcd60e51b8152600401610296919061465a565b600080612ccc8888888888886137db565b90508015612d85576000612cfd6127106125f2612cf6600654612710612b3790919063ffffffff16565b8a906134d9565b90506000612d0b8883612b37565b905060008960018b510381518110612d1f57fe5b60200260200101519050612d6182600f6000846001600160a01b03166001600160a01b03168152602001908152602001600020546134b490919063ffffffff16565b6001600160a01b039091166000908152600f6020526040902055509150612d8a9050565b859150505b9695505050505050565b6009546001600160a01b0316600083612e28576040516340d3096b60e11b81526001600160a01b038316906381a612d690612dd3908990600401614363565b60206040518083038186803b158015612deb57600080fd5b505afa158015612dff573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e239190614277565b612ea4565b604051637092736960e11b81526001600160a01b0383169063e124e6d290612e54908990600401614363565b60206040518083038186803b158015612e6c57600080fd5b505afa158015612e80573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ea49190614277565b90508315612eed5782811115604051806060016040528060318152602001614aef6031913990612ee75760405162461bcd60e51b8152600401610296919061465a565b50612f2a565b82811015604051806060016040528060308152602001614a5f6030913990612f285760405162461bcd60e51b8152600401610296919061465a565b505b612f35868587613324565b6000826001600160a01b03166312d43a516040518163ffffffff1660e01b815260040160206040518083038186803b158015612f7057600080fd5b505afa158015612f84573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fa89190613c1d565b600a54604051633cc8e33b60e21b81529192506001600160a01b03169063f3238cec90612fe6908c908c908c908b908d908a90600190600401614420565b600060405180830381600087803b15801561300057600080fd5b505af1158015613014573d6000803e3d6000fd5b50506040516306d63c1d60e41b81526001600160a01b0384169250636d63c1d09150613044908690600401614363565b600060405180830381600087803b15801561305e57600080fd5b505af1158015613072573d6000803e3d6000fd5b5050600b54604051630f8ee8bb60e11b81526001600160a01b039091169250631f1dd17691506130ae908c908c908c908c908c90600401614461565b600060405180830381600087803b1580156130c857600080fd5b505af11580156130dc573d6000803e3d6000fd5b505060405163d3c87bbb60e01b81526001600160a01b038416925063d3c87bbb915061310c908690600401614363565b600060405180830381600087803b15801561312657600080fd5b505af115801561313a573d6000803e3d6000fd5b50505050505050505050505050565b60095460405163054451db60e21b815260009182916001600160a01b0390911690631511476c90613184908a908a908a908a906004016143c4565b604080518083038186803b15801561319b57600080fd5b505afa1580156131af573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131d39190614232565b6000818152601160205260409020549193509150821580156131f55750600081115b15613213576000828152601160205260408120556132138185613555565b5050505050505050565b60105461322957612b30565b60095460405163054451db60e21b815260009182916001600160a01b0390911690631511476c90613264908a908a908a908a906004016143c4565b604080518083038186803b15801561327b57600080fd5b505afa15801561328f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132b39190614232565b915091508161331b5760008334039050601054811015604051806060016040528060218152602001614a1360219139906133005760405162461bcd60e51b8152600401610296919061465a565b50600082815260116020526040902081905561321381612b80565b50505050505050565b8061332e576126d7565b8115613422576001600160a01b0383166000908152600d602052604090205480158015906133e5575060095460405163783a2b6760e11b815282916133e39185916001600160a01b03169063f07456ce9061338d908a90600401614363565b60206040518083038186803b1580156133a557600080fd5b505afa1580156133b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133dd9190614277565b906134b4565b115b1561341c576040518060600160405280602e81526020016149e5602e913960405162461bcd60e51b8152600401610296919061465a565b506126d7565b6001600160a01b0383166000908152600e6020526040902054801580159061347d575060095460405163114f1b5560e31b8152829161347b9185916001600160a01b031690638a78daa89061338d908a90600401614363565b115b15611d8f576040518060600160405280602f8152602001614a8f602f913960405162461bcd60e51b8152600401610296919061465a565b600082820183811015612b795760405162461bcd60e51b8152600401610296906146c4565b6000826134e85750600061238e565b828202828482816134f557fe5b0414612b795760405162461bcd60e51b815260040161029690614804565b6000612b7983836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f0000000000008152506139ab565b600c54604051632e1a7d4d60e01b81526001600160a01b0390911690632e1a7d4d90613585908590600401614944565b600060405180830381600087803b15801561359f57600080fd5b505af11580156135b3573d6000803e3d6000fd5b505050506000816001600160a01b0316836040516135d090614360565b60006040518083038185875af1925050503d806000811461360d576040519150601f19603f3d011682016040523d82523d6000602084013e613612565b606091505b5050905080604051806060016040528060318152602001614abe6031913990611d8f5760405162461bcd60e51b8152600401610296919061465a565b600081848411156136725760405162461bcd60e51b8152600401610296919061465a565b505050900390565b60606136cf826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166139e29092919063ffffffff16565b8051909150156126d757808060200190518101906136ed9190614216565b6126d75760405162461bcd60e51b8152600401610296906148c3565b600954604051634998b10960e11b815260009182916001600160a01b0390911690639331621290613742908990899088906004016143a1565b602060405180830381600087803b15801561375c57600080fd5b505af1158015613770573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137949190614277565b9050838110156040518060600160405280602b8152602001614a34602b9139906137d15760405162461bcd60e51b8152600401610296919061465a565b5095945050505050565b6000826137ea57506000612d8a565b816137f757506001612d8a565b60008660018851038151811061380957fe5b6020908102919091010151600954604051634a3f088d60e01b81529192506001600160a01b03169060009081908390634a3f088d90613852908e9088908d908d906004016143c4565b6101006040518083038186803b15801561386b57600080fd5b505afa15801561387f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138a3919061428f565b5050505050509150915081600014156138c3576000945050505050612d8a565b60006138cf83886134b4565b90506000846001600160a01b0316630a48d5a9878d6040518363ffffffff1660e01b8152600401613901929190614513565b60206040518083038186803b15801561391957600080fd5b505afa15801561392d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139519190614277565b9050600061395f84836134b4565b90506000613973856125f2886127106134d9565b90506000613994836125f260075461271001886134d990919063ffffffff16565b919091109f9e505050505050505050505050505050565b600081836139cc5760405162461bcd60e51b8152600401610296919061465a565b5060008385816139d857fe5b0495945050505050565b60606139f184846000856139f9565b949350505050565b606082471015613a1b5760405162461bcd60e51b81526004016102969061478f565b60006060866001600160a01b03168587604051613a389190614344565b60006040518083038185875af1925050503d8060008114613a75576040519150601f19603f3d011682016040523d82523d6000602084013e613a7a565b606091505b5091509150613a8a828286613a95565b979650505050505050565b60608315613aa4575081612b79565b825115613ab45782518084602001fd5b8160405162461bcd60e51b8152600401610296919061465a565b803561238e816149be565b600082601f830112613ae9578081fd5b8135613afc613af782614973565b61494d565b818152915060208083019084810181840286018201871015613b1d57600080fd5b60005b84811015613b45578135613b33816149be565b84529282019290820190600101613b20565b505050505092915050565b60008083601f840112613b61578182fd5b5081356001600160401b03811115613b77578182fd5b6020830191508360208083028501011115613b9157600080fd5b9250929050565b600082601f830112613ba8578081fd5b8135613bb6613af782614973565b818152915060208083019084810181840286018201871015613bd757600080fd5b60005b84811015613b4557813584529282019290820190600101613bda565b803561238e816149d6565b600060208284031215613c12578081fd5b8135612b79816149be565b600060208284031215613c2e578081fd5b8151612b79816149be565b60008060408385031215613c4b578081fd5b8235613c56816149be565b946020939093013593505050565b60008060408385031215613c76578182fd5b8235613c81816149be565b91506020830135613c91816149be565b809150509250929050565b600080600080600080600060c0888a031215613cb6578283fd5b8735613cc1816149be565b96506020880135613cd1816149be565b95506040880135613ce1816149be565b94506060880135613cf1816149d6565b93506080880135613d01816149be565b925060a08801356001600160401b03811115613d1b578283fd5b613d278a828b01613b50565b989b979a50959850939692959293505050565b600080600060608486031215613d4e578283fd5b8335613d59816149be565b92506020840135613d69816149be565b929592945050506040919091013590565b60008060408385031215613d8c578182fd5b8235613d97816149be565b91506020830135613c91816149d6565b600080600080600060808688031215613dbe578081fd5b8535613dc9816149be565b9450602086013593506040860135613de0816149be565b925060608601356001600160401b03811115613dfa578182fd5b613e0688828901613b50565b969995985093965092949392505050565b60008060008060008060008060006101208a8c031215613e35578182fd5b8951613e40816149be565b60208b015160408c0151919a509850613e58816149be565b60608b0151909750613e69816149be565b60808b015160a08c01519197509550613e81816149d6565b60c08b015160e08c01519195509350613e99816149d6565b809250506101008a015190509295985092959850929598565b600080600080600080600080610100898b031215613ece578182fd5b8851613ed9816149be565b60208a015160408b01519199509750613ef1816149be565b60608a015160808b01519197509550613f09816149d6565b60a08a015160c08b01519195509350613f21816149d6565b8092505060e089015190509295985092959890939650565b60008060008060008060008060008060006101408c8e031215613f5a578485fd5b6001600160401b03808d351115613f6f578586fd5b613f7c8e8e358f01613ad9565b9b50613f8b8e60208f01613ace565b9a5060408d0135995060608d01359850613fa88e60808f01613bf6565b9750613fb78e60a08f01613ace565b965060c08d0135955060e08d01359450613fd58e6101008f01613bf6565b9350806101208e01351115613fe8578283fd5b50613ffa8d6101208e01358e01613b50565b81935080925050509295989b509295989b9093969950565b60008060008060008060008060e0898b03121561402d578182fd5b88356001600160401b0380821115614043578384fd5b61404f8c838d01613ad9565b995060208b01359150614061826149be565b90975060408a0135965060608a0135955060808a013590614081826149d6565b90945060a08a0135935060c08a0135908082111561409d578384fd5b506140aa8b828c01613b50565b999c989b5096995094979396929594505050565b60008060008060008060008060006101008a8c0312156140dc578283fd5b89356001600160401b03808211156140f2578485fd5b6140fe8d838e01613ad9565b9a5060208c01359150614110826149be565b90985060408b0135975060608b0135965060808b0135955060a08b013590614137826149d6565b90945060c08b0135935060e08b01359080821115614153578384fd5b506141608c828d01613b50565b915080935050809150509295985092959850929598565b60008060006060848603121561418b578081fd5b83356001600160401b03808211156141a1578283fd5b6141ad87838801613ad9565b945060208601359150808211156141c2578283fd5b6141ce87838801613b98565b935060408601359150808211156141e3578283fd5b506141f086828701613b98565b9150509250925092565b60006020828403121561420b578081fd5b8135612b79816149d6565b600060208284031215614227578081fd5b8151612b79816149d6565b60008060408385031215614244578182fd5b825161424f816149d6565b6020939093015192949293505050565b600060208284031215614270578081fd5b5035919050565b600060208284031215614288578081fd5b5051919050565b600080600080600080600080610100898b0312156142ab578182fd5b885197506020890151965060408901519550606089015194506080890151935060a0890151925060c0890151613f21816149d6565b6000815180845260208085019450808401835b8381101561430f578151875295820195908201906001016142f3565b509495945050505050565b60008284528282602086013780602084860101526020601f19601f85011685010190509392505050565b60008251614356818460208701614992565b9190910192915050565b90565b6001600160a01b0391909116815260200190565b6001600160a01b039485168152928416602084015292166040820152606081019190915260800190565b6001600160a01b0393841681529183166020830152909116604082015260600190565b6001600160a01b039485168152928416602084015292166040820152901515606082015260800190565b6001600160a01b0395861681529385166020850152918416604084015215156060830152909116608082015260a00190565b6001600160a01b03978816815295871660208701529390951660408501529015156060840152608083015260a082019290925290151560c082015260e00190565b6001600160a01b03958616815293851660208501529190931660408301526060820192909252901515608082015260a00190565b6001600160a01b0397881681529587166020870152938616604086015260608501929092526080840152151560a083015290911660c082015260e00190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b039290921682521515602082015260400190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b0393841681526020810192909252909116604082015260600190565b606080825284519082018190526000906020906080840190828801845b828110156145915781516001600160a01b03168452928401929084019060010161456c565b505050838103828501526145a581876142e0565b9150508281036040840152612d8a81856142e0565b602080825281810183905260009060408482028401810190840186845b8781101561464257868403603f190183528135368a9003601e190181126145fc578687fd5b890180356001600160401b03811115614613578788fd5b8036038b1315614621578788fd5b61462e868289850161431a565b9550505091840191908401906001016145d7565b5091979650505050505050565b901515815260200190565b6000602082528251806020840152614679816040850160208701614992565b601f01601f19169190910160400192915050565b6020808252601d908201527f506f736974696f6e4d616e616765723a206c6f6e67206465706f736974000000604082015260600190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b6020808252603a908201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260408201527f6563697069656e74206d61792068617665207265766572746564000000000000606082015260800190565b6020808252601d908201527f416464726573733a20696e73756666696369656e742062616c616e6365000000604082015260600190565b60208082526026908201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6040820152651c8818d85b1b60d21b606082015260800190565b60208082526015908201527423b7bb32b93730b136329d103337b93134b23232b760591b604082015260600190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6040820152607760f81b606082015260800190565b60208082526027908201527f506f736974696f6e4d616e616765723a206c6f6e67206c6576657261676520646040820152666563726561736560c81b606082015260800190565b6020808252601e908201527f42617365506f736974696f6e4d616e616765723a20666f7262696464656e0000604082015260600190565b6020808252602a908201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6040820152691bdd081cdd58d8d9595960b21b606082015260800190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b90815260200190565b6040518181016001600160401b038111828210171561496b57600080fd5b604052919050565b60006001600160401b03821115614988578081fd5b5060209081020190565b60005b838110156149ad578181015183820152602001614995565b83811115611d8f5750506000910152565b6001600160a01b03811681146149d357600080fd5b50565b80151581146149d357600080fdfe42617365506f736974696f6e4d616e616765723a206d617820676c6f62616c206c6f6e6773206578636565646564506f736974696f6e4d616e616765723a20696e73756666696369656e742066656542617365506f736974696f6e4d616e616765723a20696e73756666696369656e7420616d6f756e744f757442617365506f736974696f6e4d616e616765723a206d61726b207072696365206c6f776572207468616e206c696d697442617365506f736974696f6e4d616e616765723a206d617820676c6f62616c2073686f72747320657863656564656442617365506f736974696f6e4d616e616765723a206661696c656420746f207472616e73666572206f757420657468657242617365506f736974696f6e4d616e616765723a206d61726b20707269636520686967686572207468616e206c696d6974506f736974696f6e4d616e616765723a20666f7262696464656e00000000000042617365506f736974696f6e4d616e616765723a20696e76616c6964205f706174682e6c656e67746842617365506f736974696f6e4d616e616765723a20696e76616c69642073656e646572506f736974696f6e4d616e616765723a20696e76616c6964205f706174682e6c656e677468a26469706673582212200a0bb2418d6512a31f736f4a7bc271c6b03b19ea27cf633bda7093cc5a286e1764736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3,
        "contract": "contracts/core/PositionManager.sol:PositionManager",
        "label": "gov",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 15478,
        "contract": "contracts/core/PositionManager.sol:PositionManager",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 12269,
        "contract": "contracts/core/PositionManager.sol:PositionManager",
        "label": "opened",
        "offset": 0,
        "slot": "2",
        "type": "t_bool"
      },
      {
        "astId": 12272,
        "contract": "contracts/core/PositionManager.sol:PositionManager",
        "label": "shouldValidateIncreaseOrder",
        "offset": 1,
        "slot": "2",
        "type": "t_bool"
      },
      {
        "astId": 12274,
        "contract": "contracts/core/PositionManager.sol:PositionManager",
        "label": "orderBook",
        "offset": 2,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 12278,
        "contract": "contracts/core/PositionManager.sol:PositionManager",
        "label": "isOrderKeeper",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 12282,
        "contract": "contracts/core/PositionManager.sol:PositionManager",
        "label": "isPartner",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 12286,
        "contract": "contracts/core/PositionManager.sol:PositionManager",
        "label": "isLiquidator",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 12075,
        "contract": "contracts/core/PositionManager.sol:PositionManager",
        "label": "depositFee",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 12078,
        "contract": "contracts/core/PositionManager.sol:PositionManager",
        "label": "increasePositionBufferBps",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 12080,
        "contract": "contracts/core/PositionManager.sol:PositionManager",
        "label": "admin",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 12082,
        "contract": "contracts/core/PositionManager.sol:PositionManager",
        "label": "vault",
        "offset": 0,
        "slot": "9",
        "type": "t_address"
      },
      {
        "astId": 12084,
        "contract": "contracts/core/PositionManager.sol:PositionManager",
        "label": "shortsTracker",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      },
      {
        "astId": 12086,
        "contract": "contracts/core/PositionManager.sol:PositionManager",
        "label": "router",
        "offset": 0,
        "slot": "11",
        "type": "t_address"
      },
      {
        "astId": 12088,
        "contract": "contracts/core/PositionManager.sol:PositionManager",
        "label": "weth",
        "offset": 0,
        "slot": "12",
        "type": "t_address"
      },
      {
        "astId": 12093,
        "contract": "contracts/core/PositionManager.sol:PositionManager",
        "label": "maxGlobalLongSizes",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 12098,
        "contract": "contracts/core/PositionManager.sol:PositionManager",
        "label": "maxGlobalShortSizes",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 12102,
        "contract": "contracts/core/PositionManager.sol:PositionManager",
        "label": "feeReserves",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 12104,
        "contract": "contracts/core/PositionManager.sol:PositionManager",
        "label": "minLiquidationFee",
        "offset": 0,
        "slot": "16",
        "type": "t_uint256"
      },
      {
        "astId": 12108,
        "contract": "contracts/core/PositionManager.sol:PositionManager",
        "label": "liquidationFees",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_bytes32,t_uint256)"
      },
      {
        "astId": 291,
        "contract": "contracts/core/PositionManager.sol:PositionManager",
        "label": "_IVault",
        "offset": 0,
        "slot": "18",
        "type": "t_contract(IVault)7577"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IVault)7577": {
        "encoding": "inplace",
        "label": "contract IVault",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}