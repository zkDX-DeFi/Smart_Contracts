{
  "language": "Solidity",
  "sources": {
    "@layerzerolabs/solidity-examples/contracts/interfaces/IStargateReceiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.4;\n\ninterface IStargateReceiver {\n    function sgReceive(\n        uint16 _chainId,\n        bytes memory _srcAddress,\n        uint256 _nonce,\n        address _token,\n        uint256 amountLD,\n        bytes memory payload\n    ) external;\n}\n"
    },
    "@layerzerolabs/solidity-examples/contracts/interfaces/IStargateRouter.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.4;\npragma abicoder v2;\n\ninterface IStargateRouter {\n    struct lzTxObj {\n        uint256 dstGasForCall;\n        uint256 dstNativeAmount;\n        bytes dstNativeAddr;\n    }\n\n    function addLiquidity(\n        uint256 _poolId,\n        uint256 _amountLD,\n        address _to\n    ) external;\n\n    function swap(\n        uint16 _dstChainId,\n        uint256 _srcPoolId,\n        uint256 _dstPoolId,\n        address payable _refundAddress,\n        uint256 _amountLD,\n        uint256 _minAmountLD,\n        lzTxObj memory _lzTxParams,\n        bytes calldata _to,\n        bytes calldata _payload\n    ) external payable;\n\n    function redeemRemote(\n        uint16 _dstChainId,\n        uint256 _srcPoolId,\n        uint256 _dstPoolId,\n        address payable _refundAddress,\n        uint256 _amountLP,\n        uint256 _minAmountLD,\n        bytes calldata _to,\n        lzTxObj memory _lzTxParams\n    ) external payable;\n\n    function instantRedeemLocal(\n        uint16 _srcPoolId,\n        uint256 _amountLP,\n        address _to\n    ) external returns (uint256);\n\n    function redeemLocal(\n        uint16 _dstChainId,\n        uint256 _srcPoolId,\n        uint256 _dstPoolId,\n        address payable _refundAddress,\n        uint256 _amountLP,\n        bytes calldata _to,\n        lzTxObj memory _lzTxParams\n    ) external payable;\n\n    function sendCredits(\n        uint16 _dstChainId,\n        uint256 _srcPoolId,\n        uint256 _dstPoolId,\n        address payable _refundAddress\n    ) external payable;\n\n    function quoteLayerZeroFee(\n        uint16 _dstChainId,\n        uint8 _functionType,\n        bytes calldata _toAddress,\n        bytes calldata _transferAndCallPayload,\n        lzTxObj memory _lzTxParams\n    ) external view returns (uint256, uint256);\n}\n"
    },
    "@layerzerolabs/solidity-examples/contracts/token/oft/v2/ICommonOFT.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.5.0;\n\nimport \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\n\n/**\n * @dev Interface of the IOFT core standard\n */\ninterface ICommonOFT is IERC165 {\n\n    struct LzCallParams {\n        address payable refundAddress;\n        address zroPaymentAddress;\n        bytes adapterParams;\n    }\n\n    /**\n     * @dev estimate send token `_tokenId` to (`_dstChainId`, `_toAddress`)\n     * _dstChainId - L0 defined chain id to send tokens too\n     * _toAddress - dynamic bytes array which contains the address to whom you are sending tokens to on the dstChain\n     * _amount - amount of the tokens to transfer\n     * _useZro - indicates to use zro to pay L0 fees\n     * _adapterParam - flexible bytes array to indicate messaging adapter services in L0\n     */\n    function estimateSendFee(uint16 _dstChainId, bytes32 _toAddress, uint _amount, bool _useZro, bytes calldata _adapterParams) external view returns (uint nativeFee, uint zroFee);\n\n    function estimateSendAndCallFee(uint16 _dstChainId, bytes32 _toAddress, uint _amount, bytes calldata _payload, uint64 _dstGasForCall, bool _useZro, bytes calldata _adapterParams) external view returns (uint nativeFee, uint zroFee);\n\n    /**\n     * @dev returns the circulating amount of tokens on current chain\n     */\n    function circulatingSupply() external view returns (uint);\n\n    /**\n     * @dev returns the address of the ERC20 token\n     */\n    function token() external view returns (address);\n}\n"
    },
    "@layerzerolabs/solidity-examples/contracts/token/oft/v2/IOFTV2.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.5.0;\n\nimport \"./ICommonOFT.sol\";\n\n/**\n * @dev Interface of the IOFT core standard\n */\ninterface IOFTV2 is ICommonOFT {\n\n    /**\n     * @dev send `_amount` amount of token to (`_dstChainId`, `_toAddress`) from `_from`\n     * `_from` the owner of token\n     * `_dstChainId` the destination chain identifier\n     * `_toAddress` can be any size depending on the `dstChainId`.\n     * `_amount` the quantity of tokens in wei\n     * `_refundAddress` the address LayerZero refunds if too much message fee is sent\n     * `_zroPaymentAddress` set to address(0x0) if not paying in ZRO (LayerZero Token)\n     * `_adapterParams` is a flexible bytes array to indicate messaging adapter services\n     */\n    function sendFrom(address _from, uint16 _dstChainId, bytes32 _toAddress, uint _amount, LzCallParams calldata _callParams) external payable;\n\n    function sendAndCall(address _from, uint16 _dstChainId, bytes32 _toAddress, uint _amount, bytes calldata _payload, uint64 _dstGasForCall, LzCallParams calldata _callParams) external payable;\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        require(!paused(), \"Pausable: paused\");\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        require(paused(), \"Pausable: not paused\");\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == _ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../extensions/IERC20Permit.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Compatible with tokens that require the approval to be set to\n     * 0 before setting it to a non-zero value.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\n     * Revert on invalid signature.\n     */\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\n        // and not revert is the subcall reverts.\n\n        (bool success, bytes memory returndata) = address(token).call(data);\n        return\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "contracts/omni/interfaces/IStargateRouterETH.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.13;\n\ninterface IStargateRouterETH {\n\n    struct SwapAmount {\n        uint256 amountLD; // the amount, in Local Decimals, to be swapped\n        uint256 minAmountLD; // the minimum amount accepted out on destination\n    }\n\n    struct lzTxObj {\n        uint256 dstGasForCall;\n        uint256 dstNativeAmount;\n        bytes dstNativeAddr;\n    }\n\n    function stargateRouter() external view returns (address);\n\n    function swapETHAndCall(\n        uint16 _dstChainId, // destination Stargate chainId\n        address payable _refundAddress, // refund additional messageFee to this address\n        bytes calldata _toAddress, // the receiver of the destination ETH\n        SwapAmount memory _swapAmount, // the amount and the minimum swap amount\n        lzTxObj memory _lzTxParams, // the LZ tx params\n        bytes calldata _payload // the payload to send to the destination\n    ) external payable;\n}\n"
    },
    "contracts/omni/OmniZkdxStakingERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/security/Pausable.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@layerzerolabs/solidity-examples/contracts/token/oft/v2/IOFTV2.sol\";\nimport \"@layerzerolabs/solidity-examples/contracts/interfaces/IStargateRouter.sol\";\nimport \"@layerzerolabs/solidity-examples/contracts/interfaces/IStargateReceiver.sol\";\n\ncontract OmniZkdxStakingERC20 is ReentrancyGuard, Pausable, Ownable, IStargateReceiver {\n\n    address public stakingToken;\n    address public rewardsToken;\n    using SafeERC20 for IERC20;\n\n    uint256 public duration;\n    uint256 public finishAt;\n    uint256 public updatedAt;\n    uint256 public rewardRate;\n    uint256 public rewardPerTokenStored;\n    mapping(address => uint256) public userRewardPerTokenPaid;\n    mapping(address => uint256) public rewards;\n\n    uint256 public totalSupply;\n    mapping(address => uint256) public balanceOf;\n\n    address public stgRouter;\n    uint256 public stgSlippage;\n    address public lzEndPoint;\n    mapping(uint16 => uint256) public poolIds;\n    mapping(uint16 => address) public remoteStakings;\n    mapping(uint16 => bool) public rewardChainIds;\n    mapping(uint8 => uint256) public gasLookup;\n    uint16 public lzChainId;\n\n    uint8 internal constant TYPE_STAKE = 1;\n    uint8 internal constant TYPE_WITHDRAW = 2;\n    uint8 internal constant TYPE_CLAIM = 3;\n\n    constructor(address _stakingToken, address _rewardToken, uint256 _duration, address _stgRouter,\n        address _lzEndPoint, uint16 _lzChainId, address _owner) {\n        stakingToken = _stakingToken;\n        rewardsToken = _rewardToken;\n        duration = _duration;\n        stgRouter = _stgRouter;\n        lzEndPoint = _lzEndPoint;\n        lzChainId = _lzChainId;\n        stgSlippage = 950;\n        _transferOwnership(_owner);\n    }\n\n    modifier updateReward(address _account) {\n        rewardPerTokenStored = rewardPerToken();\n        updatedAt = lastTimeRewardApplicable();\n\n        if (_account != address(0)) {\n            rewards[_account] = earned(_account);\n            userRewardPerTokenPaid[_account] = rewardPerTokenStored;\n        }\n        _;\n    }\n\n    function stake(uint16 _chainId, uint256 _amount) external payable nonReentrant whenNotPaused {\n        require(rewardChainIds[_chainId], \"OmniZkdxStaking: invalid chainId\");\n        require(_amount > 0, \"OmniZkdxStaking: amount must be bigger than 0\");\n\n        IERC20(stakingToken).safeTransferFrom(msg.sender, address(this), _amount);\n        if (_chainId == lzChainId) {\n            _stake(msg.sender, _amount);\n        } else {\n            IERC20(stakingToken).approve(stgRouter, _amount);\n            IStargateRouter(stgRouter).swap{value: msg.value}(\n                _chainId,\n                poolIds[lzChainId],\n                poolIds[_chainId],\n                payable(msg.sender),\n                _amount,\n                _amount * stgSlippage / 1000,\n                IStargateRouter.lzTxObj(gasLookup[TYPE_STAKE], 0, \"\"),\n                abi.encodePacked(remoteStakings[_chainId]),\n                abi.encodePacked(msg.sender)\n            );\n        }\n    }\n\n    function _stake(address _account, uint256 _amount) internal updateReward(_account) {\n        balanceOf[_account] += _amount;\n        totalSupply += _amount;\n        require(IERC20(stakingToken).balanceOf(address(this)) >= totalSupply, \"OmniZkdxStaking: not enough balance\");\n    }\n\n    function sgReceive(uint16, bytes memory, uint256, address, uint256 amountLD, bytes memory payload) external {\n        require(msg.sender == stgRouter, \"OmniZkdxStaking: only stargate router\");\n        address _account;\n        assembly {\n            _account := mload(add(payload, 20))\n        }\n        _stake(_account, amountLD);\n    }\n\n    function withdraw(uint16 _chainId, uint256 _amount) external payable nonReentrant whenNotPaused updateReward(msg.sender) {\n        require(_amount > 0, \"OmniZkdxStaking: amount must be bigger than 0\");\n        require(balanceOf[msg.sender] >= _amount, \"OmniZkdxStaking: not enough balance\");\n        balanceOf[msg.sender] -= _amount;\n        totalSupply -= _amount;\n\n        if (_chainId == lzChainId) {\n            IERC20(stakingToken).safeTransfer(msg.sender, _amount);\n        } else {\n            IERC20(stakingToken).approve(stgRouter, _amount);\n            IStargateRouter(stgRouter).swap{value: msg.value}(\n                _chainId,\n                poolIds[lzChainId],\n                poolIds[_chainId],\n                payable(msg.sender),\n                _amount,\n                _amount * stgSlippage / 1000,\n                IStargateRouter.lzTxObj(0, 0, \"\"),\n                abi.encodePacked(msg.sender),\n                \"\"\n            );\n        }\n    }\n\n    function claimReward(uint16 _chainId) external payable nonReentrant whenNotPaused updateReward(msg.sender) {\n        _claimReward(_chainId);\n    }\n\n    function _claimReward(uint16 _chainId) internal {\n        uint256 reward = rewards[msg.sender];\n        if (reward > 0) {\n            rewards[msg.sender] = 0;\n            if (_chainId == lzChainId) {\n                IERC20(rewardsToken).transfer(msg.sender, reward);\n            } else {\n                IOFTV2(rewardsToken).sendFrom{value: msg.value}(address(this), _chainId, addrToBytes32(msg.sender),\n                    reward, ICommonOFT.LzCallParams(payable(msg.sender), address(0), \"\"));\n            }\n        }\n    }\n\n    function quoteLayerZeroFee(uint16 _chainId, uint8 _type) external view returns (uint256, uint256) {\n        if (_type == TYPE_STAKE)\n            return IStargateRouter(stgRouter).quoteLayerZeroFee(_chainId, 1, abi.encodePacked(remoteStakings[_chainId]),\n                abi.encodePacked(msg.sender), IStargateRouter.lzTxObj(gasLookup[TYPE_STAKE], 0, \"\"));\n        else if (_type == TYPE_WITHDRAW)\n            return IStargateRouter(stgRouter).quoteLayerZeroFee(_chainId, 1, abi.encodePacked(msg.sender), \"\",\n                IStargateRouter.lzTxObj(0, 0, \"\"));\n        else if (_type == TYPE_CLAIM)\n            return IOFTV2(rewardsToken).estimateSendFee(_chainId, addrToBytes32(msg.sender), 1, false,\n                abi.encodePacked(uint16(1), gasLookup[TYPE_CLAIM]));\n        else revert(\"OmniZkdxStaking: invalid type\");\n    }\n\n    function setRewardsDuration(uint256 _duration) external onlyOwner {\n        duration = _duration;\n    }\n\n    function notifyRewardAmount(uint256 _amount) external onlyOwner updateReward(address(0)) {\n        rewardRate = _amount / duration;\n        require(rewardRate > 0, \"OmniZkdxStaking: reward rate wrong\");\n        require(rewardRate * duration <= IERC20(rewardsToken).balanceOf(address(this)), \"OmniZkdxStaking: reward amount wrong\");\n\n        finishAt = block.timestamp + duration;\n        updatedAt = block.timestamp;\n    }\n\n    function setPaused(bool _paused) external onlyOwner {\n        if (_paused)\n            _pause();\n        else\n            _unpause();\n    }\n\n    function setStgRouter(address _stgRouter) external onlyOwner {\n        stgRouter = _stgRouter;\n    }\n\n    function setLzEndPoint(address _lzEndPoint) external onlyOwner {\n        lzEndPoint = _lzEndPoint;\n    }\n\n    function setRewardChainId(uint16 _chainId, bool _hasReward) external onlyOwner {\n        rewardChainIds[_chainId] = _hasReward;\n    }\n\n    function setPoolIds(uint16[] calldata _chainIds, uint256[] calldata _poolIds) external onlyOwner {\n        require(_chainIds.length == _poolIds.length, \"OmniZkdxStaking: params length wrong\");\n        for (uint256 i = 0; i < _chainIds.length; i++)\n            poolIds[_chainIds[i]] = _poolIds[i];\n    }\n\n    function setRemoteStakings(uint16[] calldata _chainIds, address[] calldata _stakings) external onlyOwner {\n        require(_chainIds.length == _stakings.length, \"OmniZkdxStaking: params length wrong\");\n        for (uint256 i = 0; i < _chainIds.length; i++)\n            remoteStakings[_chainIds[i]] = _stakings[i];\n    }\n\n    function setGasLookup(uint8[] calldata _ops, uint256[] calldata _gas) external onlyOwner {\n        require(_ops.length == _gas.length, \"OmniZkdxStaking: params length wrong\");\n        for (uint256 i = 0; i < _ops.length; i++)\n            gasLookup[_ops[i]] = _gas[i];\n    }\n\n    function _min(uint256 x, uint256 y) private pure returns (uint256) {\n        return x <= y ? x : y;\n    }\n\n    function addrToBytes32(address _address) internal pure returns (bytes32 _bytes32Address) {\n        return bytes32(uint256(uint160(_address)));\n    }\n\n    function lastTimeRewardApplicable() public view returns (uint256) {\n        return _min(finishAt, block.timestamp);\n    }\n\n    function rewardPerToken() public view returns (uint256) {\n        if (totalSupply == 0)\n            return rewardPerTokenStored;\n        return rewardPerTokenStored + (rewardRate * (lastTimeRewardApplicable() - updatedAt) * 1e18) / totalSupply;\n    }\n\n    function earned(address _account) public view returns (uint256) {\n        return ((balanceOf[_account] * (rewardPerToken() - userRewardPerTokenPaid[_account])) / 1e18) + rewards[_account];\n    }\n\n    function endRewards(address _receiver, uint256 _amount) external onlyOwner {\n        require(block.timestamp > finishAt, \"OmniZkdxStaking: not finished yet\");\n        IERC20(rewardsToken).transfer(_receiver, _amount);\n    }\n}\n"
    },
    "contracts/omni/OmniZkdxStakingETH.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/security/Pausable.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@layerzerolabs/solidity-examples/contracts/token/oft/v2/IOFTV2.sol\";\nimport \"@layerzerolabs/solidity-examples/contracts/interfaces/IStargateRouter.sol\";\nimport \"@layerzerolabs/solidity-examples/contracts/interfaces/IStargateReceiver.sol\";\nimport \"./interfaces/IStargateRouterETH.sol\";\n\ncontract OmniZkdxStakingETH is ReentrancyGuard, Pausable, Ownable, IStargateReceiver {\n\n    address public rewardsToken;\n\n    uint256 public duration;\n    uint256 public finishAt;\n    uint256 public updatedAt;\n    uint256 public rewardRate;\n    uint256 public rewardPerTokenStored;\n    mapping(address => uint256) public userRewardPerTokenPaid;\n    mapping(address => uint256) public rewards;\n\n    uint256 public totalSupply;\n    mapping(address => uint256) public balanceOf;\n\n    address public stgRouterETH;\n    uint256 public stgSlippage;\n    address public lzEndPoint;\n    mapping(uint16 => uint256) public poolIds;\n    mapping(uint16 => address) public remoteStakings;\n    mapping(uint16 => bool) public rewardChainIds;\n    mapping(uint8 => uint256) public gasLookup;\n    uint16 public lzChainId;\n\n    uint8 internal constant TYPE_STAKE = 1;\n    uint8 internal constant TYPE_WITHDRAW = 2;\n    uint8 internal constant TYPE_CLAIM = 3;\n\n    constructor(address _rewardToken, uint256 _duration, address _stgRouterETH, address _lzEndPoint, uint16 _lzChainId, address _owner) {\n        rewardsToken = _rewardToken;\n        duration = _duration;\n        stgRouterETH = _stgRouterETH;\n        lzEndPoint = _lzEndPoint;\n        lzChainId = _lzChainId;\n        stgSlippage = 950;\n        _transferOwnership(_owner);\n    }\n\n    modifier updateReward(address _account) {\n        rewardPerTokenStored = rewardPerToken();\n        updatedAt = lastTimeRewardApplicable();\n\n        if (_account != address(0)) {\n            rewards[_account] = earned(_account);\n            userRewardPerTokenPaid[_account] = rewardPerTokenStored;\n        }\n        _;\n    }\n\n    function stake(uint16 _chainId, uint256 _amount) external payable nonReentrant whenNotPaused {\n        require(rewardChainIds[_chainId], \"OmniZkdxStaking: invalid chainId\");\n        require(_amount > 0, \"OmniZkdxStaking: amount must be bigger than 0\");\n        require(msg.value >= _amount, \"OmniZkdxStaking: not enough ETH\");\n\n        if (_chainId == lzChainId) {\n            _stake(msg.sender, _amount);\n        } else {\n            IStargateRouterETH(stgRouterETH).swapETHAndCall{value: msg.value}(\n                _chainId,\n                payable(msg.sender),\n                abi.encodePacked(remoteStakings[_chainId]),\n                IStargateRouterETH.SwapAmount(_amount, _amount * stgSlippage / 1000),\n                IStargateRouterETH.lzTxObj(gasLookup[TYPE_STAKE], 0, \"\"),\n                abi.encodePacked(msg.sender)\n            );\n        }\n    }\n\n    function _stake(address _account, uint256 _amount) internal updateReward(_account) {\n        balanceOf[_account] += _amount;\n        totalSupply += _amount;\n        require(address(this).balance >= totalSupply, \"OmniZkdxStaking: not enough balance\");\n    }\n\n    function sgReceive(uint16, bytes memory, uint256, address, uint256 amountLD, bytes memory payload) external {\n        require(msg.sender == IStargateRouterETH(stgRouterETH).stargateRouter(), \"OmniZkdxStaking: only stargate router\");\n        address _account;\n        assembly {\n            _account := mload(add(payload, 20))\n        }\n        _stake(_account, amountLD);\n    }\n\n    function withdraw(uint16 _chainId, uint256 _amount) external payable nonReentrant whenNotPaused updateReward(msg.sender) {\n        require(_amount > 0, \"OmniZkdxStaking: amount must be bigger than 0\");\n        require(balanceOf[msg.sender] >= _amount, \"OmniZkdxStaking: not enough balance\");\n        balanceOf[msg.sender] -= _amount;\n        totalSupply -= _amount;\n\n        if (_chainId == lzChainId) {\n            _transferOutETH(payable(msg.sender), _amount);\n        } else {\n            IStargateRouterETH(stgRouterETH).swapETHAndCall{value: _amount + msg.value}(\n                _chainId,\n                payable(msg.sender),\n                abi.encodePacked(msg.sender),\n                IStargateRouterETH.SwapAmount(_amount, _amount * stgSlippage / 1000),\n                IStargateRouterETH.lzTxObj(gasLookup[TYPE_WITHDRAW], 0, \"\"),\n                \"\"\n            );\n        }\n    }\n\n    function _transferOutETH(address payable _receiver, uint256 _amount) private {\n        (bool sent,) = _receiver.call{value: _amount}(\"\");\n        require(sent, \"OmniZkdxStaking: failed to send ETH\");\n    }\n\n    function claimReward(uint16 _chainId) external payable nonReentrant whenNotPaused updateReward(msg.sender) {\n        _claimReward(_chainId);\n    }\n\n    function _claimReward(uint16 _chainId) internal {\n        uint256 reward = rewards[msg.sender];\n        if (reward > 0) {\n            rewards[msg.sender] = 0;\n            if (_chainId == lzChainId) {\n                IERC20(rewardsToken).transfer(msg.sender, reward);\n            } else {\n                IOFTV2(rewardsToken).sendFrom{value: msg.value}(address(this), _chainId, addrToBytes32(msg.sender),\n                    reward, ICommonOFT.LzCallParams(payable(msg.sender), address(0), \"\"));\n            }\n        }\n    }\n\n    function quoteLayerZeroFee(uint16 _chainId, uint8 _type) external view returns (uint256, uint256) {\n        address baseRouter = IStargateRouterETH(stgRouterETH).stargateRouter();\n        if (_type == TYPE_STAKE)\n            return IStargateRouter(baseRouter).quoteLayerZeroFee(_chainId, 1, abi.encodePacked(remoteStakings[_chainId]),\n                abi.encodePacked(msg.sender), IStargateRouter.lzTxObj(gasLookup[TYPE_STAKE], 0, \"\"));\n        else if (_type == TYPE_WITHDRAW)\n            return IStargateRouter(baseRouter).quoteLayerZeroFee(_chainId, 1, abi.encodePacked(msg.sender), \"\",\n                IStargateRouter.lzTxObj(0, 0, \"\"));\n        else if (_type == TYPE_CLAIM)\n            return IOFTV2(rewardsToken).estimateSendFee(_chainId, addrToBytes32(msg.sender), 1, false,\n                abi.encodePacked(uint16(1), gasLookup[TYPE_CLAIM]));\n        else revert(\"OmniZkdxStaking: invalid type\");\n    }\n\n    function setRewardsDuration(uint256 _duration) external onlyOwner {\n        duration = _duration;\n    }\n\n    function notifyRewardAmount(uint256 _amount) external onlyOwner updateReward(address(0)) {\n        rewardRate = _amount / duration;\n        require(rewardRate > 0, \"OmniZkdxStaking: reward rate wrong\");\n        require(rewardRate * duration <= IERC20(rewardsToken).balanceOf(address(this)), \"OmniZkdxStaking: reward amount wrong\");\n\n        finishAt = block.timestamp + duration;\n        updatedAt = block.timestamp;\n    }\n\n    function setPaused(bool _paused) external onlyOwner {\n        if (_paused)\n            _pause();\n        else\n            _unpause();\n    }\n\n    function setStgRouterETH(address _stgRouterETH) external onlyOwner {\n        stgRouterETH = _stgRouterETH;\n    }\n\n    function setLzEndPoint(address _lzEndPoint) external onlyOwner {\n        lzEndPoint = _lzEndPoint;\n    }\n\n    function setRewardChainId(uint16 _chainId, bool _hasReward) external onlyOwner {\n        rewardChainIds[_chainId] = _hasReward;\n    }\n\n    function setPoolIds(uint16[] calldata _chainIds, uint256[] calldata _poolIds) external onlyOwner {\n        require(_chainIds.length == _poolIds.length, \"OmniZkdxStaking: params length wrong\");\n        for (uint256 i = 0; i < _chainIds.length; i++)\n            poolIds[_chainIds[i]] = _poolIds[i];\n    }\n\n    function setRemoteStakings(uint16[] calldata _chainIds, address[] calldata _stakings) external onlyOwner {\n        require(_chainIds.length == _stakings.length, \"OmniZkdxStaking: params length wrong\");\n        for (uint256 i = 0; i < _chainIds.length; i++)\n            remoteStakings[_chainIds[i]] = _stakings[i];\n    }\n\n    function setGasLookup(uint8[] calldata _ops, uint256[] calldata _gas) external onlyOwner {\n        require(_ops.length == _gas.length, \"OmniZkdxStaking: params length wrong\");\n        for (uint256 i = 0; i < _ops.length; i++)\n            gasLookup[_ops[i]] = _gas[i];\n    }\n\n    function _min(uint256 x, uint256 y) private pure returns (uint256) {\n        return x <= y ? x : y;\n    }\n\n    function addrToBytes32(address _address) internal pure returns (bytes32 _bytes32Address) {\n        return bytes32(uint256(uint160(_address)));\n    }\n\n    function lastTimeRewardApplicable() public view returns (uint256) {\n        return _min(finishAt, block.timestamp);\n    }\n\n    function rewardPerToken() public view returns (uint256) {\n        if (totalSupply == 0)\n            return rewardPerTokenStored;\n        return rewardPerTokenStored + (rewardRate * (lastTimeRewardApplicable() - updatedAt) * 1e18) / totalSupply;\n    }\n\n    function earned(address _account) public view returns (uint256) {\n        return ((balanceOf[_account] * (rewardPerToken() - userRewardPerTokenPaid[_account])) / 1e18) + rewards[_account];\n    }\n\n    function endRewards(address _receiver, uint256 _amount) external onlyOwner {\n        require(block.timestamp > finishAt, \"OmniZkdxStaking: not finished yet\");\n        IERC20(rewardsToken).transfer(_receiver, _amount);\n    }\n\n    receive() external payable {}\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 100
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}