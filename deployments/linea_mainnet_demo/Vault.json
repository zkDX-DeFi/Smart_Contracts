{
  "address": "0x932C1B63aeda657ec4f30447aF37D27aBDaC7F69",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_router",
          "type": "address"
        }
      ],
      "name": "addRouter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_tokenDiv",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenMul",
          "type": "address"
        }
      ],
      "name": "adjustForDecimals",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "allWhitelistedTokens",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "allWhitelistedTokensLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "allowStaleEquityPrice",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "approvedRouters",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "bufferAmounts",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        }
      ],
      "name": "buyZKUSD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "clearTokenConfig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "cumulativeFundingRates",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_collateralToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_indexToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_collateralDelta",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_sizeDelta",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_isLong",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        }
      ],
      "name": "decreasePosition",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "directPoolDeposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "equityTokens",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "errorController",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "errors",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "feeReserves",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fundingInterval",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fundingRateFactor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_indexToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_size",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_averagePrice",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_isLong",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "_lastIncreasedTime",
          "type": "uint256"
        }
      ],
      "name": "getDelta",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_collateralToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_indexToken",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_isLong",
          "type": "bool"
        }
      ],
      "name": "getEntryFundingRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_zkusdDelta",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_feeBasisPoints",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_taxBasisPoints",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_increment",
          "type": "bool"
        }
      ],
      "name": "getFeeBasisPoints",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_collateralToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_indexToken",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_isLong",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "_size",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_entryFundingRate",
          "type": "uint256"
        }
      ],
      "name": "getFundingFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "getMaxPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "getMinPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_indexToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_size",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_averagePrice",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_isLong",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "_nextPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_sizeDelta",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_lastIncreasedTime",
          "type": "uint256"
        }
      ],
      "name": "getNextAveragePrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "getNextFundingRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_indexToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_nextPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_sizeDelta",
          "type": "uint256"
        }
      ],
      "name": "getNextGlobalShortAveragePrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_collateralToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_indexToken",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_isLong",
          "type": "bool"
        }
      ],
      "name": "getPosition",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_collateralToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_indexToken",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_isLong",
          "type": "bool"
        }
      ],
      "name": "getPositionDelta",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_collateralToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_indexToken",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_isLong",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "_sizeDelta",
          "type": "uint256"
        }
      ],
      "name": "getPositionFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_collateralToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_indexToken",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_isLong",
          "type": "bool"
        }
      ],
      "name": "getPositionKey",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_zkusdAmount",
          "type": "uint256"
        }
      ],
      "name": "getRedemptionAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "getTargetZkusdAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "globalShortAveragePrices",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "globalShortSizes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gov",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "guaranteedUsd",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "hasDynamicFees",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "inManagerMode",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "inPrivateLiquidationMode",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_collateralToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_indexToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_sizeDelta",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_isLong",
          "type": "bool"
        }
      ],
      "name": "increasePosition",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_router",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_zkusd",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_priceFeed",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_liquidationFeeUsd",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_fundingRateFactor",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_stableFundingRateFactor",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isInitialized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isLeverageEnabled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isLiquidator",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isManager",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isSwapEnabled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "lastFundingTimes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_collateralToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_indexToken",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_isLong",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "_feeReceiver",
          "type": "address"
        }
      ],
      "name": "liquidatePosition",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "liquidationFeeUsd",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "marginFeeBasisPoints",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxGasPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "maxGlobalShortSizes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxLeverage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "maxZkusdAmounts",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "minProfitBasisPoints",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minProfitTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mintBurnFeeBasisPoints",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "poolAmounts",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "positions",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "size",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "collateral",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "averagePrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "entryFundingRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserveAmount",
          "type": "uint256"
        },
        {
          "internalType": "int256",
          "name": "realisedPnl",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "lastIncreasedTime",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceFeed",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_router",
          "type": "address"
        }
      ],
      "name": "removeRouter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "reservedAmounts",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "router",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        }
      ],
      "name": "sellZKUSD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_allowStaleEquityPrice",
          "type": "bool"
        }
      ],
      "name": "setAllowStableEquity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "setBufferAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_errorCode",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_error",
          "type": "string"
        }
      ],
      "name": "setError",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_errorController",
          "type": "address"
        }
      ],
      "name": "setErrorController",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_taxBasisPoints",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_stableTaxBasisPoints",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_mintBurnFeeBasisPoints",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_swapFeeBasisPoints",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_stableSwapFeeBasisPoints",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_marginFeeBasisPoints",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_liquidationFeeUsd",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minProfitTime",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_hasDynamicFees",
          "type": "bool"
        }
      ],
      "name": "setFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_fundingInterval",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_fundingRateFactor",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_stableFundingRateFactor",
          "type": "uint256"
        }
      ],
      "name": "setFundingRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_gov",
          "type": "address"
        }
      ],
      "name": "setGov",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_inManagerMode",
          "type": "bool"
        }
      ],
      "name": "setInManagerMode",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_inPrivateLiquidationMode",
          "type": "bool"
        }
      ],
      "name": "setInPrivateLiquidationMode",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_isLeverageEnabled",
          "type": "bool"
        }
      ],
      "name": "setIsLeverageEnabled",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_isSwapEnabled",
          "type": "bool"
        }
      ],
      "name": "setIsSwapEnabled",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_liquidator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_isActive",
          "type": "bool"
        }
      ],
      "name": "setLiquidator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_manager",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_isManager",
          "type": "bool"
        }
      ],
      "name": "setManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maxGasPrice",
          "type": "uint256"
        }
      ],
      "name": "setMaxGasPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "setMaxGlobalShortSize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maxLeverage",
          "type": "uint256"
        }
      ],
      "name": "setMaxLeverage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_minProfitTime",
          "type": "uint256"
        }
      ],
      "name": "setMinProfitTime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_priceFeed",
          "type": "address"
        }
      ],
      "name": "setPriceFeed",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenDecimals",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_tokenWeight",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minProfitBps",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxZkusdAmount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_isStable",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "_isShortable",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "_isEquity",
          "type": "bool"
        }
      ],
      "name": "setTokenConfig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IVaultUtils",
          "name": "_vaultUtils",
          "type": "address"
        }
      ],
      "name": "setVaultUtils",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "setZkusdAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "shortableTokens",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stableFundingRateFactor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stableSwapFeeBasisPoints",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stableTaxBasisPoints",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "stableTokens",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenOut",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        }
      ],
      "name": "swap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapFeeBasisPoints",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "taxBasisPoints",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "tokenBalances",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "tokenDecimals",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "tokenToUsdMin",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "tokenWeights",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalTokenWeights",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_collateralToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_indexToken",
          "type": "address"
        }
      ],
      "name": "updateCumulativeFundingRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newVault",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "upgradeVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_usdAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_price",
          "type": "uint256"
        }
      ],
      "name": "usdToToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_usdAmount",
          "type": "uint256"
        }
      ],
      "name": "usdToTokenMax",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_usdAmount",
          "type": "uint256"
        }
      ],
      "name": "usdToTokenMin",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_collateralToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_indexToken",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_isLong",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "_raise",
          "type": "bool"
        }
      ],
      "name": "validateLiquidation",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vaultUtils",
      "outputs": [
        {
          "internalType": "contract IVaultUtils",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "whitelistedTokenCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "whitelistedTokens",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        }
      ],
      "name": "withdrawFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "zkusd",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "zkusdAmounts",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xf0b62fba1833d6a805844cbf0e3f9320fa7e8d9fe8ce0d9a74c99b2198552f6d",
  "receipt": {
    "to": null,
    "from": "0x3C02EF2F81b2ebcBBd6fDAa3AE3DdF7ed30b1820",
    "contractAddress": "0x932C1B63aeda657ec4f30447aF37D27aBDaC7F69",
    "transactionIndex": 4,
    "gasUsed": "5451617",
    "logsBloom": "0x
    "blockHash": "0x2f4babe481a4ac787115403ba635eca3606d685c276abc26258532f4e4f8981b",
    "transactionHash": "0xf0b62fba1833d6a805844cbf0e3f9320fa7e8d9fe8ce0d9a74c99b2198552f6d",
    "logs": [],
    "blockNumber": 142878,
    "cumulativeGasUsed": "5704984",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "37ac44f49d18bdad205cbe889714e32d",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"}],\"name\":\"addRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tokenDiv\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenMul\",\"type\":\"address\"}],\"name\":\"adjustForDecimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allWhitelistedTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allWhitelistedTokensLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allowStaleEquityPrice\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"approvedRouters\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"bufferAmounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"buyZKUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"clearTokenConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"cumulativeFundingRates\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_collateralToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_indexToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_collateralDelta\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sizeDelta\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isLong\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"decreasePosition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"directPoolDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"equityTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"errorController\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"errors\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"feeReserves\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundingInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundingRateFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_indexToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_size\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_averagePrice\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isLong\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_lastIncreasedTime\",\"type\":\"uint256\"}],\"name\":\"getDelta\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collateralToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_indexToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isLong\",\"type\":\"bool\"}],\"name\":\"getEntryFundingRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_zkusdDelta\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_feeBasisPoints\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_taxBasisPoints\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_increment\",\"type\":\"bool\"}],\"name\":\"getFeeBasisPoints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_collateralToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_indexToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isLong\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_size\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_entryFundingRate\",\"type\":\"uint256\"}],\"name\":\"getFundingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getMaxPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getMinPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_indexToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_size\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_averagePrice\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isLong\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_nextPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sizeDelta\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lastIncreasedTime\",\"type\":\"uint256\"}],\"name\":\"getNextAveragePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getNextFundingRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_indexToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_nextPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sizeDelta\",\"type\":\"uint256\"}],\"name\":\"getNextGlobalShortAveragePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_collateralToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_indexToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isLong\",\"type\":\"bool\"}],\"name\":\"getPosition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_collateralToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_indexToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isLong\",\"type\":\"bool\"}],\"name\":\"getPositionDelta\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_collateralToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_indexToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isLong\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_sizeDelta\",\"type\":\"uint256\"}],\"name\":\"getPositionFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_collateralToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_indexToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isLong\",\"type\":\"bool\"}],\"name\":\"getPositionKey\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_zkusdAmount\",\"type\":\"uint256\"}],\"name\":\"getRedemptionAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getTargetZkusdAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"globalShortAveragePrices\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"globalShortSizes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gov\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"guaranteedUsd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hasDynamicFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inManagerMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inPrivateLiquidationMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_collateralToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_indexToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_sizeDelta\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isLong\",\"type\":\"bool\"}],\"name\":\"increasePosition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_zkusd\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_priceFeed\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_liquidationFeeUsd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fundingRateFactor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stableFundingRateFactor\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isInitialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isLeverageEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isLiquidator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isManager\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isSwapEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastFundingTimes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_collateralToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_indexToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isLong\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"_feeReceiver\",\"type\":\"address\"}],\"name\":\"liquidatePosition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidationFeeUsd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marginFeeBasisPoints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxGasPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"maxGlobalShortSizes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxLeverage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"maxZkusdAmounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"minProfitBasisPoints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minProfitTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintBurnFeeBasisPoints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"poolAmounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"positions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"averagePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"entryFundingRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveAmount\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"realisedPnl\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"lastIncreasedTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceFeed\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"}],\"name\":\"removeRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"reservedAmounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"sellZKUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_allowStaleEquityPrice\",\"type\":\"bool\"}],\"name\":\"setAllowStableEquity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setBufferAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_errorCode\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_error\",\"type\":\"string\"}],\"name\":\"setError\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_errorController\",\"type\":\"address\"}],\"name\":\"setErrorController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_taxBasisPoints\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stableTaxBasisPoints\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_mintBurnFeeBasisPoints\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_swapFeeBasisPoints\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stableSwapFeeBasisPoints\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_marginFeeBasisPoints\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_liquidationFeeUsd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minProfitTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_hasDynamicFees\",\"type\":\"bool\"}],\"name\":\"setFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fundingInterval\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fundingRateFactor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stableFundingRateFactor\",\"type\":\"uint256\"}],\"name\":\"setFundingRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gov\",\"type\":\"address\"}],\"name\":\"setGov\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_inManagerMode\",\"type\":\"bool\"}],\"name\":\"setInManagerMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_inPrivateLiquidationMode\",\"type\":\"bool\"}],\"name\":\"setInPrivateLiquidationMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_isLeverageEnabled\",\"type\":\"bool\"}],\"name\":\"setIsLeverageEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_isSwapEnabled\",\"type\":\"bool\"}],\"name\":\"setIsSwapEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_liquidator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isActive\",\"type\":\"bool\"}],\"name\":\"setLiquidator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isManager\",\"type\":\"bool\"}],\"name\":\"setManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxGasPrice\",\"type\":\"uint256\"}],\"name\":\"setMaxGasPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setMaxGlobalShortSize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxLeverage\",\"type\":\"uint256\"}],\"name\":\"setMaxLeverage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minProfitTime\",\"type\":\"uint256\"}],\"name\":\"setMinProfitTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_priceFeed\",\"type\":\"address\"}],\"name\":\"setPriceFeed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenDecimals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenWeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minProfitBps\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxZkusdAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isStable\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_isShortable\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_isEquity\",\"type\":\"bool\"}],\"name\":\"setTokenConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IVaultUtils\",\"name\":\"_vaultUtils\",\"type\":\"address\"}],\"name\":\"setVaultUtils\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setZkusdAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"shortableTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stableFundingRateFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stableSwapFeeBasisPoints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stableTaxBasisPoints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stableTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenOut\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapFeeBasisPoints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taxBasisPoints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenDecimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"tokenToUsdMin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenWeights\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalTokenWeights\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collateralToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_indexToken\",\"type\":\"address\"}],\"name\":\"updateCumulativeFundingRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newVault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"upgradeVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_usdAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"usdToToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_usdAmount\",\"type\":\"uint256\"}],\"name\":\"usdToTokenMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_usdAmount\",\"type\":\"uint256\"}],\"name\":\"usdToTokenMin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_collateralToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_indexToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isLong\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_raise\",\"type\":\"bool\"}],\"name\":\"validateLiquidation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultUtils\",\"outputs\":[{\"internalType\":\"contract IVaultUtils\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whitelistedTokenCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelistedTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"withdrawFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"zkusd\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"zkusdAmounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/core/Vault.sol\":\"Vault\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"contracts/core/Vault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\nimport \\\"./settings/VaultInternal.sol\\\";\\n\\ncontract Vault is VaultInternal {\\n    constructor() public {\\n        gov = msg.sender;\\n    }\\n    function initialize(address _router, address _zkusd, address _priceFeed, uint256 _liquidationFeeUsd, uint256 _fundingRateFactor, uint256 _stableFundingRateFactor) external {\\n        _onlyGov();\\n        _validate(!isInitialized, 1);\\n        isInitialized = true;\\n        router = _router;\\n        zkusd = _zkusd;\\n        priceFeed = _priceFeed;\\n        liquidationFeeUsd = _liquidationFeeUsd;\\n        fundingRateFactor = _fundingRateFactor;\\n        stableFundingRateFactor = _stableFundingRateFactor;\\n    }\\n\\n    function clearTokenConfig(address _token) external override {\\n        _onlyGov();\\n        _validate(whitelistedTokens[_token], 13);\\n        totalTokenWeights = totalTokenWeights.sub(tokenWeights[_token]);\\n        delete whitelistedTokens[_token];\\n        delete tokenDecimals[_token];\\n        delete tokenWeights[_token];\\n        delete minProfitBasisPoints[_token];\\n        delete maxZkusdAmounts[_token];\\n        delete stableTokens[_token];\\n        delete shortableTokens[_token];\\n        whitelistedTokenCount = whitelistedTokenCount.sub(1);\\n    }\\n\\n    function withdrawFees(address _token, address _receiver) external override returns (uint256) {\\n        _onlyGov();\\n        uint256 amount = feeReserves[_token];\\n        if (amount == 0) {return 0;}\\n        feeReserves[_token] = 0;\\n        _transferOut(_token, amount, _receiver);\\n        return amount;\\n    }\\n\\n    function directPoolDeposit(address _token) external override nonReentrant {\\n        _validate(whitelistedTokens[_token], 14);\\n        uint256 tokenAmount = _transferIn(_token);\\n        _validate(tokenAmount > 0, 15);\\n        _increasePoolAmount(_token, tokenAmount);\\n        emit Events.DirectPoolDeposit(_token, tokenAmount);\\n    }\\n\\n    function buyZKUSD(address _token, address _receiver) external override nonReentrant returns (uint256) {\\n        _validateManager();\\n        _validate(whitelistedTokens[_token], 16);\\n        uint256 tokenAmount = _transferIn(_token);\\n        _validate(tokenAmount > 0, 17);\\n        updateCumulativeFundingRate(_token, _token);\\n        uint256 price = getMinPrice(_token);\\n        uint256 zkusdAmount = tokenAmount.mul(price).div(Constants.PRICE_PRECISION);\\n        zkusdAmount = adjustForDecimals(zkusdAmount, _token, zkusd);\\n        _validate(zkusdAmount > 0, 18);\\n        uint256 feeBasisPoints = vaultUtils.getBuyZkusdFeeBasisPoints(_token, zkusdAmount);\\n        uint256 amountAfterFees = _collectSwapFees(_token, tokenAmount, feeBasisPoints);\\n        uint256 mintAmount = amountAfterFees.mul(price).div(Constants.PRICE_PRECISION);\\n        mintAmount = adjustForDecimals(mintAmount, _token, zkusd);\\n        _increaseZkusdAmount(_token, mintAmount);\\n        _increasePoolAmount(_token, amountAfterFees);\\n        IZKUSD(zkusd).mint(_receiver, mintAmount);\\n        emit Events.BuyZKUSD(_receiver, _token, tokenAmount, mintAmount, feeBasisPoints);\\n        return mintAmount;\\n    }\\n\\n    function sellZKUSD(address _token, address _receiver) external override nonReentrant returns (uint256) {\\n        _validateManager();\\n        _validate(whitelistedTokens[_token], 19);\\n        uint256 zkusdAmount = _transferIn(zkusd);\\n        _validate(zkusdAmount > 0, 20);\\n        updateCumulativeFundingRate(_token, _token);\\n        uint256 redemptionAmount = getRedemptionAmount(_token, zkusdAmount);\\n        _validate(redemptionAmount > 0, 21);\\n        _decreaseZkusdAmount(_token, zkusdAmount);\\n        _decreasePoolAmount(_token, redemptionAmount);\\n        IZKUSD(zkusd).burn(address(this), zkusdAmount);\\n        _updateTokenBalance(zkusd);\\n\\n        uint256 feeBasisPoints = vaultUtils.getSellZkusdFeeBasisPoints(_token, zkusdAmount);\\n        uint256 amountOut = _collectSwapFees(_token, redemptionAmount, feeBasisPoints);\\n        _validate(amountOut > 0, 22);\\n        _transferOut(_token, amountOut, _receiver);\\n        emit Events.SellZKUSD(_receiver, _token, zkusdAmount, amountOut, feeBasisPoints);\\n        return amountOut;\\n    }\\n\\n    function swap(address _tokenIn, address _tokenOut, address _receiver) external override nonReentrant returns (uint256) {\\n        _validate(isSwapEnabled, 23);\\n        _validate(whitelistedTokens[_tokenIn], 24);\\n        _validate(whitelistedTokens[_tokenOut], 25);\\n        _validate(_tokenIn != _tokenOut, 26);\\n        updateCumulativeFundingRate(_tokenIn, _tokenIn);\\n        updateCumulativeFundingRate(_tokenOut, _tokenOut);\\n        uint256 amountIn = _transferIn(_tokenIn);\\n        _validate(amountIn > 0, 27);\\n        uint256 priceIn = getMinPrice(_tokenIn);\\n        uint256 priceOut = getMaxPrice(_tokenOut);\\n        uint256 amountOut = amountIn.mul(priceIn).div(priceOut);\\n        amountOut = adjustForDecimals(amountOut, _tokenIn, _tokenOut);\\n        uint256 zkusdAmount = amountIn.mul(priceIn).div(Constants.PRICE_PRECISION);\\n        zkusdAmount = adjustForDecimals(zkusdAmount, _tokenIn, zkusd);\\n        uint256 feeBasisPoints = vaultUtils.getSwapFeeBasisPoints(_tokenIn, _tokenOut, zkusdAmount);\\n        uint256 amountOutAfterFees = _collectSwapFees(_tokenOut, amountOut, feeBasisPoints);\\n\\n        _increaseZkusdAmount(_tokenIn, zkusdAmount);\\n        _decreaseZkusdAmount(_tokenOut, zkusdAmount);\\n        _increasePoolAmount(_tokenIn, amountIn);\\n        _decreasePoolAmount(_tokenOut, amountOut);\\n        _validateBufferAmount(_tokenOut);\\n        _transferOut(_tokenOut, amountOutAfterFees, _receiver);\\n        emit Events.Swap(_receiver, _tokenIn, _tokenOut, amountIn, amountOut, amountOutAfterFees, feeBasisPoints);\\n        return amountOutAfterFees;\\n    }\\n\\n    function increasePosition(address _account, address _collateralToken, address _indexToken, uint256 _sizeDelta, bool _isLong) external override nonReentrant {\\n        _validate(isLeverageEnabled, 28);\\n        _validateGasPrice();\\n        _validateRouter(_account);\\n        _validateTokens(_collateralToken, _indexToken, _isLong);\\n        vaultUtils.validateIncreasePosition(_account, _collateralToken, _indexToken, _sizeDelta, _isLong);\\n        updateCumulativeFundingRate(_collateralToken, _indexToken);\\n        bytes32 key = getPositionKey(_account, _collateralToken, _indexToken, _isLong);\\n        DataTypes.Position storage position = positions[key];\\n        uint256 price = _isLong ? getMaxPrice(_indexToken) : getMinPrice(_indexToken);\\n        if (position.size == 0) {\\n            position.averagePrice = price;\\n        }\\n        if (position.size > 0 && _sizeDelta > 0) {\\n            position.averagePrice = getNextAveragePrice(_indexToken, position.size, position.averagePrice, _isLong, price, _sizeDelta, position.lastIncreasedTime);\\n        }\\n\\n        uint256 fee = _collectMarginFees(_account, _collateralToken, _indexToken, _isLong, _sizeDelta, position.size, position.entryFundingRate);\\n        uint256 collateralDelta = _transferIn(_collateralToken);\\n        uint256 collateralDeltaUsd = tokenToUsdMin(_collateralToken, collateralDelta);\\n\\n        position.collateral = position.collateral.add(collateralDeltaUsd);\\n        _validate(position.collateral >= fee, 29);\\n        position.collateral = position.collateral.sub(fee);\\n        position.entryFundingRate = getEntryFundingRate(_collateralToken, _indexToken, _isLong);\\n        position.size = position.size.add(_sizeDelta);\\n        position.lastIncreasedTime = block.timestamp;\\n\\n        _validate(position.size > 0, 30);\\n        _validatePosition(position.size, position.collateral);\\n        validateLiquidation(_account, _collateralToken, _indexToken, _isLong, true);\\n\\n        uint256 reserveDelta = usdToTokenMax(_collateralToken, _sizeDelta);\\n        position.reserveAmount = position.reserveAmount.add(reserveDelta);\\n        _increaseReservedAmount(_collateralToken, reserveDelta);\\n        if (_isLong) {\\n            _increaseGuaranteedUsd(_collateralToken, _sizeDelta.add(fee));\\n            _decreaseGuaranteedUsd(_collateralToken, collateralDeltaUsd);\\n            _increasePoolAmount(_collateralToken, collateralDelta);\\n            _decreasePoolAmount(_collateralToken, usdToTokenMin(_collateralToken, fee));\\n        } else {\\n            if (globalShortSizes[_indexToken] == 0) {\\n                globalShortAveragePrices[_indexToken] = price;\\n            } else {\\n                globalShortAveragePrices[_indexToken] = getNextGlobalShortAveragePrice(_indexToken, price, _sizeDelta);\\n            }\\n\\n            _increaseGlobalShortSize(_indexToken, _sizeDelta);\\n        }\\n        emit Events.IncreasePosition(key, _account, _collateralToken, _indexToken, collateralDeltaUsd, _sizeDelta, _isLong, price, fee);\\n        emit Events.UpdatePosition(key, position.size, position.collateral, position.averagePrice, position.entryFundingRate, position.reserveAmount, position.realisedPnl, price);\\n    }\\n\\n    function decreasePosition(address _account, address _collateralToken, address _indexToken, uint256 _collateralDelta, uint256 _sizeDelta, bool _isLong, address _receiver) external override nonReentrant returns (uint256) {\\n        _validateGasPrice();\\n        _validateRouter(_account);\\n        return _decreasePosition(_account, _collateralToken, _indexToken, _collateralDelta, _sizeDelta, _isLong, _receiver);\\n    }\\n\\n    function liquidatePosition(address _account, address _collateralToken, address _indexToken, bool _isLong, address _feeReceiver) external override nonReentrant {\\n        if (inPrivateLiquidationMode) {\\n            _validate(isLiquidator[msg.sender], 34);\\n        }\\n        updateCumulativeFundingRate(_collateralToken, _indexToken);\\n        bytes32 key = getPositionKey(_account, _collateralToken, _indexToken, _isLong);\\n        DataTypes.Position memory position = positions[key];\\n        _validate(position.size > 0, 35);\\n        (uint256 liquidationState, uint256 marginFees) = validateLiquidation(_account, _collateralToken, _indexToken, _isLong, false);\\n        _validate(liquidationState != 0, 36);\\n        if (liquidationState == 2) {\\n            _decreasePosition(_account, _collateralToken, _indexToken, 0, position.size, _isLong, _account);\\n            return;\\n        }\\n        uint256 feeTokens = usdToTokenMin(_collateralToken, marginFees);\\n        feeReserves[_collateralToken] = feeReserves[_collateralToken].add(feeTokens);\\n        emit Events.CollectMarginFees(_collateralToken, marginFees, feeTokens);\\n        _decreaseReservedAmount(_collateralToken, position.reserveAmount);\\n\\n        if (_isLong) {\\n            _decreaseGuaranteedUsd(_collateralToken, position.size.sub(position.collateral));\\n            _decreasePoolAmount(_collateralToken, usdToTokenMin(_collateralToken, marginFees));\\n        }\\n        uint256 markPrice = _isLong ? getMinPrice(_indexToken) : getMaxPrice(_indexToken);\\n        emit Events.LiquidatePosition(key, _account, _collateralToken, _indexToken, _isLong, position.size, position.collateral, position.reserveAmount, position.realisedPnl, markPrice);\\n        if (!_isLong && marginFees < position.collateral) {\\n            uint256 remainingCollateral = position.collateral.sub(marginFees);\\n            _increasePoolAmount(_collateralToken, usdToTokenMin(_collateralToken, remainingCollateral));\\n        }\\n        if (!_isLong) {\\n            _decreaseGlobalShortSize(_indexToken, position.size);\\n        }\\n        delete positions[key];\\n        _decreasePoolAmount(_collateralToken, usdToTokenMin(_collateralToken, liquidationFeeUsd));\\n        _transferOut(_collateralToken, usdToTokenMin(_collateralToken, liquidationFeeUsd), _feeReceiver);\\n    }\\n\\n    function updateCumulativeFundingRate(address _collateralToken, address _indexToken) public {\\n        bool shouldUpdate = vaultUtils.updateCumulativeFundingRate(_collateralToken, _indexToken);\\n        if (!shouldUpdate) {\\n            return;\\n        }\\n        if (lastFundingTimes[_collateralToken] == 0) {\\n            lastFundingTimes[_collateralToken] = block.timestamp.div(fundingInterval).mul(fundingInterval);\\n            return;\\n        }\\n        if (lastFundingTimes[_collateralToken].add(fundingInterval) > block.timestamp) {\\n            return;\\n        }\\n        uint256 fundingRate = getNextFundingRate(_collateralToken);\\n        cumulativeFundingRates[_collateralToken] = cumulativeFundingRates[_collateralToken].add(fundingRate);\\n        lastFundingTimes[_collateralToken] = block.timestamp.div(fundingInterval).mul(fundingInterval);\\n        emit Events.UpdateFundingRate(_collateralToken, cumulativeFundingRates[_collateralToken]);\\n    }\\n\\n    function _decreasePosition(address _account, address _collateralToken, address _indexToken, uint256 _collateralDelta, uint256 _sizeDelta, bool _isLong, address _receiver) internal returns (uint256) {\\n        vaultUtils.validateDecreasePosition(_account, _collateralToken, _indexToken, _collateralDelta, _sizeDelta, _isLong, _receiver);\\n        updateCumulativeFundingRate(_collateralToken, _indexToken);\\n        bytes32 key = getPositionKey(_account, _collateralToken, _indexToken, _isLong);\\n        DataTypes.Position storage position = positions[key];\\n        _validate(position.size > 0, 31);\\n        _validate(position.size >= _sizeDelta, 32);\\n        _validate(position.collateral >= _collateralDelta, 33);\\n\\n        uint256 collateral = position.collateral;\\n        {\\n            uint256 reserveDelta = position.reserveAmount.mul(_sizeDelta).div(position.size);\\n            position.reserveAmount = position.reserveAmount.sub(reserveDelta);\\n            _decreaseReservedAmount(_collateralToken, reserveDelta);\\n        }\\n        (uint256 usdOut, uint256 usdOutAfterFee) = _reduceCollateral(_account, _collateralToken, _indexToken, _collateralDelta, _sizeDelta, _isLong);\\n        if (position.size != _sizeDelta) {\\n            position.entryFundingRate = getEntryFundingRate(_collateralToken, _indexToken, _isLong);\\n            position.size = position.size.sub(_sizeDelta);\\n            _validatePosition(position.size, position.collateral);\\n            validateLiquidation(_account, _collateralToken, _indexToken, _isLong, true);\\n            if (_isLong) {\\n                _increaseGuaranteedUsd(_collateralToken, collateral.sub(position.collateral));\\n                _decreaseGuaranteedUsd(_collateralToken, _sizeDelta);\\n            }\\n            uint256 price = _isLong ? getMinPrice(_indexToken) : getMaxPrice(_indexToken);\\n            emit Events.DecreasePosition(key, _account, _collateralToken, _indexToken, _collateralDelta, _sizeDelta, _isLong, price, usdOut.sub(usdOutAfterFee));\\n            emit Events.UpdatePosition(key, position.size, position.collateral, position.averagePrice, position.entryFundingRate, position.reserveAmount, position.realisedPnl, price);\\n        } else {\\n            if (_isLong) {\\n                _increaseGuaranteedUsd(_collateralToken, collateral);\\n                _decreaseGuaranteedUsd(_collateralToken, _sizeDelta);\\n            }\\n            uint256 price = _isLong ? getMinPrice(_indexToken) : getMaxPrice(_indexToken);\\n            emit Events.DecreasePosition(key, _account, _collateralToken, _indexToken, _collateralDelta, _sizeDelta, _isLong, price, usdOut.sub(usdOutAfterFee));\\n            emit Events.ClosePosition(key, position.size, position.collateral, position.averagePrice, position.entryFundingRate, position.reserveAmount, position.realisedPnl);\\n            delete positions[key];\\n        }\\n        if (!_isLong) {\\n            _decreaseGlobalShortSize(_indexToken, _sizeDelta);\\n        }\\n        if (usdOut > 0) {\\n            if (_isLong) {\\n                _decreasePoolAmount(_collateralToken, usdToTokenMin(_collateralToken, usdOut));\\n            }\\n            uint256 amountOutAfterFees = usdToTokenMin(_collateralToken, usdOutAfterFee);\\n            _transferOut(_collateralToken, amountOutAfterFees, _receiver);\\n            return amountOutAfterFees;\\n        }\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xc9742603f33d95bb3bbc5276d4c81aab4b714718566e3c514d8dd6662db24b64\",\"license\":\"MIT\"},\"contracts/core/interfaces/IVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\nimport \\\"./IVaultUtils.sol\\\";\\ninterface IVault {\\n    function withdrawFees(address _token, address _receiver) external returns (uint256);\\n    function directPoolDeposit(address _token) external;\\n    function buyZKUSD(address _token, address _receiver) external returns (uint256);\\n    function sellZKUSD(address _token, address _receiver) external returns (uint256);\\n    function swap(address _tokenIn, address _tokenOut, address _receiver) external returns (uint256);\\n    function increasePosition(\\n        address _account, address _collateralToken,\\n        address _indexToken, uint256 _sizeDelta, bool _isLong) external;\\n    function decreasePosition(\\n        address _account, address _collateralToken,\\n        address _indexToken, uint256 _collateralDelta,\\n        uint256 _sizeDelta, bool _isLong, address _receiver) external returns (uint256);\\n    function validateLiquidation(\\n        address _account, address _collateralToken,\\n        address _indexToken, bool _isLong, bool _raise) external view returns (uint256, uint256);\\n    function liquidatePosition(\\n        address _account, address _collateralToken,\\n        address _indexToken, bool _isLong, address _feeReceiver) external;\\n\\n    function tokenToUsdMin(address _token, uint256 _tokenAmount) external view returns (uint256);\\n    function priceFeed() external view returns (address);\\n    function fundingRateFactor() external view returns (uint256);\\n    function stableFundingRateFactor() external view returns (uint256);\\n    function cumulativeFundingRates(address _token) external view returns (uint256);\\n    function getNextFundingRate(address _token) external view returns (uint256);\\n    function getFeeBasisPoints(\\n        address _token, uint256 _zkusdDelta,\\n        uint256 _feeBasisPoints, uint256 _taxBasisPoints, bool _increment) external view returns (uint256);\\n    function liquidationFeeUsd() external view returns (uint256);\\n    function taxBasisPoints() external view returns (uint256);\\n    function stableTaxBasisPoints() external view returns (uint256);\\n    function mintBurnFeeBasisPoints() external view returns (uint256);\\n    function swapFeeBasisPoints() external view returns (uint256);\\n    function stableSwapFeeBasisPoints() external view returns (uint256);\\n    function marginFeeBasisPoints() external view returns (uint256);\\n    function allWhitelistedTokensLength() external view returns (uint256);\\n    function allWhitelistedTokens(uint256) external view returns (address);\\n    function whitelistedTokens(address _token) external view returns (bool);\\n    function stableTokens(address _token) external view returns (bool);\\n    function shortableTokens(address _token) external view returns (bool);\\n    function equityTokens(address _token) external view returns (bool);\\n    function feeReserves(address _token) external view returns (uint256);\\n    function globalShortSizes(address _token) external view returns (uint256);\\n    function globalShortAveragePrices(address _token) external view returns (uint256);\\n    function maxGlobalShortSizes(address _token) external view returns (uint256);\\n    function tokenDecimals(address _token) external view returns (uint256);\\n    function tokenWeights(address _token) external view returns (uint256);\\n    function guaranteedUsd(address _token) external view returns (uint256);\\n    function poolAmounts(address _token) external view returns (uint256);\\n    function bufferAmounts(address _token) external view returns (uint256);\\n    function reservedAmounts(address _token) external view returns (uint256);\\n    function zkusdAmounts(address _token) external view returns (uint256);\\n    function maxZkusdAmounts(address _token) external view returns (uint256);\\n    function getRedemptionAmount(address _token, uint256 _zkusdAmount) external view returns (uint256);\\n    function getMaxPrice(address _token) external view returns (uint256);\\n    function getMinPrice(address _token) external view returns (uint256);\\n    function getDelta(\\n        address _indexToken, uint256 _size,\\n        uint256 _averagePrice, bool _isLong, uint256 _lastIncreasedTime) external view returns (bool, uint256);\\n    function getPosition(\\n        address _account, address _collateralToken,\\n        address _indexToken, bool _isLong) external view returns (uint256, uint256, uint256, uint256, uint256, uint256, bool, uint256);\\n    function isInitialized() external view returns (bool);\\n    function isSwapEnabled() external view returns (bool);\\n    function isLeverageEnabled() external view returns (bool);\\n    function router() external view returns (address);\\n    function zkusd() external view returns (address);\\n    function gov() external view returns (address);\\n    function whitelistedTokenCount() external view returns (uint256);\\n    function maxLeverage() external view returns (uint256);\\n    function minProfitTime() external view returns (uint256);\\n    function hasDynamicFees() external view returns (bool);\\n    function fundingInterval() external view returns (uint256);\\n    function totalTokenWeights() external view returns (uint256);\\n    function getTargetZkusdAmount(address _token) external view returns (uint256);\\n    function inManagerMode() external view returns (bool);\\n    function inPrivateLiquidationMode() external view returns (bool);\\n    function maxGasPrice() external view returns (uint256);\\n    function approvedRouters(address _account, address _router) external view returns (bool);\\n    function isLiquidator(address _account) external view returns (bool);\\n    function isManager(address _account) external view returns (bool);\\n    function minProfitBasisPoints(address _token) external view returns (uint256);\\n    function tokenBalances(address _token) external view returns (uint256);\\n    function lastFundingTimes(address _token) external view returns (uint256);\\n\\n    function setMaxLeverage(uint256 _maxLeverage) external;\\n    function setInManagerMode(bool _inManagerMode) external;\\n    function setManager(address _manager, bool _isManager) external;\\n    function setIsSwapEnabled(bool _isSwapEnabled) external;\\n    function setIsLeverageEnabled(bool _isLeverageEnabled) external;\\n    function setMaxGasPrice(uint256 _maxGasPrice) external;\\n    function setZkusdAmount(address _token, uint256 _amount) external;\\n    function setBufferAmount(address _token, uint256 _amount) external;\\n    function setMaxGlobalShortSize(address _token, uint256 _amount) external;\\n    function setInPrivateLiquidationMode(bool _inPrivateLiquidationMode) external;\\n    function setLiquidator(address _liquidator, bool _isActive) external;\\n    function setFundingRate(\\n        uint256 _fundingInterval, uint256 _fundingRateFactor,\\n        uint256 _stableFundingRateFactor) external;\\n    function setFees(\\n        uint256 _taxBasisPoints, uint256 _stableTaxBasisPoints,\\n        uint256 _mintBurnFeeBasisPoints, uint256 _swapFeeBasisPoints,\\n        uint256 _stableSwapFeeBasisPoints, uint256 _marginFeeBasisPoints,\\n        uint256 _liquidationFeeUsd, uint256 _minProfitTime, bool _hasDynamicFees) external;\\n\\n    function setTokenConfig(\\n        address _token, uint256 _tokenDecimals,\\n        uint256 _redemptionBps, uint256 _minProfitBps,\\n        uint256 _maxZkusdAmount, bool _isStable,\\n        bool _isShortable, bool _isEquity) external;\\n    function clearTokenConfig(address _token) external;\\n    function setMinProfitTime(uint256 _minProfitTime) external;\\n    function setPriceFeed(address _priceFeed) external;\\n    function setVaultUtils(IVaultUtils _vaultUtils) external;\\n    function setError(uint256 _errorCode, string calldata _error) external;\\n    function setAllowStableEquity(bool _allowStaleEquityPrice) external;\\n}\\n\",\"keccak256\":\"0x6a84766ec5f961bd7a73ecd7f83b7ca93b66aee3ef80a8e3ec77893d2cd5da42\",\"license\":\"MIT\"},\"contracts/core/interfaces/IVaultPriceFeed.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\npragma experimental ABIEncoderV2;\\n\\ninterface IVaultPriceFeed {\\n\\n    function getPrice(address _token, bool _maximise, bool _fresh) external view returns (uint256);\\n    function getUpdateFee(bytes[] calldata _updateData) external view returns (uint256);\\n    function updatePriceFeeds(bytes[] calldata _priceData) external payable;\\n}\\n\",\"keccak256\":\"0x5596570dcc8db061a66584fef7574f3e31d40c19b15151aa7fe3f9faf953bf06\",\"license\":\"MIT\"},\"contracts/core/interfaces/IVaultUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\ninterface IVaultUtils {\\n    function updateCumulativeFundingRate(\\n        address _collateralToken, address _indexToken) external returns (bool);\\n    function validateIncreasePosition(\\n        address _account, address _collateralToken,\\n        address _indexToken, uint256 _sizeDelta, bool _isLong) external view;\\n    function validateDecreasePosition(\\n        address _account, address _collateralToken,\\n        address _indexToken, uint256 _collateralDelta,\\n        uint256 _sizeDelta, bool _isLong, address _receiver) external view;\\n    function validateLiquidation(\\n        address _account, address _collateralToken,\\n        address _indexToken, bool _isLong, bool _raise) external view returns (uint256, uint256);\\n    function getEntryFundingRate(\\n        address _collateralToken, address _indexToken, bool _isLong) external view returns (uint256);\\n    function getPositionFee(\\n        address _account, address _collateralToken,\\n        address _indexToken, bool _isLong, uint256 _sizeDelta) external view returns (uint256);\\n    function getFundingFee(\\n        address _account, address _collateralToken,\\n        address _indexToken, bool _isLong,\\n        uint256 _size, uint256 _entryFundingRate) external view returns (uint256);\\n    function getBuyZkusdFeeBasisPoints(\\n        address _token, uint256 _zkusdAmount) external view returns (uint256);\\n    function getSellZkusdFeeBasisPoints(\\n        address _token, uint256 _zkusdAmount) external view returns (uint256);\\n    function getSwapFeeBasisPoints(\\n        address _tokenIn, address _tokenOut, uint256 _zkusdAmount) external view returns (uint256);\\n    function getFeeBasisPoints(\\n        address _token, uint256 _zkusdDelta,\\n        uint256 _feeBasisPoints, uint256 _taxBasisPoints,\\n        bool _increment) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x1efeae040950453176db5cf84c290223d6ebd4542e7457c7fe35c0d023483522\",\"license\":\"MIT\"},\"contracts/core/settings/VaultInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\nimport \\\"./VaultSettings.sol\\\";\\n\\nabstract contract VaultInternal is VaultSettings {\\n\\n    function _reduceCollateral(\\n        address _account, address _collateralToken,\\n        address _indexToken, uint256 _collateralDelta,\\n        uint256 _sizeDelta, bool _isLong) internal returns (uint256, uint256) {\\n\\n        bytes32 key = getPositionKey(_account, _collateralToken, _indexToken, _isLong);\\n        DataTypes.Position storage position = positions[key];\\n        uint256 fee = _collectMarginFees(_account, _collateralToken, _indexToken, _isLong, _sizeDelta, position.size, position.entryFundingRate);\\n        bool hasProfit;\\n        uint256 adjustedDelta;\\n        {\\n            (bool _hasProfit, uint256 delta) = getDelta(_indexToken, position.size, position.averagePrice, _isLong, position.lastIncreasedTime);\\n            hasProfit = _hasProfit;\\n            adjustedDelta = _sizeDelta.mul(delta).div(position.size);\\n        }\\n        uint256 usdOut;\\n        if (hasProfit && adjustedDelta > 0) {\\n            usdOut = adjustedDelta;\\n            position.realisedPnl = position.realisedPnl + int256(adjustedDelta);\\n            if (!_isLong) {\\n                uint256 tokenAmount = usdToTokenMin(_collateralToken, adjustedDelta);\\n                _decreasePoolAmount(_collateralToken, tokenAmount);\\n            }\\n        }\\n        if (!hasProfit && adjustedDelta > 0) {\\n            position.collateral = position.collateral.sub(adjustedDelta);\\n            if (!_isLong) {\\n                uint256 tokenAmount = usdToTokenMin(_collateralToken, adjustedDelta);\\n                _increasePoolAmount(_collateralToken, tokenAmount);\\n            }\\n            position.realisedPnl = position.realisedPnl - int256(adjustedDelta);\\n        }\\n        if (_collateralDelta > 0) {\\n            usdOut = usdOut.add(_collateralDelta);\\n            position.collateral = position.collateral.sub(_collateralDelta);\\n        }\\n        if (position.size == _sizeDelta) {\\n            usdOut = usdOut.add(position.collateral);\\n            position.collateral = 0;\\n        }\\n        uint256 usdOutAfterFee = usdOut;\\n        if (usdOut > fee) {\\n            usdOutAfterFee = usdOut.sub(fee);\\n        } else {\\n            position.collateral = position.collateral.sub(fee);\\n            if (_isLong) {\\n                uint256 feeTokens = usdToTokenMin(_collateralToken, fee);\\n                _decreasePoolAmount(_collateralToken, feeTokens);\\n            }\\n        }\\n        emit Events.UpdatePnl(key, hasProfit, adjustedDelta);\\n        return (usdOut, usdOutAfterFee);\\n    }\\n\\n    function _collectSwapFees(address _token, uint256 _amount, uint256 _feeBasisPoints) internal returns (uint256) {\\n        uint256 afterFeeAmount = _amount.mul(Constants.BASIS_POINTS_DIVISOR.sub(_feeBasisPoints)).div(Constants.BASIS_POINTS_DIVISOR);\\n        uint256 feeAmount = _amount.sub(afterFeeAmount);\\n        feeReserves[_token] = feeReserves[_token].add(feeAmount);\\n        emit Events.CollectSwapFees(_token, tokenToUsdMin(_token, feeAmount), feeAmount);\\n        return afterFeeAmount;\\n    }\\n\\n    function _collectMarginFees(address _account, address _collateralToken, address _indexToken, bool _isLong, uint256 _sizeDelta, uint256 _size, uint256 _entryFundingRate) internal returns (uint256) {\\n        uint256 feeUsd = getPositionFee(_account, _collateralToken, _indexToken, _isLong, _sizeDelta);\\n        uint256 fundingFee = getFundingFee(_account, _collateralToken, _indexToken, _isLong, _size, _entryFundingRate);\\n        feeUsd = feeUsd.add(fundingFee);\\n        uint256 feeTokens = usdToTokenMin(_collateralToken, feeUsd);\\n        feeReserves[_collateralToken] = feeReserves[_collateralToken].add(feeTokens);\\n        emit Events.CollectMarginFees(_collateralToken, feeUsd, feeTokens);\\n        return feeUsd;\\n    }\\n\\n    function _transferIn(address _token) internal returns (uint256) {\\n        uint256 prevBalance = tokenBalances[_token];\\n        uint256 nextBalance = IERC20(_token).balanceOf(address(this));\\n        tokenBalances[_token] = nextBalance;\\n        return nextBalance.sub(prevBalance);\\n    }\\n\\n    function _transferOut(address _token, uint256 _amount, address _receiver) internal {\\n        IERC20(_token).safeTransfer(_receiver, _amount);\\n        tokenBalances[_token] = IERC20(_token).balanceOf(address(this));\\n    }\\n\\n    function _updateTokenBalance(address _token) internal {\\n        uint256 nextBalance = IERC20(_token).balanceOf(address(this));\\n        tokenBalances[_token] = nextBalance;\\n    }\\n\\n    function _increasePoolAmount(address _token, uint256 _amount) internal {\\n        poolAmounts[_token] = poolAmounts[_token].add(_amount);\\n        uint256 balance = IERC20(_token).balanceOf(address(this));\\n        _validate(poolAmounts[_token] <= balance, 49);\\n        emit Events.IncreasePoolAmount(_token, _amount);\\n    }\\n\\n    function _decreasePoolAmount(address _token, uint256 _amount) internal {\\n        poolAmounts[_token] = poolAmounts[_token].sub(_amount, Errors.VAULT_POOLAMOUNT_EXCEEDED);\\n        _validate(reservedAmounts[_token] <= poolAmounts[_token], 50);\\n        emit Events.DecreasePoolAmount(_token, _amount);\\n    }\\n\\n    function _increaseReservedAmount(address _token, uint256 _amount) internal {\\n        reservedAmounts[_token] = reservedAmounts[_token].add(_amount);\\n        _validate(reservedAmounts[_token] <= poolAmounts[_token], 52);\\n        emit Events.IncreaseReservedAmount(_token, _amount);\\n    }\\n\\n    function _decreaseReservedAmount(address _token, uint256 _amount) internal {\\n        reservedAmounts[_token] = reservedAmounts[_token].sub(_amount, Errors.VAULT_INSUFFICIENT_RESERVE);\\n        emit Events.DecreaseReservedAmount(_token, _amount);\\n    }\\n\\n    function _increaseGuaranteedUsd(address _token, uint256 _usdAmount) internal {\\n        guaranteedUsd[_token] = guaranteedUsd[_token].add(_usdAmount);\\n        emit Events.IncreaseGuaranteedUsd(_token, _usdAmount);\\n    }\\n\\n    function _decreaseGuaranteedUsd(address _token, uint256 _usdAmount) internal {\\n        guaranteedUsd[_token] = guaranteedUsd[_token].sub(_usdAmount);\\n        emit Events.DecreaseGuaranteedUsd(_token, _usdAmount);\\n    }\\n\\n    function _increaseGlobalShortSize(address _token, uint256 _amount) internal {\\n        globalShortSizes[_token] = globalShortSizes[_token].add(_amount);\\n        uint256 maxSize = maxGlobalShortSizes[_token];\\n        if (maxSize != 0) {\\n            require(globalShortSizes[_token] <= maxSize, Errors.VAULT_MAX_SHORTS_EXCEEDED);\\n        }\\n    }\\n\\n    function _decreaseGlobalShortSize(address _token, uint256 _amount) internal {\\n        uint256 size = globalShortSizes[_token];\\n        if (_amount > size) {\\n            globalShortSizes[_token] = 0;\\n            return;\\n        }\\n        globalShortSizes[_token] = size.sub(_amount);\\n    }\\n\\n    function _validateManager() internal view {\\n        if (inManagerMode) {\\n            _validate(isManager[msg.sender], 54);\\n        }\\n    }\\n\\n    function _validateGasPrice() internal view {\\n        if (maxGasPrice == 0) {return;}\\n        _validate(tx.gasprice <= maxGasPrice, 55);\\n    }\\n\\n    function _validatePosition(uint256 _size, uint256 _collateral) internal view {\\n        if (_size == 0) {\\n            _validate(_collateral == 0, 39);\\n            return;\\n        }\\n        _validate(_size >= _collateral, 40);\\n    }\\n\\n    function _validateRouter(address _account) internal view {\\n        if (msg.sender == _account) {return;}\\n        if (msg.sender == router) {return;}\\n        _validate(approvedRouters[_account][msg.sender], 41);\\n    }\\n\\n    function _validateTokens(address _collateralToken, address _indexToken, bool _isLong) internal view {\\n        if (_isLong) {\\n            _validate(_collateralToken == _indexToken, 42);\\n            _validate(whitelistedTokens[_collateralToken], 43);\\n            _validate(!stableTokens[_collateralToken], 44);\\n            return;\\n        }\\n        _validate(whitelistedTokens[_collateralToken], 45);\\n        _validate(stableTokens[_collateralToken], 46);\\n        _validate(!stableTokens[_indexToken], 47);\\n        _validate(shortableTokens[_indexToken], 48);\\n    }\\n\\n    function _validateBufferAmount(address _token) internal view {\\n        if (poolAmounts[_token] < bufferAmounts[_token]) {\\n            revert(Errors.VAULT_POOLAMOUNT_BUFFER);\\n        }\\n    }\\n\\n    function getNextGlobalShortAveragePrice(address _indexToken, uint256 _nextPrice, uint256 _sizeDelta) public view returns (uint256) {\\n        uint256 size = globalShortSizes[_indexToken];\\n        uint256 averagePrice = globalShortAveragePrices[_indexToken];\\n        uint256 priceDelta = averagePrice > _nextPrice ? averagePrice.sub(_nextPrice) : _nextPrice.sub(averagePrice);\\n        uint256 delta = size.mul(priceDelta).div(averagePrice);\\n        bool hasProfit = averagePrice > _nextPrice;\\n        uint256 nextSize = size.add(_sizeDelta);\\n        uint256 divisor = hasProfit ? nextSize.sub(delta) : nextSize.add(delta);\\n        return _nextPrice.mul(nextSize).div(divisor);\\n    }\\n\\n    function getNextAveragePrice(address _indexToken, uint256 _size, uint256 _averagePrice, bool _isLong, uint256 _nextPrice, uint256 _sizeDelta, uint256 _lastIncreasedTime) public view returns (uint256) {\\n        (bool hasProfit, uint256 delta) = getDelta(_indexToken, _size, _averagePrice, _isLong, _lastIncreasedTime);\\n        uint256 nextSize = _size.add(_sizeDelta);\\n        uint256 divisor;\\n        if (_isLong) {\\n            divisor = hasProfit ? nextSize.add(delta) : nextSize.sub(delta);\\n        } else {\\n            divisor = hasProfit ? nextSize.sub(delta) : nextSize.add(delta);\\n        }\\n        return _nextPrice.mul(nextSize).div(divisor);\\n    }\\n\\n    function getNextFundingRate(address _token) public override view returns (uint256) {\\n        if (lastFundingTimes[_token].add(fundingInterval) > block.timestamp) {return 0;}\\n        uint256 intervals = block.timestamp.sub(lastFundingTimes[_token]).div(fundingInterval);\\n        uint256 poolAmount = poolAmounts[_token];\\n        if (poolAmount == 0) {return 0;}\\n        uint256 _fundingRateFactor = stableTokens[_token] ? stableFundingRateFactor : fundingRateFactor;\\n        return _fundingRateFactor.mul(reservedAmounts[_token]).mul(intervals).div(poolAmount);\\n    }\\n\\n    function getEntryFundingRate(address _collateralToken, address _indexToken, bool _isLong) public view returns (uint256) {\\n        return vaultUtils.getEntryFundingRate(_collateralToken, _indexToken, _isLong);\\n    }\\n\\n    function getTargetZkusdAmount(address _token) public override view returns (uint256) {\\n        uint256 supply = IERC20(zkusd).totalSupply();\\n        if (supply == 0) {return 0;}\\n        uint256 weight = tokenWeights[_token];\\n        return weight.mul(supply).div(totalTokenWeights);\\n    }\\n\\n    function getRedemptionAmount(address _token, uint256 _zkusdAmount) public override view returns (uint256) {\\n        uint256 price = getMaxPrice(_token);\\n        uint256 redemptionAmount = _zkusdAmount.mul(Constants.PRICE_PRECISION).div(price);\\n        return adjustForDecimals(redemptionAmount, zkusd, _token);\\n    }\\n\\n    function getFeeBasisPoints(address _token, uint256 _zkusdDelta, uint256 _feeBasisPoints, uint256 _taxBasisPoints, bool _increment) public override view returns (uint256) {\\n        return vaultUtils.getFeeBasisPoints(_token, _zkusdDelta, _feeBasisPoints, _taxBasisPoints, _increment);\\n    }\\n\\n    function getPositionKey(address _account, address _collateralToken, address _indexToken, bool _isLong) public pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(_account, _collateralToken, _indexToken, _isLong));\\n    }\\n\\n    function getPosition(address _account, address _collateralToken, address _indexToken, bool _isLong) public override view returns (uint256, uint256, uint256, uint256, uint256, uint256, bool, uint256) {\\n        bytes32 key = getPositionKey(_account, _collateralToken, _indexToken, _isLong);\\n        DataTypes.Position memory position = positions[key];\\n        uint256 realisedPnl = position.realisedPnl > 0 ? uint256(position.realisedPnl) : uint256(- position.realisedPnl);\\n        return (position.size, position.collateral, position.averagePrice, position.entryFundingRate, position.reserveAmount, realisedPnl, position.realisedPnl >= 0, position.lastIncreasedTime);\\n    }\\n\\n    function getPositionDelta(address _account, address _collateralToken, address _indexToken, bool _isLong) public view returns (bool, uint256) {\\n        bytes32 key = getPositionKey(_account, _collateralToken, _indexToken, _isLong);\\n        DataTypes.Position memory position = positions[key];\\n        return getDelta(_indexToken, position.size, position.averagePrice, _isLong, position.lastIncreasedTime);\\n    }\\n\\n    function getFundingFee(address _account, address _collateralToken, address _indexToken, bool _isLong, uint256 _size, uint256 _entryFundingRate) public view returns (uint256) {\\n        return vaultUtils.getFundingFee(_account, _collateralToken, _indexToken, _isLong, _size, _entryFundingRate);\\n    }\\n\\n    function getMaxPrice(address _token) public override view returns (uint256) {\\n        if (equityTokens[_token] && allowStaleEquityPrice)\\n            return IVaultPriceFeed(priceFeed).getPrice(_token, true, false);\\n        return IVaultPriceFeed(priceFeed).getPrice(_token, true, true);\\n    }\\n\\n    function getMinPrice(address _token) public override view returns (uint256) {\\n        if (equityTokens[_token] && allowStaleEquityPrice)\\n            return IVaultPriceFeed(priceFeed).getPrice(_token, false, false);\\n        return IVaultPriceFeed(priceFeed).getPrice(_token, false, true);\\n    }\\n\\n    function getDelta(address _indexToken, uint256 _size, uint256 _averagePrice, bool _isLong, uint256 _lastIncreasedTime) public override view returns (bool, uint256) {\\n        _validate(_averagePrice > 0, 38);\\n        uint256 price = _isLong ? getMinPrice(_indexToken) : getMaxPrice(_indexToken);\\n        uint256 priceDelta = _averagePrice > price ? _averagePrice.sub(price) : price.sub(_averagePrice);\\n        uint256 delta = _size.mul(priceDelta).div(_averagePrice);\\n        bool hasProfit;\\n        if (_isLong) {\\n            hasProfit = price > _averagePrice;\\n        } else {\\n            hasProfit = _averagePrice > price;\\n        }\\n        uint256 minBps = block.timestamp > _lastIncreasedTime.add(minProfitTime) ? 0 : minProfitBasisPoints[_indexToken];\\n        if (hasProfit && delta.mul(Constants.BASIS_POINTS_DIVISOR) <= _size.mul(minBps)) {\\n            delta = 0;\\n        }\\n        return (hasProfit, delta);\\n    }\\n\\n    function usdToTokenMax(address _token, uint256 _usdAmount) public view returns (uint256) {\\n        if (_usdAmount == 0) {return 0;}\\n        return usdToToken(_token, _usdAmount, getMinPrice(_token));\\n    }\\n\\n    function usdToTokenMin(address _token, uint256 _usdAmount) public view returns (uint256) {\\n        if (_usdAmount == 0) {return 0;}\\n        return usdToToken(_token, _usdAmount, getMaxPrice(_token));\\n    }\\n\\n    function tokenToUsdMin(address _token, uint256 _tokenAmount) public override view returns (uint256) {\\n        if (_tokenAmount == 0) {return 0;}\\n        uint256 price = getMinPrice(_token);\\n        uint256 decimals = tokenDecimals[_token];\\n        return _tokenAmount.mul(price).div(10 ** decimals);\\n    }\\n\\n    function usdToToken(address _token, uint256 _usdAmount, uint256 _price) public view returns (uint256) {\\n        if (_usdAmount == 0) {return 0;}\\n        uint256 decimals = tokenDecimals[_token];\\n        return _usdAmount.mul(10 ** decimals).div(_price);\\n    }\\n\\n    function adjustForDecimals(uint256 _amount, address _tokenDiv, address _tokenMul) public view returns (uint256) {\\n        uint256 decimalsDiv = _tokenDiv == zkusd ? Constants.ZKUSD_DECIMALS : tokenDecimals[_tokenDiv];\\n        uint256 decimalsMul = _tokenMul == zkusd ? Constants.ZKUSD_DECIMALS : tokenDecimals[_tokenMul];\\n        return _amount.mul(10 ** decimalsMul).div(10 ** decimalsDiv);\\n    }\\n\\n    function validateLiquidation(address _account, address _collateralToken, address _indexToken, bool _isLong, bool _raise) override public view returns (uint256, uint256) {\\n        return vaultUtils.validateLiquidation(_account, _collateralToken, _indexToken, _isLong, _raise);\\n    }\\n\\n    function getPositionFee(address _account, address _collateralToken, address _indexToken, bool _isLong, uint256 _sizeDelta) public view returns (uint256) {\\n        return vaultUtils.getPositionFee(_account, _collateralToken, _indexToken, _isLong, _sizeDelta);\\n    }\\n\\n    function allWhitelistedTokensLength() external override view returns (uint256) {\\n        return allWhitelistedTokens.length;\\n    }\\n    /* funcs */\\n    function addRouter(address _router) external {\\n        approvedRouters[msg.sender][_router] = true;\\n    }\\n\\n    function removeRouter(address _router) external {\\n        approvedRouters[msg.sender][_router] = false;\\n    }\\n\\n    function upgradeVault(address _newVault, address _token, uint256 _amount) external {\\n        _onlyGov();\\n        IERC20(_token).safeTransfer(_newVault, _amount);\\n    }\\n}\\n\",\"keccak256\":\"0xb4bdfffa73639c2859f79f3cff969219927dc7dfcb3ddf995b3a33205e6ded77\",\"license\":\"MIT\"},\"contracts/core/settings/VaultSettings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\nimport \\\"../storage/VaultStorage.sol\\\";\\n\\nabstract contract VaultSettings is VaultStorage {\\n\\n    function _onlyGov() internal view {\\n        _validate(msg.sender == gov, 53);\\n    }\\n\\n    function setVaultUtils(IVaultUtils _vaultUtils) external override {\\n        _onlyGov();\\n        vaultUtils = _vaultUtils;\\n    }\\n\\n    function setErrorController(address _errorController) external {\\n        _onlyGov();\\n        errorController = _errorController;\\n    }\\n\\n    function setError(uint256 _errorCode, string calldata _error) external override {\\n        require(msg.sender == errorController, Errors.VAULT_INVALID_ERRORCONTROLLER);\\n        errors[_errorCode] = _error;\\n    }\\n\\n    function setInManagerMode(bool _inManagerMode) external override {\\n        _onlyGov();\\n        inManagerMode = _inManagerMode;\\n    }\\n\\n    function setManager(address _manager, bool _isManager) external override {\\n        _onlyGov();\\n        isManager[_manager] = _isManager;\\n    }\\n\\n    function setInPrivateLiquidationMode(bool _inPrivateLiquidationMode) external override {\\n        _onlyGov();\\n        inPrivateLiquidationMode = _inPrivateLiquidationMode;\\n    }\\n\\n    function setLiquidator(address _liquidator, bool _isActive) external override {\\n        _onlyGov();\\n        isLiquidator[_liquidator] = _isActive;\\n    }\\n\\n    function setIsSwapEnabled(bool _isSwapEnabled) external override {\\n        _onlyGov();\\n        isSwapEnabled = _isSwapEnabled;\\n    }\\n\\n    function setIsLeverageEnabled(bool _isLeverageEnabled) external override {\\n        _onlyGov();\\n        isLeverageEnabled = _isLeverageEnabled;\\n    }\\n\\n    function setMaxGasPrice(uint256 _maxGasPrice) external override {\\n        _onlyGov();\\n        maxGasPrice = _maxGasPrice;\\n    }\\n\\n    function setGov(address _gov) external {\\n        _onlyGov();\\n        gov = _gov;\\n    }\\n\\n    function setPriceFeed(address _priceFeed) external override {\\n        _onlyGov();\\n        priceFeed = _priceFeed;\\n    }\\n\\n    function setMaxLeverage(uint256 _maxLeverage) external override {\\n        _onlyGov();\\n        _validate(_maxLeverage > Constants.MIN_LEVERAGE, 2);\\n        maxLeverage = _maxLeverage;\\n    }\\n\\n    function setBufferAmount(address _token, uint256 _amount) external override {\\n        _onlyGov();\\n        bufferAmounts[_token] = _amount;\\n    }\\n\\n    function setMaxGlobalShortSize(address _token, uint256 _amount) external override {\\n        _onlyGov();\\n        maxGlobalShortSizes[_token] = _amount;\\n    }\\n\\n    function setFees(\\n        uint256 _taxBasisPoints,\\n        uint256 _stableTaxBasisPoints,\\n        uint256 _mintBurnFeeBasisPoints,\\n        uint256 _swapFeeBasisPoints,\\n        uint256 _stableSwapFeeBasisPoints,\\n        uint256 _marginFeeBasisPoints,\\n        uint256 _liquidationFeeUsd,\\n        uint256 _minProfitTime,\\n        bool _hasDynamicFees\\n    ) external override {\\n\\n        _onlyGov();\\n        _validate(_taxBasisPoints <= Constants.MAX_FEE_BASIS_POINTS, 3);\\n        _validate(_stableTaxBasisPoints <= Constants.MAX_FEE_BASIS_POINTS, 4);\\n        _validate(_mintBurnFeeBasisPoints <= Constants.MAX_FEE_BASIS_POINTS, 5);\\n        _validate(_swapFeeBasisPoints <= Constants.MAX_FEE_BASIS_POINTS, 6);\\n        _validate(_stableSwapFeeBasisPoints <= Constants.MAX_FEE_BASIS_POINTS, 7);\\n        _validate(_marginFeeBasisPoints <= Constants.MAX_FEE_BASIS_POINTS, 8);\\n        _validate(_liquidationFeeUsd <= Constants.MAX_LIQUIDATION_FEE_USD, 9);\\n        taxBasisPoints = _taxBasisPoints;\\n        stableTaxBasisPoints = _stableTaxBasisPoints;\\n        mintBurnFeeBasisPoints = _mintBurnFeeBasisPoints;\\n        swapFeeBasisPoints = _swapFeeBasisPoints;\\n        stableSwapFeeBasisPoints = _stableSwapFeeBasisPoints;\\n        marginFeeBasisPoints = _marginFeeBasisPoints;\\n        liquidationFeeUsd = _liquidationFeeUsd;\\n        minProfitTime = _minProfitTime;\\n        hasDynamicFees = _hasDynamicFees;\\n    }\\n\\n    function setFundingRate(uint256 _fundingInterval, uint256 _fundingRateFactor, uint256 _stableFundingRateFactor) external override {\\n        _onlyGov();\\n        fundingInterval = _fundingInterval;\\n        fundingRateFactor = _fundingRateFactor;\\n        stableFundingRateFactor = _stableFundingRateFactor;\\n    }\\n\\n    function setTokenConfig(\\n        address _token,\\n        uint256 _tokenDecimals,\\n        uint256 _tokenWeight,\\n        uint256 _minProfitBps,\\n        uint256 _maxZkusdAmount,\\n        bool _isStable,\\n        bool _isShortable,\\n        bool _isEquity\\n    ) external override {\\n        _onlyGov();\\n        if (!whitelistedTokens[_token]) {\\n            whitelistedTokenCount = whitelistedTokenCount.add(1);\\n            allWhitelistedTokens.push(_token);\\n        }\\n        uint256 _totalTokenWeights = totalTokenWeights;\\n        _totalTokenWeights = _totalTokenWeights.sub(tokenWeights[_token]);\\n\\n        whitelistedTokens[_token] = true;\\n        tokenDecimals[_token] = _tokenDecimals;\\n        tokenWeights[_token] = _tokenWeight;\\n        minProfitBasisPoints[_token] = _minProfitBps;\\n        maxZkusdAmounts[_token] = _maxZkusdAmount;\\n        stableTokens[_token] = _isStable;\\n        shortableTokens[_token] = _isShortable;\\n        equityTokens[_token] = _isEquity;\\n        totalTokenWeights = _totalTokenWeights.add(_tokenWeight);\\n    }\\n\\n    function setMinProfitTime(uint256 _minProfitTime) external override {\\n        _onlyGov();\\n        minProfitTime = _minProfitTime;\\n    }\\n\\n    function setZkusdAmount(address _token, uint256 _amount) external override {\\n        _onlyGov();\\n        uint256 zkusdAmount = zkusdAmounts[_token];\\n        if (_amount > zkusdAmount) {\\n            _increaseZkusdAmount(_token, _amount.sub(zkusdAmount));\\n            return;\\n        }\\n        _decreaseZkusdAmount(_token, zkusdAmount.sub(_amount));\\n    }\\n\\n    function setAllowStableEquity(bool _allowStaleEquityPrice) external override {\\n        _onlyGov();\\n        allowStaleEquityPrice = _allowStaleEquityPrice;\\n    }\\n\\n    function _validate(bool _condition, uint256 _errorCode) internal view {\\n        require(_condition, errors[_errorCode]);\\n    }\\n\\n    function _increaseZkusdAmount(address _token, uint256 _amount) internal {\\n        zkusdAmounts[_token] = zkusdAmounts[_token].add(_amount);\\n        uint256 maxZkusdAmount = maxZkusdAmounts[_token];\\n        if (maxZkusdAmount != 0) {\\n            _validate(zkusdAmounts[_token] <= maxZkusdAmount, 51);\\n        }\\n        emit Events.IncreaseZkusdAmount(_token, _amount);\\n    }\\n\\n    function _decreaseZkusdAmount(address _token, uint256 _amount) internal {\\n        uint256 value = zkusdAmounts[_token];\\n        if (value <= _amount) {\\n            zkusdAmounts[_token] = 0;\\n            emit Events.DecreaseZkusdAmount(_token, value);\\n            return;\\n        }\\n        zkusdAmounts[_token] = value.sub(_amount);\\n        emit Events.DecreaseZkusdAmount(_token, _amount);\\n    }\\n}\\n\",\"keccak256\":\"0x53bc8a00227714621fae61a0eadf71370ed2e611bb4efb702efbc21cda10731b\",\"license\":\"MIT\"},\"contracts/core/storage/VaultAggregators.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\nimport \\\"../../libraries/math/SafeMath.sol\\\";\\nimport \\\"../../libraries/token/IERC20.sol\\\";\\nimport \\\"../../libraries/token/SafeERC20.sol\\\";\\nimport \\\"../../libraries/DataTypes.sol\\\";\\nimport \\\"../../libraries/Constants.sol\\\";\\nimport \\\"../../libraries/Events.sol\\\";\\nimport \\\"../../libraries/Errors.sol\\\";\\nimport \\\"../../libraries/utils/ReentrancyGuard.sol\\\";\\nimport \\\"../interfaces/IVaultUtils.sol\\\";\\nimport \\\"../interfaces/IVault.sol\\\";\\nimport \\\"../interfaces/IVaultPriceFeed.sol\\\";\\nimport \\\"../../tokens/interfaces/IZKUSD.sol\\\";\\n\\nabstract contract VaultAggregators is IVault, ReentrancyGuard {\\n\\n}\\n\",\"keccak256\":\"0xa52cbbe594ac5e814dc23cf5d73988578ad86f7285a4097c92f735034882b4d8\",\"license\":\"MIT\"},\"contracts/core/storage/VaultStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\nimport \\\"./VaultAggregators.sol\\\";\\n\\nabstract contract VaultStorage is VaultAggregators {\\n    /* constructor */\\n    address public override gov;\\n    bool public override isInitialized;\\n    address public override router;\\n    address public override zkusd;\\n    address public override priceFeed;\\n    uint256 public override liquidationFeeUsd;\\n    uint256 public override fundingRateFactor;\\n    uint256 public override stableFundingRateFactor;\\n    /* Logic */\\n    mapping(bytes32 => DataTypes.Position) public positions;\\n    mapping(address => uint256) public override poolAmounts;\\n    mapping(address => uint256) public override reservedAmounts;\\n    uint256 public override maxLeverage = 100 * 10000; // 50x\\n    uint256 public override taxBasisPoints = 50; // 0.5%\\n    uint256 public override stableTaxBasisPoints = 20; // 0.2%\\n    uint256 public override mintBurnFeeBasisPoints = 30; // 0.3%\\n    uint256 public override swapFeeBasisPoints = 30; // 0.3%\\n    uint256 public override stableSwapFeeBasisPoints = 4; // 0.04%\\n    uint256 public override marginFeeBasisPoints = 10; // 0.1%\\n    uint256 public override fundingInterval = 1 hours;\\n    uint256 public override whitelistedTokenCount;\\n    uint256 public override maxGasPrice;\\n    uint256 public override minProfitTime;\\n    bool public override isSwapEnabled = true;\\n    bool public override isLeverageEnabled = true;\\n    bool public override hasDynamicFees = false;\\n    bool public override inManagerMode = false;\\n    bool public override inPrivateLiquidationMode = true;\\n    IVaultUtils public vaultUtils;\\n    address public errorController;\\n    mapping(address => mapping(address => bool)) public override approvedRouters;\\n    mapping(address => bool) public override isLiquidator;\\n    mapping(address => bool) public override isManager;\\n    mapping(address => uint256) public override minProfitBasisPoints;\\n    mapping(address => bool) public override stableTokens;\\n    mapping(address => bool) public override shortableTokens;\\n    mapping(address => bool) public override equityTokens;\\n    mapping(address => uint256) public override bufferAmounts;\\n    mapping(address => uint256) public override guaranteedUsd;\\n    mapping(address => uint256) public override cumulativeFundingRates;\\n    mapping(address => uint256) public override lastFundingTimes;\\n    mapping(address => uint256) public override feeReserves;\\n    mapping(address => uint256) public override globalShortSizes;\\n    mapping(address => uint256) public override globalShortAveragePrices;\\n    mapping(address => uint256) public override maxGlobalShortSizes;\\n    mapping(uint256 => string) public errors;\\n    /* Token Settings*/\\n    mapping(address => uint256) public override tokenDecimals;\\n    mapping(address => uint256) public override tokenBalances;\\n    mapping(address => uint256) public override tokenWeights;\\n    uint256 public override totalTokenWeights;\\n    /* others */\\n    address[] public override allWhitelistedTokens;\\n    mapping(address => bool) public override whitelistedTokens;\\n    mapping(address => uint256) public override zkusdAmounts;\\n    mapping(address => uint256) public override maxZkusdAmounts;\\n    bool public allowStaleEquityPrice;\\n    /* misc */\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n}\\n\",\"keccak256\":\"0x50bed3f2a4a9caf0fd605f9bd61c66c0b2f851b3e4e2586a165c9e4cfbadb176\",\"license\":\"MIT\"},\"contracts/libraries/Constants.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\nlibrary Constants {\\n    /* BASE */\\n    string public constant ZKDX_ID = \\\"ZKDX\\\";\\n    string public constant ZKDX_TOKEN_NAME = \\\"ZKDX\\\";\\n    string public constant ZKDX_TOKEN_SYMBOL = \\\"ZKDX\\\";\\n    string public constant ZKDLP_ID = \\\"ZKDLP\\\";\\n    string public constant ZKDLP_TOKEN_NAME = \\\"ZKDLP\\\";\\n    string public constant ZKDLP_TOKEN_SYMBOL = \\\"ZKDLP\\\";\\n\\n    string public constant ZKUSD_TOKEN_NAME = \\\"ZKUSD\\\";\\n    string public constant ZKUSD_TOKEN_SYMBOL = \\\"ZKUSD\\\";\\n    /* VaultPriceFeed.sol */\\n    uint256 public constant PRICE_PRECISION = 10 ** 30;\\n    uint256 public constant ONE_USD = PRICE_PRECISION;\\n    uint256 public constant BASIS_POINTS_DIVISOR = 10000;\\n    uint256 public constant MAX_SPREAD_BASIS_POINTS = 50;\\n    uint256 public constant MAX_ADJUSTMENT_INTERVAL = 2 hours;\\n    uint256 public constant MAX_ADJUSTMENT_BASIS_POINTS = 20;\\n    address constant internal FLAG_ARBITRUM_SEQ_OFFLINE = address(bytes20(bytes32(uint256(keccak256(\\\"chainlink.flags.arbitrum-seq-offline\\\")) - 1)));\\n    /* VaultUtils.sol */\\n    uint256 public constant FUNDING_RATE_PRECISION = 1000000;\\n\\n    /* Vault.sol*/\\n    uint256 public constant MIN_LEVERAGE = 10000; // 1x\\n    uint256 public constant ZKUSD_DECIMALS = 18;\\n    uint256 public constant MAX_FEE_BASIS_POINTS = 500; // 5%\\n    uint256 public constant MAX_LIQUIDATION_FEE_USD = 100 * PRICE_PRECISION; // 100 USD\\n\\n    /* OrderBook.sol */\\n    uint256 public constant ZKUSD_PRECISION = 1e18;\\n\\n    /* ZKDLP.sol */\\n    uint256 public constant ZKDLP_PRECISION = 10 ** 18;\\n    uint256 public constant MAX_COOLDOWN_DURATION = 48 hours;\\n\\n    /* ShortsTracker */\\n    uint256 public constant MAX_INT256 = uint256(type(int256).max);\\n}\\n\",\"keccak256\":\"0x049f7d98dc0cb5204187c07330c81fc8057c9471f912763fdc11f80d2ee95fb0\",\"license\":\"MIT\"},\"contracts/libraries/DataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\nlibrary DataTypes {\\n    struct IncreaseOrder {\\n        address account;\\n        address purchaseToken;\\n        uint256 purchaseTokenAmount;\\n        address collateralToken;\\n        address indexToken;\\n        uint256 sizeDelta;\\n        bool isLong;\\n        uint256 triggerPrice;\\n        bool triggerAboveThreshold;\\n        uint256 executionFee;\\n    }\\n    struct DecreaseOrder {\\n        address account;\\n        address collateralToken;\\n        uint256 collateralDelta;\\n        address indexToken;\\n        uint256 sizeDelta;\\n        bool isLong;\\n        uint256 triggerPrice;\\n        bool triggerAboveThreshold;\\n        uint256 executionFee;\\n    }\\n    struct SwapOrder {\\n        address account;\\n        address[] path;\\n        uint256 amountIn;\\n        uint256 minOut;\\n        uint256 triggerRatio;\\n        bool triggerAboveThreshold;\\n        bool shouldUnwrap;\\n        uint256 executionFee;\\n    }\\n\\n    /* Vault.sol */\\n    struct Position {\\n        uint256 size;\\n        uint256 collateral;\\n        uint256 averagePrice; // col average price\\n        uint256 entryFundingRate;\\n        uint256 reserveAmount;\\n        int256 realisedPnl;\\n        uint256 lastIncreasedTime;\\n    }\\n}\",\"keccak256\":\"0xc2404513fd45cc58ff02548d0e5a9de8c3f4f2664890b317814e9680916e6d35\",\"license\":\"MIT\"},\"contracts/libraries/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\nlibrary Errors {\\n    /* Timelock Error Message*/\\n    string public constant Timelock_Invalid_Target = \\\"Timelock: invalid _target\\\";\\n    string public constant Timelock_Invalid_Buffer = \\\"Timelock: invalid _buffer\\\";\\n    string public constant Timelock_Buffer_Cannot_Be_Decreased = \\\"Timelock: buffer cannot be decreased\\\";\\n    string public constant Timelock_invalid_maxLeverage = \\\"Timelock: invalid _maxLeverage\\\";\\n    string public constant Timelock_invalid_fundingRateFactor = \\\"Timelock: invalid _fundingRateFactor\\\";\\n    string public constant Timelock_invalid_stableFundingRateFactor = \\\"Timelock: invalid _stableFundingRateFactor\\\";\\n    string public constant TIMELOCK_INVALID_MAXGASPRICE = \\\"Invalid _maxGasPrice\\\";\\n    string public constant TIMELOCK_INVALID_LENGTHS = \\\"Timelock: invalid lengths\\\";\\n    string public constant TIMELOCK_MAXTOKENSUPPLY_EXCEEDED = \\\"Timelock: maxTokenSupply exceeded\\\";\\n    string public constant TIMELOCK_ACTION_ALREADY_SIGNALLED = \\\"Timelock: action already signalled\\\";\\n    string public constant TIMELOCK_ACTION_NOT_SIGNALLED = \\\"Timelock: action not signalled\\\";\\n    string public constant TIMELOCK_ACTION_TIME_NOT_YET_PASSED = \\\"Timelock: action time not yet passed\\\";\\n    string public constant TIMELOCK_INVALID_ACTION = \\\"Timelock: invalid _action\\\";\\n    string public constant TIMELOCK_INVALID_BUFFER = \\\"Timelock: invalid _buffer\\\";\\n    /* ZKUSD.sol*/\\n    string public constant ZKUSD_FORBIDDEN = \\\"ZKUSD: forbidden\\\";\\n    /* BasePositionManagers.sol */\\n    string public constant BASEPOSITIONMANAGER_MARK_PRICE_LOWER_THAN_LIMIT      = \\\"BasePositionManager: mark price lower than limit\\\";\\n    string public constant BASEPOSITIONMANAGER_MARK_PRICE_HIGHER_THAN_LIMIT     = \\\"BasePositionManager: mark price higher than limit\\\";\\n    string public constant BASEPOSITIONMANAGER_INVALID_PATH_LENGTH              = \\\"BasePositionManager: invalid _path.length\\\";\\n    string public constant BASEPOSITIONMANAGER_INSUFFICIENT_AMOUNTOUT           = \\\"BasePositionManager: insufficient amountOut\\\";\\n    string public constant BASEPOSITIONMANAGER_MAX_GLOBAL_LONGS_EXCEEDED        = \\\"BasePositionManager: max global longs exceeded\\\";\\n    string public constant BASEPOSITIONMANAGER_MAX_GLOBAL_SHORTS_EXCEEDED       = \\\"BasePositionManager: max global shorts exceeded\\\";\\n    string public constant BASEPOSITIONMANAGER_INVALID_SENDER                   = \\\"BasePositionManager: invalid sender\\\";\\n    string public constant BASEPOSITIONMANAGER_TRANSFER_OUT_FAILED              = \\\"BasePositionManager: failed to transfer out ether\\\";\\n    /* PositionManager.sol */\\n    string public constant POSITIONMANAGER_INVALID_PATH_LENGTH                  = \\\"PositionManager: invalid _path.length\\\";\\n    string public constant POSITIONMANAGER_INVALID_PATH                         = \\\"PositionManager: invalid _path\\\";\\n    string public constant POSITIONMANAGER_LONG_DEPOSIT                         = \\\"PositionManager: long deposit\\\";\\n    string public constant POSITIONMANAGER_LONG_LEVERAGE_DECREASE               = \\\"PositionManager: long leverage decrease\\\";\\n    string public constant POSITIONMANAGER_FORBIDDEN                            = \\\"PositionManager: forbidden\\\";\\n    /* Router.sol*/\\n    string public constant ROUTER_FORBIDDEN                                     = \\\"Router: forbidden\\\";\\n    /* ZkdlpManager.sol */\\n    string public constant ZKDLPMANAGER_ACTION_NOT_ENABLED                      = \\\"ZkdlpManager: action not enabled\\\";\\n    string public constant ZKDLPMANAGER_INVALID_WEIGHT                          = \\\"ZkdlpManager: invalid weight\\\";\\n    string public constant ZKDLPMANAGER_INVALID_COOLDOWNDURATION                = \\\"ZkdlpManager: invalid _cooldownDuration\\\";\\n    string public constant ZKDLPMANAGER_INVALID_AMOUNT                          = \\\"ZkdlpManager: invalid _amount\\\";\\n    string public constant ZKDLPMANAGER_INSUFFICIENT_ZKUSD_OUTPUT               = \\\"ZkdlpManager: insufficient ZKUSD output\\\";\\n    string public constant ZKDLPMANAGER_INSUFFICIENT_ZKDLP_OUTPUT               = \\\"ZkdlpManager: insufficient ZKDLP output\\\";\\n    string public constant ZKDLPMANAGER_INVALID_ZKDLPAMOUNT                     = \\\"ZkdlpManager: invalid _ZKDLPAmount\\\";\\n    string public constant ZKDLPMANAGER_COOLDOWN_DURATION_NOT_YET_PASSED        = \\\"ZkdlpManager: cooldown duration not yet passed\\\";\\n    string public constant ZKDLPMANAGER_INSUFFICIENT_OUTPUT                     = \\\"ZkdlpManager: insufficient output\\\";\\n    string public constant ZKDLPMANAGER_FORBIDDEN                               = \\\"ZkdlpManager: forbidden\\\";\\n    /* ShortsTrack.sol*/\\n    string public constant SHORTSTRACKER_FORBIDDEN                              = \\\"ShortsTracker: forbidden\\\";\\n    string public constant SHORTSTRACKER_INVALID_HANDLER                        = \\\"ShortsTracker: invalid _handler\\\";\\n    string public constant SHORTSTRACKER_ALREADY_MIGRATED                       = \\\"ShortsTracker: already migrated\\\";\\n    string public constant SHORTSTRACKER_OVERFLOW                               = \\\"ShortsTracker: overflow\\\";\\n    /* VaultUtils.sol*/\\n    string public constant VAULT_LOSSES_EXCEED_COLLATERAL                       = \\\"Vault: losses exceed collateral\\\";\\n    string public constant VAULT_FEES_EXCEED_COLLATERAL                         = \\\"Vault: fees exceed collateral\\\";\\n    string public constant VAULT_LIQUIDATION_FEES_EXCEED_COLLATERAL             = \\\"Vault: liquidation fees exceed collateral\\\";\\n    string public constant VAULT_MAXLEVERAGE_EXCEEDED                           = \\\"Vault: maxLeverage exceeded\\\";\\n    /* VaultInternal.sol*/\\n    string internal constant VAULT_POOLAMOUNT_EXCEEDED                          = \\\"Vault: poolAmount exceeded\\\";\\n    string internal constant VAULT_INSUFFICIENT_RESERVE                         = \\\"Vault: insufficient reserve\\\";\\n    string internal constant VAULT_MAX_SHORTS_EXCEEDED                          = \\\"Vault: max shorts exceeded\\\";\\n    string internal constant VAULT_POOLAMOUNT_BUFFER                            = \\\"Vault: poolAmount < buffer\\\";\\n    string internal constant VAULT_INVALID_ERRORCONTROLLER                      = \\\"Vault: invalid errorController\\\";\\n    /* Router.sol */\\n    string internal constant ROUTER_INVALID_SENDER                              = \\\"Router: invalid sender\\\";\\n    string internal constant ROUTER_INVALID_PATH                                = \\\"Router: invalid _path\\\";\\n    string internal constant ROUTER_MARK_PRICE_HIGHER_THAN_LIMIT                = \\\"Router: mark price higher than limit\\\";\\n    string internal constant ROUTER_MARK_PRICE_LOWER_THAN_LIMIT                 = \\\"Router: mark price lower than limit\\\";\\n    string internal constant ROUTER_INVALID_PATH_LENGTH                         = \\\"Router: invalid _path.length\\\";\\n    string internal constant ROUTER_INSUFFICIENT_AMOUNTOUT                      = \\\"Router: insufficient amountOut\\\";\\n    string internal constant ROUTER_INVALID_PLUGIN                              = \\\"Router: invalid plugin\\\";\\n    /* OrderBook.sol*/\\n    string internal constant ORDERBOOK_FORBIDDEN                                = \\\"OrderBook: forbidden\\\";\\n    string internal constant ORDERBOOK_ALREADY_INITIALIZED                      = \\\"OrderBook: already initialized\\\";\\n    string internal constant ORDERBOOK_INVALID_SENDER                           = \\\"OrderBook: invalid sender\\\";\\n    string internal constant ORDERBOOK_INVALID_PATH_LENGTH                      = \\\"OrderBook: invalid _path.length\\\";\\n    string internal constant ORDERBOOK_INVALID_PATH                             = \\\"OrderBook: invalid _path\\\";\\n    string internal constant ORDERBOOK_INVALID_AMOUNTIN                         = \\\"OrderBook: invalid _amountIn\\\";\\n    string internal constant ORDERBOOK_INSUFFICIENT_EXECUTION_FEE               = \\\"OrderBook: insufficient execution fee\\\";\\n    string internal constant ORDERBOOK_ONLY_WETH_COULD_BE_WRAPPED               = \\\"OrderBook: only weth could be wrapped\\\";\\n    string internal constant ORDERBOOK_INCORRECT_VALUE_TRANSFERRED              = \\\"OrderBook: incorrect value transferred\\\";\\n    string internal constant ORDERBOOK_INCORRECT_EXECUTION_FEE_TRANSFERRED      = \\\"OrderBook: incorrect execution fee transferred\\\";\\n    string internal constant ORDERBOOK_NON_EXISTENT_ORDER                       = \\\"OrderBook: non-existent order\\\";\\n    string internal constant ORDERBOOK_INVALID_PRICE_FOR_EXECUTION              = \\\"OrderBook: invalid price for execution\\\";\\n    string internal constant ORDERBOOK_INSUFFICIENT_COLLATERAL                  = \\\"OrderBook: insufficient collateral\\\";\\n    string internal constant ORDERBOOK_INSUFFICIENT_AMOUNTOUT                   = \\\"OrderBook: insufficient amountOut\\\";\\n    /* RewardRouterV2.sol */\\n    string internal constant REWARDROUTER_INVALID_AMOUNT                        = \\\"RewardRouter: invalid _amount\\\";\\n    string internal constant REWARDROUTER_INVALID_MSG_VALUE                     = \\\"RewardRouter: invalid msg.value\\\";\\n    string internal constant REWARDROUTER_ALREADY_INITIALIZED                   = \\\"RewardRouter: already initialized\\\";\\n    string internal constant REWARDROUTER_INVALID_ZKUSDAMOUNT                   = \\\"RewardRouter: invalid _zkusdAmount\\\";\\n\\n    /* YieldToken.sol */\\n    string public constant YIELDTOKEN_ACCOUNT_ALREADY_MARKED                    = \\\"YieldToken: _account already marked\\\";\\n    string public constant YIELDTOKEN_ACCOUNT_NOT_MARKED                        = \\\"YieldToken: _account not marked\\\";\\n    string public constant YIELDTOKEN_TRANSFER_AMOUNT_EXCEEDS_ALLOWANCE         = \\\"YieldToken: transfer amount exceeds allowance\\\";\\n    string public constant YIELDTOKEN_MINT_TO_THE_ZERO_ADDRESS                  = \\\"YieldToken: mint to the zero address\\\";\\n    string public constant YIELDTOKEN_BURN_FROM_THE_ZERO_ADDRESS                = \\\"YieldToken: burn from the zero address\\\";\\n    string public constant YIELDTOKEN_BURN_AMOUNT_EXCEEDS_BALANCE               = \\\"YieldToken: burn amount exceeds balance\\\";\\n    string public constant YIELDTOKEN_TRANSFER_FROM_THE_ZERO_ADDRESS            = \\\"YieldToken: transfer from the zero address\\\";\\n    string public constant YIELDTOKEN_TRANSFER_TO_THE_ZERO_ADDRESS              = \\\"YieldToken: transfer to the zero address\\\";\\n    string public constant YIELDTOKEN_MSG_SENDER_NOT_WHITELISTED                = \\\"YieldToken: msg.sender not whitelisted\\\";\\n    string public constant YIELDTOKEN_TRANSFER_AMOUNT_EXCEEDS_BALANCE           = \\\"YieldToken: transfer amount exceeds balance\\\";\\n    string public constant YIELDTOKEN_APPROVE_FROM_THE_ZERO_ADDRESS             = \\\"YieldToken: approve from the zero address\\\";\\n    string public constant YIELDTOKEN_APPROVE_TO_THE_ZERO_ADDRESS               = \\\"YieldToken: approve to the zero address\\\";\\n\\n    string public constant MINTABLEBASETOKEN_FORBIDDEN                          = \\\"MintableBaseToken: forbidden\\\";\\n    string public constant BASETOKEN_FORBIDDEN                                  = \\\"BaseToken: forbidden\\\";\\n    string public constant BASETOKEN_ACCOUNT_ALREADY_MARKED                     = \\\"BaseToken: _account already marked\\\";\\n    string public constant BASETOKEN_ACCOUNT_NOT_MARKED                         = \\\"BaseToken: _account not marked\\\";\\n    string public constant BASETOKEN_TRANSFER_AMOUNT_EXCEEDS_ALLOWANCE          = \\\"BaseToken: transfer amount exceeds allowance\\\";\\n    string public constant BASETOKEN_MINT_TO_THE_ZERO_ADDRESS                   = \\\"BaseToken: mint to the zero address\\\";\\n    string public constant BASETOKEN_BURN_FROM_THE_ZERO_ADDRESS                 = \\\"BaseToken: burn from the zero address\\\";\\n    string public constant BASETOKEN_BURN_AMOUNT_EXCEEDS_BALANCE                = \\\"BaseToken: burn amount exceeds balance\\\";\\n    string public constant BASETOKEN_TRANSFER_FROM_THE_ZERO_ADDRESS             = \\\"BaseToken: transfer from the zero address\\\";\\n    string public constant BASETOKEN_TRANSFER_TO_THE_ZERO_ADDRESS               = \\\"BaseToken: transfer to the zero address\\\";\\n    string public constant BASETOKEN_MSG_SENDER_NOT_WHITELISTED                 = \\\"BaseToken: msg.sender not whitelisted\\\";\\n    string public constant BASETOKEN_TRANSFER_AMOUNT_EXCEEDS_BALANCE            = \\\"BaseToken: transfer amount exceeds balance\\\";\\n    string public constant BASETOKEN_APPROVE_FROM_THE_ZERO_ADDRESS              = \\\"BaseToken: approve from the zero address\\\";\\n    string public constant BASETOKEN_APPROVE_TO_THE_ZERO_ADDRESS                = \\\"BaseToken: approve to the zero address\\\";\\n}\\n\",\"keccak256\":\"0xcbd71b8d3cd7ed4aa0447cf4d0bd2da14627ab2de123393a79e8ad459c76630d\",\"license\":\"MIT\"},\"contracts/libraries/Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\nlibrary Events {\\n    /* BasePositionManager Events */\\n    event SetDepositFee(uint256 depositFee);\\n    event SetIncreasePositionBufferBps(uint256 increasePositionBufferBps);\\n    event SetAdmin(address admin);\\n    event WithdrawFees(address token, address receiver, uint256 amount);\\n    event SetMaxGlobalSizes(address[] tokens, uint256[] longSizes, uint256[] shortSizes);\\n    /*Position Manager Events*/\\n    event SetOrderKeeper(address indexed account, bool isActive);\\n    event SetLiquidator(address indexed account, bool isActive);\\n    event SetPartner(address account, bool isActive);\\n    event SetOpened(bool opened);\\n    event SetShouldValidateIncreaseOrder(bool shouldValidateIncreaseOrder);\\n    /* Orderbook.sol events */\\n    event CreateSwapOrder(\\n        address indexed account, uint256 orderIndex,\\n        address[] path, uint256 amountIn, uint256 minOut,\\n        uint256 triggerRatio, bool triggerAboveThreshold, bool shouldUnwrap, uint256 executionFee);\\n    event CancelSwapOrder(\\n        address indexed account, uint256 orderIndex,\\n        address[] path, uint256 amountIn, uint256 minOut,\\n        uint256 triggerRatio, bool triggerAboveThreshold, bool shouldUnwrap, uint256 executionFee);\\n    event UpdateSwapOrder(\\n        address indexed account, uint256 ordexIndex, address[] path, uint256 amountIn, uint256 minOut, uint256 triggerRatio, bool triggerAboveThreshold, bool shouldUnwrap, uint256 executionFee);\\n    event ExecuteSwapOrder(\\n        address indexed account, uint256 orderIndex,\\n        address[] path, uint256 amountIn, uint256 minOut,\\n        uint256 amountOut, uint256 triggerRatio,\\n        bool triggerAboveThreshold, bool shouldUnwrap, uint256 executionFee);\\n    event Initialize(\\n        address router, address vault, address weth,\\n        address zkusd, uint256 minExecutionFee);\\n    event UpdateMinExecutionFee(uint256 minExecutionFee);\\n    event UpdateGov(address gov);\\n    /* Router.sol events*/\\n    event Swap(address account, address tokenIn, address tokenOut, uint256 amountIn, uint256 amountOut);\\n    /* ShortsTracker.sol events*/\\n    event GlobalShortDataUpdated(address indexed token, uint256 globalShortSize, uint256 globalShortAveragePrice);\\n    /* Vault.sol events */\\n    event BuyZKUSD(\\n        address account, address token,\\n        uint256 tokenAmount, uint256 zkusdAmount, uint256 feeBasisPoints);\\n    event SellZKUSD(\\n        address account, address token,\\n        uint256 zkusdAmount, uint256 tokenAmount, uint256 feeBasisPoints);\\n    event Swap(\\n        address account, address tokenIn,\\n        address tokenOut, uint256 amountIn,\\n        uint256 amountOut, uint256 amountOutAfterFees,\\n        uint256 feeBasisPoints);\\n    event IncreasePosition(\\n        bytes32 key, address account,\\n        address collateralToken, address indexToken,\\n        uint256 collateralDelta, uint256 sizeDelta,\\n        bool isLong, uint256 price, uint256 fee);\\n    event DecreasePosition(\\n        bytes32 key, address account,\\n        address collateralToken, address indexToken,\\n        uint256 collateralDelta, uint256 sizeDelta,\\n        bool isLong, uint256 price, uint256 fee);\\n    event LiquidatePosition(\\n        bytes32 key, address account, address collateralToken,\\n        address indexToken, bool isLong, uint256 size,\\n        uint256 collateral, uint256 reserveAmount, int256 realisedPnl, uint256 markPrice);\\n    event UpdatePosition(\\n        bytes32 key, uint256 size, uint256 collateral,\\n        uint256 averagePrice, uint256 entryFundingRate,\\n        uint256 reserveAmount, int256 realisedPnl, uint256 markPrice);\\n    event ClosePosition(\\n        bytes32 key, uint256 size, uint256 collateral,\\n        uint256 averagePrice, uint256 entryFundingRate, uint256 reserveAmount, int256 realisedPnl);\\n    event UpdateFundingRate(address token, uint256 fundingRate);\\n    event UpdatePnl(bytes32 key, bool hasProfit, uint256 delta);\\n    event CollectSwapFees(address token, uint256 feeUsd, uint256 feeTokens);\\n    event CollectMarginFees(address token, uint256 feeUsd, uint256 feeTokens);\\n    event DirectPoolDeposit(address token, uint256 amount);\\n    event IncreasePoolAmount(address token, uint256 amount);\\n    event DecreasePoolAmount(address token, uint256 amount);\\n    event IncreaseZkusdAmount(address token, uint256 amount);\\n    event DecreaseZkusdAmount(address token, uint256 amount);\\n    event IncreaseReservedAmount(address token, uint256 amount);\\n    event DecreaseReservedAmount(address token, uint256 amount);\\n    event IncreaseGuaranteedUsd(address token, uint256 amount);\\n    event DecreaseGuaranteedUsd(address token, uint256 amount);\\n    /* Timelock.sol events */\\n    event SignalPendingAction(bytes32 action);\\n    event SignalApprove(address token, address spender, uint256 amount, bytes32 action);\\n    event SignalWithdrawToken(address target, address token, address receiver, uint256 amount, bytes32 action);\\n    event SignalMint(address token, address receiver, uint256 amount, bytes32 action);\\n    event SignalSetGov(address target, address gov, bytes32 action);\\n    event SignalSetHandler(address target, address handler, bool isActive, bytes32 action);\\n    event SignalSetPriceFeed(address vault, address priceFeed, bytes32 action);\\n    event SignalRedeemZkusd(address vault, address token, uint256 amount);\\n    event SignalVaultSetTokenConfig(\\n        address vault, address token, uint256 tokenDecimals,\\n        uint256 tokenWeight, uint256 minProfitBps, uint256 maxZkusdAmount,\\n        bool isStable, bool isShortable);\\n    event ClearAction(bytes32 action);\\n    /* ZkdlpManager.sol */\\n    event AddLiquidity(address account, address token, uint256 amount, uint256 aumInUsd, uint256 zkdlpSupply, uint256 zkusdAmount, uint256 mintAmount);\\n    event RemoveLiquidity(address account, address token, uint256 zkdlpAmount, uint256 aumInUsd, uint256 zkdlpSupply, uint256 zkusdAmount, uint256 amountOut);\\n    /* RewardRouterV2 */\\n    event StakeZkdx(address account, address token, uint256 amount);\\n    event UnstakeZkdx(address account, address token, uint256 amount);\\n    event StakeZkdlp(address account, uint256 amount);\\n    event UnstakeZkdlp(address account, uint256 amount);\\n\\n    /* OrderBook.sol */\\n    event CreateIncreaseOrder(\\n        address indexed account,\\n        uint256 orderIndex,\\n        address purchaseToken,\\n        uint256 purchaseTokenAmount,\\n        address collateralToken,\\n        address indexToken,\\n        uint256 sizeDelta,\\n        bool isLong,\\n        uint256 triggerPrice,\\n        bool triggerAboveThreshold,\\n        uint256 executionFee\\n    );\\n\\n    event CancelIncreaseOrder(\\n        address indexed account,\\n        uint256 orderIndex,\\n        address purchaseToken,\\n        uint256 purchaseTokenAmount,\\n        address collateralToken,\\n        address indexToken,\\n        uint256 sizeDelta,\\n        bool isLong,\\n        uint256 triggerPrice,\\n        bool triggerAboveThreshold,\\n        uint256 executionFee\\n    );\\n\\n    event ExecuteIncreaseOrder(\\n        address indexed account,\\n        uint256 orderIndex,\\n        address purchaseToken,\\n        uint256 purchaseTokenAmount,\\n        address collateralToken,\\n        address indexToken,\\n        uint256 sizeDelta,\\n        bool isLong,\\n        uint256 triggerPrice,\\n        bool triggerAboveThreshold,\\n        uint256 executionFee,\\n        uint256 executionPrice\\n    );\\n\\n    event UpdateIncreaseOrder(\\n        address indexed account,\\n        uint256 orderIndex,\\n        address collateralToken,\\n        address indexToken,\\n        bool isLong,\\n        uint256 sizeDelta,\\n        uint256 triggerPrice,\\n        bool triggerAboveThreshold\\n    );\\n\\n    event CreateDecreaseOrder(\\n        address indexed account,\\n        uint256 orderIndex,\\n        address collateralToken,\\n        uint256 collateralDelta,\\n        address indexToken,\\n        uint256 sizeDelta,\\n        bool isLong,\\n        uint256 triggerPrice,\\n        bool triggerAboveThreshold,\\n        uint256 executionFee\\n    );\\n\\n    event CancelDecreaseOrder(\\n        address indexed account,\\n        uint256 orderIndex,\\n        address collateralToken,\\n        uint256 collateralDelta,\\n        address indexToken,\\n        uint256 sizeDelta,\\n        bool isLong,\\n        uint256 triggerPrice,\\n        bool triggerAboveThreshold,\\n        uint256 executionFee\\n    );\\n\\n    event ExecuteDecreaseOrder(\\n        address indexed account,\\n        uint256 orderIndex,\\n        address collateralToken,\\n        uint256 collateralDelta,\\n        address indexToken,\\n        uint256 sizeDelta,\\n        bool isLong,\\n        uint256 triggerPrice,\\n        bool triggerAboveThreshold,\\n        uint256 executionFee,\\n        uint256 executionPrice\\n    );\\n\\n    event UpdateDecreaseOrder(\\n        address indexed account,\\n        uint256 orderIndex,\\n        address collateralToken,\\n        uint256 collateralDelta,\\n        address indexToken,\\n        uint256 sizeDelta,\\n        bool isLong,\\n        uint256 triggerPrice,\\n        bool triggerAboveThreshold\\n    );\\n}\\n\",\"keccak256\":\"0x3656730f42a4614b3704801573c526b2a0da4f7d170071c50767a688bcd753f8\",\"license\":\"MIT\"},\"contracts/libraries/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x41b0da7db3e1f79b338824fed2bc4732430b78002a9d51c2cfa86ad5a12c2763\",\"license\":\"MIT\"},\"contracts/libraries/token/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xa3ce253082421a9e79d2b884ae6f60507b0cc73ea356674072091454c44cc556\",\"license\":\"MIT\"},\"contracts/libraries/token/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../math/SafeMath.sol\\\";\\nimport \\\"../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf80766b21ea67a73c81e0dea4543375243938c8b223e29c5d783be61ab3f424c\",\"license\":\"MIT\"},\"contracts/libraries/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.2;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x62dd54ef394959ddda751b6b9053803a746fa32c6b26cb8f871307687bb64e5f\",\"license\":\"MIT\"},\"contracts/libraries/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\ncontract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xae7a1e407ed171ecd3a0d3976875d6c58eefdccf831ebce6314ec94892dffc03\",\"license\":\"MIT\"},\"contracts/tokens/interfaces/IZKUSD.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\ninterface IZKUSD {\\n    function addVault(address _vault) external;\\n    function removeVault(address _vault) external;\\n    function mint(address _account, uint256 _amount) external;\\n    function burn(address _account, uint256 _amount) external;\\n}\",\"keccak256\":\"0xd559ec7a5a776135b7fcef14e614a4b4d79044727d3d8ef7f728d47f6567f816\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 15251,
        "contract": "contracts/core/Vault.sol:Vault",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 12419,
        "contract": "contracts/core/Vault.sol:Vault",
        "label": "gov",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 12422,
        "contract": "contracts/core/Vault.sol:Vault",
        "label": "isInitialized",
        "offset": 20,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 12425,
        "contract": "contracts/core/Vault.sol:Vault",
        "label": "router",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 12428,
        "contract": "contracts/core/Vault.sol:Vault",
        "label": "zkusd",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 12431,
        "contract": "contracts/core/Vault.sol:Vault",
        "label": "priceFeed",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 12434,
        "contract": "contracts/core/Vault.sol:Vault",
        "label": "liquidationFeeUsd",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 12437,
        "contract": "contracts/core/Vault.sol:Vault",
        "label": "fundingRateFactor",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 12440,
        "contract": "contracts/core/Vault.sol:Vault",
        "label": "stableFundingRateFactor",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 12444,
        "contract": "contracts/core/Vault.sol:Vault",
        "label": "positions",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_bytes32,t_struct(Position)13534_storage)"
      },
      {
        "astId": 12449,
        "contract": "contracts/core/Vault.sol:Vault",
        "label": "poolAmounts",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 12454,
        "contract": "contracts/core/Vault.sol:Vault",
        "label": "reservedAmounts",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 12460,
        "contract": "contracts/core/Vault.sol:Vault",
        "label": "maxLeverage",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 12464,
        "contract": "contracts/core/Vault.sol:Vault",
        "label": "taxBasisPoints",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 12468,
        "contract": "contracts/core/Vault.sol:Vault",
        "label": "stableTaxBasisPoints",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 12472,
        "contract": "contracts/core/Vault.sol:Vault",
        "label": "mintBurnFeeBasisPoints",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 12476,
        "contract": "contracts/core/Vault.sol:Vault",
        "label": "swapFeeBasisPoints",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      },
      {
        "astId": 12480,
        "contract": "contracts/core/Vault.sol:Vault",
        "label": "stableSwapFeeBasisPoints",
        "offset": 0,
        "slot": "16",
        "type": "t_uint256"
      },
      {
        "astId": 12484,
        "contract": "contracts/core/Vault.sol:Vault",
        "label": "marginFeeBasisPoints",
        "offset": 0,
        "slot": "17",
        "type": "t_uint256"
      },
      {
        "astId": 12488,
        "contract": "contracts/core/Vault.sol:Vault",
        "label": "fundingInterval",
        "offset": 0,
        "slot": "18",
        "type": "t_uint256"
      },
      {
        "astId": 12491,
        "contract": "contracts/core/Vault.sol:Vault",
        "label": "whitelistedTokenCount",
        "offset": 0,
        "slot": "19",
        "type": "t_uint256"
      },
      {
        "astId": 12494,
        "contract": "contracts/core/Vault.sol:Vault",
        "label": "maxGasPrice",
        "offset": 0,
        "slot": "20",
        "type": "t_uint256"
      },
      {
        "astId": 12497,
        "contract": "contracts/core/Vault.sol:Vault",
        "label": "minProfitTime",
        "offset": 0,
        "slot": "21",
        "type": "t_uint256"
      },
      {
        "astId": 12501,
        "contract": "contracts/core/Vault.sol:Vault",
        "label": "isSwapEnabled",
        "offset": 0,
        "slot": "22",
        "type": "t_bool"
      },
      {
        "astId": 12505,
        "contract": "contracts/core/Vault.sol:Vault",
        "label": "isLeverageEnabled",
        "offset": 1,
        "slot": "22",
        "type": "t_bool"
      },
      {
        "astId": 12509,
        "contract": "contracts/core/Vault.sol:Vault",
        "label": "hasDynamicFees",
        "offset": 2,
        "slot": "22",
        "type": "t_bool"
      },
      {
        "astId": 12513,
        "contract": "contracts/core/Vault.sol:Vault",
        "label": "inManagerMode",
        "offset": 3,
        "slot": "22",
        "type": "t_bool"
      },
      {
        "astId": 12517,
        "contract": "contracts/core/Vault.sol:Vault",
        "label": "inPrivateLiquidationMode",
        "offset": 4,
        "slot": "22",
        "type": "t_bool"
      },
      {
        "astId": 12519,
        "contract": "contracts/core/Vault.sol:Vault",
        "label": "vaultUtils",
        "offset": 5,
        "slot": "22",
        "type": "t_contract(IVaultUtils)7568"
      },
      {
        "astId": 12521,
        "contract": "contracts/core/Vault.sol:Vault",
        "label": "errorController",
        "offset": 0,
        "slot": "23",
        "type": "t_address"
      },
      {
        "astId": 12528,
        "contract": "contracts/core/Vault.sol:Vault",
        "label": "approvedRouters",
        "offset": 0,
        "slot": "24",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 12533,
        "contract": "contracts/core/Vault.sol:Vault",
        "label": "isLiquidator",
        "offset": 0,
        "slot": "25",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 12538,
        "contract": "contracts/core/Vault.sol:Vault",
        "label": "isManager",
        "offset": 0,
        "slot": "26",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 12543,
        "contract": "contracts/core/Vault.sol:Vault",
        "label": "minProfitBasisPoints",
        "offset": 0,
        "slot": "27",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 12548,
        "contract": "contracts/core/Vault.sol:Vault",
        "label": "stableTokens",
        "offset": 0,
        "slot": "28",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 12553,
        "contract": "contracts/core/Vault.sol:Vault",
        "label": "shortableTokens",
        "offset": 0,
        "slot": "29",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 12558,
        "contract": "contracts/core/Vault.sol:Vault",
        "label": "equityTokens",
        "offset": 0,
        "slot": "30",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 12563,
        "contract": "contracts/core/Vault.sol:Vault",
        "label": "bufferAmounts",
        "offset": 0,
        "slot": "31",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 12568,
        "contract": "contracts/core/Vault.sol:Vault",
        "label": "guaranteedUsd",
        "offset": 0,
        "slot": "32",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 12573,
        "contract": "contracts/core/Vault.sol:Vault",
        "label": "cumulativeFundingRates",
        "offset": 0,
        "slot": "33",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 12578,
        "contract": "contracts/core/Vault.sol:Vault",
        "label": "lastFundingTimes",
        "offset": 0,
        "slot": "34",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 12583,
        "contract": "contracts/core/Vault.sol:Vault",
        "label": "feeReserves",
        "offset": 0,
        "slot": "35",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 12588,
        "contract": "contracts/core/Vault.sol:Vault",
        "label": "globalShortSizes",
        "offset": 0,
        "slot": "36",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 12593,
        "contract": "contracts/core/Vault.sol:Vault",
        "label": "globalShortAveragePrices",
        "offset": 0,
        "slot": "37",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 12598,
        "contract": "contracts/core/Vault.sol:Vault",
        "label": "maxGlobalShortSizes",
        "offset": 0,
        "slot": "38",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 12602,
        "contract": "contracts/core/Vault.sol:Vault",
        "label": "errors",
        "offset": 0,
        "slot": "39",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 12607,
        "contract": "contracts/core/Vault.sol:Vault",
        "label": "tokenDecimals",
        "offset": 0,
        "slot": "40",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 12612,
        "contract": "contracts/core/Vault.sol:Vault",
        "label": "tokenBalances",
        "offset": 0,
        "slot": "41",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 12617,
        "contract": "contracts/core/Vault.sol:Vault",
        "label": "tokenWeights",
        "offset": 0,
        "slot": "42",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 12620,
        "contract": "contracts/core/Vault.sol:Vault",
        "label": "totalTokenWeights",
        "offset": 0,
        "slot": "43",
        "type": "t_uint256"
      },
      {
        "astId": 12624,
        "contract": "contracts/core/Vault.sol:Vault",
        "label": "allWhitelistedTokens",
        "offset": 0,
        "slot": "44",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 12629,
        "contract": "contracts/core/Vault.sol:Vault",
        "label": "whitelistedTokens",
        "offset": 0,
        "slot": "45",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 12634,
        "contract": "contracts/core/Vault.sol:Vault",
        "label": "zkusdAmounts",
        "offset": 0,
        "slot": "46",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 12639,
        "contract": "contracts/core/Vault.sol:Vault",
        "label": "maxZkusdAmounts",
        "offset": 0,
        "slot": "47",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 12641,
        "contract": "contracts/core/Vault.sol:Vault",
        "label": "allowStaleEquityPrice",
        "offset": 0,
        "slot": "48",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IVaultUtils)7568": {
        "encoding": "inplace",
        "label": "contract IVaultUtils",
        "numberOfBytes": "20"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(Position)13534_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct DataTypes.Position)",
        "numberOfBytes": "32",
        "value": "t_struct(Position)13534_storage"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Position)13534_storage": {
        "encoding": "inplace",
        "label": "struct DataTypes.Position",
        "members": [
          {
            "astId": 13521,
            "contract": "contracts/core/Vault.sol:Vault",
            "label": "size",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 13523,
            "contract": "contracts/core/Vault.sol:Vault",
            "label": "collateral",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 13525,
            "contract": "contracts/core/Vault.sol:Vault",
            "label": "averagePrice",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 13527,
            "contract": "contracts/core/Vault.sol:Vault",
            "label": "entryFundingRate",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 13529,
            "contract": "contracts/core/Vault.sol:Vault",
            "label": "reserveAmount",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 13531,
            "contract": "contracts/core/Vault.sol:Vault",
            "label": "realisedPnl",
            "offset": 0,
            "slot": "5",
            "type": "t_int256"
          },
          {
            "astId": 13533,
            "contract": "contracts/core/Vault.sol:Vault",
            "label": "lastIncreasedTime",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}