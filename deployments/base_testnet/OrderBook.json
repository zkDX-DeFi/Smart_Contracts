{
  "address": "0x123fAD5e00f9E85621Be9324b54c156938dB4165",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_router",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_weth",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_zkusd",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_minExecutionFee",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_orderIndex",
          "type": "uint256"
        }
      ],
      "name": "cancelDecreaseOrder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_orderIndex",
          "type": "uint256"
        }
      ],
      "name": "cancelIncreaseOrder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_increaseOrderIndexes",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_decreaseOrderIndexes",
          "type": "uint256[]"
        }
      ],
      "name": "cancelMultiple",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "decreaseOrders",
      "outputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "collateralToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "collateralDelta",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "indexToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "sizeDelta",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isLong",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "triggerPrice",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "triggerAboveThreshold",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "executionFee",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "decreaseOrdersIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_orderIndex",
          "type": "uint256"
        },
        {
          "internalType": "address payable",
          "name": "_feeReceiver",
          "type": "address"
        }
      ],
      "name": "executeDecreaseOrder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_orderIndex",
          "type": "uint256"
        },
        {
          "internalType": "address payable",
          "name": "_feeReceiver",
          "type": "address"
        }
      ],
      "name": "executeIncreaseOrder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_orderIndex",
          "type": "uint256"
        }
      ],
      "name": "getDecreaseOrder",
      "outputs": [
        {
          "internalType": "address",
          "name": "collateralToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "collateralDelta",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "indexToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "sizeDelta",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isLong",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "triggerPrice",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "triggerAboveThreshold",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "executionFee",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_orderIndex",
          "type": "uint256"
        }
      ],
      "name": "getIncreaseOrder",
      "outputs": [
        {
          "internalType": "address",
          "name": "purchaseToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "purchaseTokenAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "collateralToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "indexToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "sizeDelta",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isLong",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "triggerPrice",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "triggerAboveThreshold",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "executionFee",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gov",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "increaseOrders",
      "outputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "purchaseToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "purchaseTokenAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "collateralToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "indexToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "sizeDelta",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isLong",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "triggerPrice",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "triggerAboveThreshold",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "executionFee",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "increaseOrdersIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minExecutionFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "router",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_gov",
          "type": "address"
        }
      ],
      "name": "setGov",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_minExecutionFee",
          "type": "uint256"
        }
      ],
      "name": "setMinExecutionFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_orderIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_collateralDelta",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_sizeDelta",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_triggerPrice",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_triggerAboveThreshold",
          "type": "bool"
        }
      ],
      "name": "updateDecreaseOrder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_orderIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_sizeDelta",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_triggerPrice",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_triggerAboveThreshold",
          "type": "bool"
        }
      ],
      "name": "updateIncreaseOrder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_triggerAboveThreshold",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "_triggerPrice",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_indexToken",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_maximizePrice",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "_raise",
          "type": "bool"
        }
      ],
      "name": "validatePositionOrderPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vault",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "weth",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "zkusd",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x29904ccf00931fcc4e79a12c8db8356b751c1e41f5d925a6ae2a5ea3dced2245",
  "receipt": {
    "to": null,
    "from": "0xafc183BE937367B219F9283916d352f2C03ff512",
    "contractAddress": "0x123fAD5e00f9E85621Be9324b54c156938dB4165",
    "transactionIndex": 1,
    "gasUsed": "2396403",
    "logsBloom": "0x
    "blockHash": "0x6579319fd9216f87f64d885f4d7685e0d598d60050c4c5d36a871cf94037e561",
    "transactionHash": "0x29904ccf00931fcc4e79a12c8db8356b751c1e41f5d925a6ae2a5ea3dced2245",
    "logs": [],
    "blockNumber": 13375391,
    "cumulativeGasUsed": "2446856",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xD8d89814739C3BD7274FD3d40495f51b02a7bBc1",
    "0x5A7538066424fAe75D977Bb89020aD19412E935e",
    "0x1ec29637871F6926Fb46986038cC23e7E4AFB93C",
    "0x5C909B45CB6A2Aa6B085f09943256e0A94722F07",
    "500000000000000"
  ],
  "numDeployments": 1,
  "solcInputHash": "1827954c4021d85529344d91254f3495",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_weth\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_zkusd\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minExecutionFee\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_orderIndex\",\"type\":\"uint256\"}],\"name\":\"cancelDecreaseOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_orderIndex\",\"type\":\"uint256\"}],\"name\":\"cancelIncreaseOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_increaseOrderIndexes\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_decreaseOrderIndexes\",\"type\":\"uint256[]\"}],\"name\":\"cancelMultiple\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"decreaseOrders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collateralToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"collateralDelta\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"indexToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sizeDelta\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isLong\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"triggerPrice\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"triggerAboveThreshold\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"executionFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"decreaseOrdersIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_orderIndex\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"_feeReceiver\",\"type\":\"address\"}],\"name\":\"executeDecreaseOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_orderIndex\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"_feeReceiver\",\"type\":\"address\"}],\"name\":\"executeIncreaseOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_orderIndex\",\"type\":\"uint256\"}],\"name\":\"getDecreaseOrder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"collateralToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"collateralDelta\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"indexToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sizeDelta\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isLong\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"triggerPrice\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"triggerAboveThreshold\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"executionFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_orderIndex\",\"type\":\"uint256\"}],\"name\":\"getIncreaseOrder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"purchaseToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"purchaseTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"collateralToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"indexToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sizeDelta\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isLong\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"triggerPrice\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"triggerAboveThreshold\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"executionFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gov\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"increaseOrders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"purchaseToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"purchaseTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"collateralToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"indexToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sizeDelta\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isLong\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"triggerPrice\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"triggerAboveThreshold\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"executionFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"increaseOrdersIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minExecutionFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gov\",\"type\":\"address\"}],\"name\":\"setGov\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minExecutionFee\",\"type\":\"uint256\"}],\"name\":\"setMinExecutionFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_orderIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_collateralDelta\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sizeDelta\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_triggerPrice\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_triggerAboveThreshold\",\"type\":\"bool\"}],\"name\":\"updateDecreaseOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_orderIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sizeDelta\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_triggerPrice\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_triggerAboveThreshold\",\"type\":\"bool\"}],\"name\":\"updateIncreaseOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_triggerAboveThreshold\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_triggerPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_indexToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_maximizePrice\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_raise\",\"type\":\"bool\"}],\"name\":\"validatePositionOrderPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"zkusd\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/core/OrderBook.sol\":\"OrderBook\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"contracts/core/OrderBook.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\npragma experimental ABIEncoderV2;\\nimport \\\"./settings/OrderBookSettings.sol\\\";\\nimport \\\"./interfaces/IVaultPriceFeed.sol\\\";\\n\\ncontract OrderBook is OrderBookSettings {\\n    constructor(address _router, address _vault, address _weth, address _zkusd, uint256 _minExecutionFee) public {\\n        router = _router;\\n        vault = _vault;\\n        weth = _weth;\\n        zkusd = _zkusd;\\n        minExecutionFee = _minExecutionFee;\\n        gov = msg.sender;\\n    }\\n    receive() external payable {\\n        require(msg.sender == weth, Errors.ORDERBOOK_INVALID_SENDER);\\n    }\\n    function _update(bytes[] memory _updateData) internal returns (uint256 _fee) {\\n        if (_updateData.length == 0) return 0;\\n        IVaultPriceFeed priceFeed = IVaultPriceFeed(IVault(vault).priceFeed());\\n        _fee = priceFeed.getUpdateFee(_updateData);\\n        priceFeed.updatePriceFeeds{value : _fee}(_updateData);\\n    }\\n\\n    /* public */\\n    function updateIncreaseOrder(uint256 _orderIndex, uint256 _sizeDelta, uint256 _triggerPrice, bool _triggerAboveThreshold) external nonReentrant {\\n        IncreaseOrder storage order = increaseOrders[msg.sender][_orderIndex];\\n        require(order.account != address(0), \\\"OrderBook: non-existent order\\\");\\n\\n        order.triggerPrice = _triggerPrice;\\n        order.triggerAboveThreshold = _triggerAboveThreshold;\\n        order.sizeDelta = _sizeDelta;\\n\\n        emit Events.UpdateIncreaseOrder(\\n            msg.sender,\\n            _orderIndex,\\n            order.collateralToken,\\n            order.indexToken,\\n            order.isLong,\\n            _sizeDelta,\\n            _triggerPrice,\\n            _triggerAboveThreshold\\n        );\\n    }\\n    function cancelIncreaseOrder(uint256 _orderIndex) public nonReentrant {\\n        IncreaseOrder memory order = increaseOrders[msg.sender][_orderIndex];\\n        require(order.account != address(0), \\\"OrderBook: non-existent order\\\");\\n        delete increaseOrders[msg.sender][_orderIndex];\\n        if (order.purchaseToken == weth) {\\n            _transferOutETH(order.executionFee.add(order.purchaseTokenAmount), msg.sender);\\n        } else {\\n            IERC20(order.purchaseToken).safeTransfer(msg.sender, order.purchaseTokenAmount);\\n            _transferOutETH(order.executionFee, msg.sender);\\n        }\\n        emit Events.CancelIncreaseOrder(\\n            order.account,\\n            _orderIndex,\\n            order.purchaseToken,\\n            order.purchaseTokenAmount,\\n            order.collateralToken,\\n            order.indexToken,\\n            order.sizeDelta,\\n            order.isLong,\\n            order.triggerPrice,\\n            order.triggerAboveThreshold,\\n            order.executionFee\\n        );\\n    }\\n    function executeIncreaseOrder(address _address, uint256 _orderIndex, address payable _feeReceiver) override external nonReentrant {\\n        IncreaseOrder memory order = increaseOrders[_address][_orderIndex];\\n        require(order.account != address(0), \\\"OrderBook: non-existent order\\\");\\n        // increase long should use max price\\n        // increase short should use min price\\n        (uint256 currentPrice,) = validatePositionOrderPrice(\\n            order.triggerAboveThreshold,\\n            order.triggerPrice,\\n            order.indexToken,\\n            order.isLong,\\n            true\\n        );\\n        delete increaseOrders[_address][_orderIndex];\\n        IERC20(order.purchaseToken).safeTransfer(vault, order.purchaseTokenAmount);\\n        if (order.purchaseToken != order.collateralToken) {\\n            address[] memory path = new address[](2);\\n            path[0] = order.purchaseToken;\\n            path[1] = order.collateralToken;\\n            uint256 amountOut = _swap(path, 0, address(this));\\n            IERC20(order.collateralToken).safeTransfer(vault, amountOut);\\n        }\\n        IRouter(router).pluginIncreasePosition(order.account, order.collateralToken, order.indexToken, order.sizeDelta, order.isLong);\\n        // pay executor\\n        _transferOutETH(order.executionFee, _feeReceiver);\\n        emit Events.ExecuteIncreaseOrder(\\n            order.account,\\n            _orderIndex,\\n            order.purchaseToken,\\n            order.purchaseTokenAmount,\\n            order.collateralToken,\\n            order.indexToken,\\n            order.sizeDelta,\\n            order.isLong,\\n            order.triggerPrice,\\n            order.triggerAboveThreshold,\\n            order.executionFee,\\n            currentPrice\\n        );\\n    }\\n\\n    function updateDecreaseOrder(uint256 _orderIndex, uint256 _collateralDelta, uint256 _sizeDelta, uint256 _triggerPrice, bool _triggerAboveThreshold) external nonReentrant {\\n        DecreaseOrder storage order = decreaseOrders[msg.sender][_orderIndex];\\n        require(order.account != address(0), \\\"OrderBook: non-existent order\\\");\\n        order.triggerPrice = _triggerPrice;\\n        order.triggerAboveThreshold = _triggerAboveThreshold;\\n        order.sizeDelta = _sizeDelta;\\n        order.collateralDelta = _collateralDelta;\\n\\n        emit Events.UpdateDecreaseOrder(\\n            msg.sender,\\n            _orderIndex,\\n            order.collateralToken,\\n            _collateralDelta,\\n            order.indexToken,\\n            _sizeDelta,\\n            order.isLong,\\n            _triggerPrice,\\n            _triggerAboveThreshold\\n        );\\n    }\\n    function cancelDecreaseOrder(uint256 _orderIndex) public nonReentrant {\\n        DecreaseOrder memory order = decreaseOrders[msg.sender][_orderIndex];\\n        require(order.account != address(0), \\\"OrderBook: non-existent order\\\");\\n        delete decreaseOrders[msg.sender][_orderIndex];\\n        _transferOutETH(order.executionFee, msg.sender);\\n        emit Events.CancelDecreaseOrder(\\n            order.account,\\n            _orderIndex,\\n            order.collateralToken,\\n            order.collateralDelta,\\n            order.indexToken,\\n            order.sizeDelta,\\n            order.isLong,\\n            order.triggerPrice,\\n            order.triggerAboveThreshold,\\n            order.executionFee\\n        );\\n    }\\n    function executeDecreaseOrder(address _address, uint256 _orderIndex, address payable _feeReceiver) override external nonReentrant {\\n        DecreaseOrder memory order = decreaseOrders[_address][_orderIndex];\\n        require(order.account != address(0), \\\"OrderBook: non-existent order\\\");\\n        // decrease long should use min price\\n        // decrease short should use max price\\n        (uint256 currentPrice,) = validatePositionOrderPrice(\\n            order.triggerAboveThreshold,\\n            order.triggerPrice,\\n            order.indexToken,\\n            !order.isLong,\\n            true\\n        );\\n        delete decreaseOrders[_address][_orderIndex];\\n        uint256 amountOut = IRouter(router).pluginDecreasePosition(\\n            order.account,\\n            order.collateralToken,\\n            order.indexToken,\\n            order.collateralDelta,\\n            order.sizeDelta,\\n            order.isLong,\\n            address(this)\\n        );\\n        // transfer released collateral to user\\n        // if (order.collateralToken == weth) _transferOutETH(amountOut, payable(order.account)); else\\n        IERC20(order.collateralToken).safeTransfer(order.account, amountOut);\\n        // pay executor\\n        _transferOutETH(order.executionFee, _feeReceiver);\\n        emit Events.ExecuteDecreaseOrder(\\n            order.account,\\n            _orderIndex,\\n            order.collateralToken,\\n            order.collateralDelta,\\n            order.indexToken,\\n            order.sizeDelta,\\n            order.isLong,\\n            order.triggerPrice,\\n            order.triggerAboveThreshold,\\n            order.executionFee,\\n            currentPrice\\n        );\\n    }\\n\\n    function cancelMultiple(uint256[] memory _increaseOrderIndexes, uint256[] memory _decreaseOrderIndexes) external {\\n        for (uint256 i = 0; i < _increaseOrderIndexes.length; i++) {\\n            cancelIncreaseOrder(_increaseOrderIndexes[i]);\\n        }\\n        for (uint256 i = 0; i < _decreaseOrderIndexes.length; i++) {\\n            cancelDecreaseOrder(_decreaseOrderIndexes[i]);\\n        }\\n    }\\n\\n    /* internal */\\n    function _transferInETH() private {\\n        if (msg.value != 0)\\n            IWETH(weth).deposit{value: msg.value}();\\n    }\\n    function _transferOutETH(uint256 _amountOut, address payable _receiver) private {\\n        IWETH(weth).withdraw(_amountOut);\\n        (bool sent,) = _receiver.call{value : _amountOut}(\\\"\\\");\\n        require(sent, \\\"OrderBook: failed to send ETH\\\");\\n    }\\n    function _swap(address[] memory _path, uint256 _minOut, address _receiver) private returns (uint256) {\\n        if (_path.length == 2) {\\n            return _vaultSwap(_path[0], _path[1], _minOut, _receiver);\\n        }\\n        if (_path.length == 3) {\\n            uint256 midOut = _vaultSwap(_path[0], _path[1], 0, address(this));\\n            IERC20(_path[1]).safeTransfer(vault, midOut);\\n            return _vaultSwap(_path[1], _path[2], _minOut, _receiver);\\n        }\\n\\n        revert(\\\"OrderBook: invalid _path.length\\\");\\n    }\\n    function _vaultSwap(address _tokenIn, address _tokenOut, uint256 _minOut, address _receiver) private returns (uint256) {\\n        uint256 amountOut;\\n\\n        if (_tokenOut == zkusd) {// buyZKUSD\\n            amountOut = IVault(vault).buyZKUSD(_tokenIn, _receiver);\\n        } else if (_tokenIn == zkusd) {// sellZKUSD\\n            amountOut = IVault(vault).sellZKUSD(_tokenOut, _receiver);\\n        } else {// swap\\n            amountOut = IVault(vault).swap(_tokenIn, _tokenOut, _receiver);\\n        }\\n\\n        require(amountOut >= _minOut, \\\"OrderBook: insufficient amountOut\\\");\\n        return amountOut;\\n    }\\n    function _createIncreaseOrder(address _purchaseToken, uint256 _purchaseTokenAmount, address _collateralToken, address _indexToken, uint256 _sizeDelta, bool _isLong, uint256 _triggerPrice, bool _triggerAboveThreshold, uint256 _executionFee) private {\\n        uint256 _orderIndex = increaseOrdersIndex[msg.sender];\\n        IncreaseOrder memory order = IncreaseOrder(\\n            msg.sender,\\n            _purchaseToken,\\n            _purchaseTokenAmount,\\n            _collateralToken,\\n            _indexToken,\\n            _sizeDelta,\\n            _isLong,\\n            _triggerPrice,\\n            _triggerAboveThreshold,\\n            _executionFee\\n        );\\n        increaseOrdersIndex[msg.sender] = _orderIndex.add(1);\\n        increaseOrders[msg.sender][_orderIndex] = order;\\n\\n        emit Events.CreateIncreaseOrder(\\n            msg.sender,\\n            _orderIndex,\\n            _purchaseToken,\\n            _purchaseTokenAmount,\\n            _collateralToken,\\n            _indexToken,\\n            _sizeDelta,\\n            _isLong,\\n            _triggerPrice,\\n            _triggerAboveThreshold,\\n            _executionFee\\n        );\\n    }\\n    function _createDecreaseOrder(address _account, address _collateralToken, uint256 _collateralDelta, address _indexToken, uint256 _sizeDelta, bool _isLong, uint256 _triggerPrice, bool _triggerAboveThreshold) private {\\n        uint256 _orderIndex = decreaseOrdersIndex[_account];\\n        DecreaseOrder memory order = DecreaseOrder(\\n            _account,\\n            _collateralToken,\\n            _collateralDelta,\\n            _indexToken,\\n            _sizeDelta,\\n            _isLong,\\n            _triggerPrice,\\n            _triggerAboveThreshold,\\n            msg.value\\n        );\\n        decreaseOrdersIndex[_account] = _orderIndex.add(1);\\n        decreaseOrders[_account][_orderIndex] = order;\\n\\n        emit Events.CreateDecreaseOrder(\\n            _account,\\n            _orderIndex,\\n            _collateralToken,\\n            _collateralDelta,\\n            _indexToken,\\n            _sizeDelta,\\n            _isLong,\\n            _triggerPrice,\\n            _triggerAboveThreshold,\\n            msg.value\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x9c5f98ca3989cb723d9991395f2cd51e7002aa9d8d76a677f15f617d3d4b7876\",\"license\":\"MIT\"},\"contracts/core/interfaces/IOrderBook.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\ninterface IOrderBook {\\n\\n    function getIncreaseOrder(address _account, uint256 _orderIndex) external view returns (\\n        address purchaseToken,\\n        uint256 purchaseTokenAmount,\\n        address collateralToken,\\n        address indexToken,\\n        uint256 sizeDelta,\\n        bool isLong,\\n        uint256 triggerPrice,\\n        bool triggerAboveThreshold,\\n        uint256 executionFee\\n    );\\n\\n    function getDecreaseOrder(address _account, uint256 _orderIndex) external view returns (\\n        address collateralToken,\\n        uint256 collateralDelta,\\n        address indexToken,\\n        uint256 sizeDelta,\\n        bool isLong,\\n        uint256 triggerPrice,\\n        bool triggerAboveThreshold,\\n        uint256 executionFee\\n    );\\n\\n    function executeDecreaseOrder(address, uint256, address payable) external;\\n    function executeIncreaseOrder(address, uint256, address payable) external;\\n}\\n\",\"keccak256\":\"0xea15c5413e388051840d1036373a46beae11ba137f539927ebdd9a2ee961ab32\",\"license\":\"MIT\"},\"contracts/core/interfaces/IRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\ninterface IRouter {\\n    function addPlugin(address _plugin) external;\\n    function pluginTransfer(address _token, address _account, address _receiver, uint256 _amount) external;\\n    function pluginIncreasePosition(\\n        address _account, address _collateralToken,\\n        address _indexToken, uint256 _sizeDelta, bool _isLong) external;\\n    function pluginDecreasePosition(\\n        address _account, address _collateralToken,\\n        address _indexToken, uint256 _collateralDelta,\\n        uint256 _sizeDelta, bool _isLong, address _receiver) external returns (uint256);\\n}\\n\",\"keccak256\":\"0x0e092be50363a8bdfeed38b0652a7a1aec0c57327eec9fafbdfd1ec886075eb4\",\"license\":\"MIT\"},\"contracts/core/interfaces/IVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\nimport \\\"./IVaultUtils.sol\\\";\\ninterface IVault {\\n    function withdrawFees(address _token, address _receiver) external returns (uint256);\\n    function directPoolDeposit(address _token) external;\\n    function buyZKUSD(address _token, address _receiver) external returns (uint256);\\n    function sellZKUSD(address _token, address _receiver) external returns (uint256);\\n    function swap(address _tokenIn, address _tokenOut, address _receiver) external returns (uint256);\\n    function increasePosition(\\n        address _account, address _collateralToken,\\n        address _indexToken, uint256 _sizeDelta, bool _isLong) external;\\n    function decreasePosition(\\n        address _account, address _collateralToken,\\n        address _indexToken, uint256 _collateralDelta,\\n        uint256 _sizeDelta, bool _isLong, address _receiver) external returns (uint256);\\n    function validateLiquidation(\\n        address _account, address _collateralToken,\\n        address _indexToken, bool _isLong, bool _raise) external view returns (uint256, uint256);\\n    function liquidatePosition(\\n        address _account, address _collateralToken,\\n        address _indexToken, bool _isLong, address _feeReceiver) external returns (uint256);\\n\\n    function tokenToUsdMin(address _token, uint256 _tokenAmount) external view returns (uint256);\\n    function priceFeed() external view returns (address);\\n    function fundingRateFactor() external view returns (uint256);\\n    function stableFundingRateFactor() external view returns (uint256);\\n    function cumulativeFundingRates(address _token) external view returns (uint256);\\n    function getNextFundingRate(address _token) external view returns (uint256);\\n    function getFeeBasisPoints(\\n        address _token, uint256 _zkusdDelta,\\n        uint256 _feeBasisPoints, uint256 _taxBasisPoints, bool _increment) external view returns (uint256);\\n    function liquidationFeeUsd() external view returns (uint256);\\n    function taxBasisPoints() external view returns (uint256);\\n    function stableTaxBasisPoints() external view returns (uint256);\\n    function mintBurnFeeBasisPoints() external view returns (uint256);\\n    function swapFeeBasisPoints() external view returns (uint256);\\n    function stableSwapFeeBasisPoints() external view returns (uint256);\\n    function marginFeeBasisPoints() external view returns (uint256);\\n    function allWhitelistedTokensLength() external view returns (uint256);\\n    function allWhitelistedTokens(uint256) external view returns (address);\\n    function whitelistedTokens(address _token) external view returns (bool);\\n    function stableTokens(address _token) external view returns (bool);\\n    function shortableTokens(address _token) external view returns (bool);\\n    function equityTokens(address _token) external view returns (bool);\\n    function feeReserves(address _token) external view returns (uint256);\\n    function globalShortSizes(address _token) external view returns (uint256);\\n    function globalShortAveragePrices(address _token) external view returns (uint256);\\n    function maxGlobalShortSizes(address _token) external view returns (uint256);\\n    function tokenDecimals(address _token) external view returns (uint256);\\n    function tokenWeights(address _token) external view returns (uint256);\\n    function guaranteedUsd(address _token) external view returns (uint256);\\n    function poolAmounts(address _token) external view returns (uint256);\\n    function bufferAmounts(address _token) external view returns (uint256);\\n    function reservedAmounts(address _token) external view returns (uint256);\\n    function zkusdAmounts(address _token) external view returns (uint256);\\n    function maxZkusdAmounts(address _token) external view returns (uint256);\\n    function getRedemptionAmount(address _token, uint256 _zkusdAmount) external view returns (uint256);\\n    function getMaxPrice(address _token) external view returns (uint256);\\n    function getMinPrice(address _token) external view returns (uint256);\\n    function getDelta(\\n        address _indexToken, uint256 _size,\\n        uint256 _averagePrice, bool _isLong, uint256 _lastIncreasedTime) external view returns (bool, uint256);\\n    function getPosition(\\n        address _account, address _collateralToken,\\n        address _indexToken, bool _isLong) external view returns (uint256, uint256, uint256, uint256, uint256, uint256, bool, uint256);\\n    function isPositionExist(address _account, address _collateralToken, address _indexToken, bool _isLong) external view returns (bool, bytes32);\\n    function isInitialized() external view returns (bool);\\n    function isSwapEnabled() external view returns (bool);\\n    function isLeverageEnabled() external view returns (bool);\\n    function router() external view returns (address);\\n    function zkusd() external view returns (address);\\n    function gov() external view returns (address);\\n    function whitelistedTokenCount() external view returns (uint256);\\n    function maxLeverage() external view returns (uint256);\\n    function minProfitTime() external view returns (uint256);\\n    function hasDynamicFees() external view returns (bool);\\n    function fundingInterval() external view returns (uint256);\\n    function totalTokenWeights() external view returns (uint256);\\n    function getTargetZkusdAmount(address _token) external view returns (uint256);\\n    function inManagerMode() external view returns (bool);\\n    function inPrivateLiquidationMode() external view returns (bool);\\n    function maxGasPrice() external view returns (uint256);\\n    function approvedRouters(address _account, address _router) external view returns (bool);\\n    function isLiquidator(address _account) external view returns (bool);\\n    function isManager(address _account) external view returns (bool);\\n    function minProfitBasisPoints(address _token) external view returns (uint256);\\n    function tokenBalances(address _token) external view returns (uint256);\\n    function lastFundingTimes(address _token) external view returns (uint256);\\n\\n    function setMaxLeverage(uint256 _maxLeverage) external;\\n    function setInManagerMode(bool _inManagerMode) external;\\n    function setManager(address _manager, bool _isManager) external;\\n    function setIsSwapEnabled(bool _isSwapEnabled) external;\\n    function setIsLeverageEnabled(bool _isLeverageEnabled) external;\\n    function setMaxGasPrice(uint256 _maxGasPrice) external;\\n    function setZkusdAmount(address _token, uint256 _amount) external;\\n    function setBufferAmount(address _token, uint256 _amount) external;\\n    function setMaxGlobalShortSize(address _token, uint256 _amount) external;\\n    function setInPrivateLiquidationMode(bool _inPrivateLiquidationMode) external;\\n    function setLiquidator(address _liquidator, bool _isActive) external;\\n    function setFundingRate(\\n        uint256 _fundingInterval, uint256 _fundingRateFactor,\\n        uint256 _stableFundingRateFactor) external;\\n    function setFees(\\n        uint256 _taxBasisPoints, uint256 _stableTaxBasisPoints,\\n        uint256 _mintBurnFeeBasisPoints, uint256 _swapFeeBasisPoints,\\n        uint256 _stableSwapFeeBasisPoints, uint256 _marginFeeBasisPoints,\\n        uint256 _liquidationFeeUsd, uint256 _minProfitTime, bool _hasDynamicFees) external;\\n\\n    function setTokenConfig(\\n        address _token, uint256 _tokenDecimals,\\n        uint256 _redemptionBps, uint256 _minProfitBps,\\n        uint256 _maxZkusdAmount, bool _isStable,\\n        bool _isShortable, bool _isEquity) external;\\n    function clearTokenConfig(address _token) external;\\n    function setMinProfitTime(uint256 _minProfitTime) external;\\n    function setPriceFeed(address _priceFeed) external;\\n    function setVaultUtils(IVaultUtils _vaultUtils) external;\\n    function setError(uint256 _errorCode, string calldata _error) external;\\n    function setAllowStableEquity(bool _allowStaleEquityPrice) external;\\n    function setZusd(address _zusd) external;\\n}\\n\",\"keccak256\":\"0x587c5b16943638d27fb509c86c7216268ca157fe5decf6654d868c64adf14539\",\"license\":\"MIT\"},\"contracts/core/interfaces/IVaultPriceFeed.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\npragma experimental ABIEncoderV2;\\n\\ninterface IVaultPriceFeed {\\n\\n    function getPrice(address _token, bool _includeConf, bool _maximise, bool _fresh) external view returns (uint256);\\n    function getUpdateFee(bytes[] calldata _updateData) external view returns (uint256);\\n    function updatePriceFeeds(bytes[] calldata _priceData) external payable;\\n}\\n\",\"keccak256\":\"0xd8fc7cbf17a753e11bdb4de46c31061d00af7dafa36856160928324afa901993\",\"license\":\"MIT\"},\"contracts/core/interfaces/IVaultUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\ninterface IVaultUtils {\\n    function updateCumulativeFundingRate(\\n        address _collateralToken, address _indexToken) external returns (bool);\\n    function validateIncreasePosition(\\n        address _account, address _collateralToken,\\n        address _indexToken, uint256 _sizeDelta, bool _isLong) external view;\\n    function validateDecreasePosition(\\n        address _account, address _collateralToken,\\n        address _indexToken, uint256 _collateralDelta,\\n        uint256 _sizeDelta, bool _isLong, address _receiver) external view;\\n    function validateLiquidation(\\n        address _account, address _collateralToken,\\n        address _indexToken, bool _isLong, bool _raise) external view returns (uint256, uint256);\\n    function getEntryFundingRate(\\n        address _collateralToken, address _indexToken, bool _isLong) external view returns (uint256);\\n    function getPositionFee(\\n        address _account, address _collateralToken,\\n        address _indexToken, bool _isLong, uint256 _sizeDelta) external view returns (uint256);\\n    function getFundingFee(\\n        address _account, address _collateralToken,\\n        address _indexToken, bool _isLong,\\n        uint256 _size, uint256 _entryFundingRate) external view returns (uint256);\\n    function getBuyZkusdFeeBasisPoints(\\n        address _token, uint256 _zkusdAmount) external view returns (uint256);\\n    function getSellZkusdFeeBasisPoints(\\n        address _token, uint256 _zkusdAmount) external view returns (uint256);\\n    function getSwapFeeBasisPoints(\\n        address _tokenIn, address _tokenOut, uint256 _zkusdAmount) external view returns (uint256);\\n    function getFeeBasisPoints(\\n        address _token, uint256 _zkusdDelta,\\n        uint256 _feeBasisPoints, uint256 _taxBasisPoints,\\n        bool _increment) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x1efeae040950453176db5cf84c290223d6ebd4542e7457c7fe35c0d023483522\",\"license\":\"MIT\"},\"contracts/core/settings/OrderBookSettings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\nimport \\\"../storage/OrderBookStorage.sol\\\";\\n\\nabstract contract OrderBookSettings is OrderBookStorage {\\n    function setMinExecutionFee(uint256 _minExecutionFee) external onlyGov {\\n        minExecutionFee = _minExecutionFee;\\n        emit Events.UpdateMinExecutionFee(_minExecutionFee);\\n    }\\n    function setGov(address _gov) external onlyGov {\\n        gov = _gov;\\n        emit Events.UpdateGov(_gov);\\n    }\\n    function getIncreaseOrder(address _account, uint256 _orderIndex) override public view returns (\\n        address purchaseToken,\\n        uint256 purchaseTokenAmount,\\n        address collateralToken,\\n        address indexToken,\\n        uint256 sizeDelta,\\n        bool isLong,\\n        uint256 triggerPrice,\\n        bool triggerAboveThreshold,\\n        uint256 executionFee\\n    ) {\\n        IncreaseOrder memory order = increaseOrders[_account][_orderIndex];\\n        return (\\n        order.purchaseToken,\\n        order.purchaseTokenAmount,\\n        order.collateralToken,\\n        order.indexToken,\\n        order.sizeDelta,\\n        order.isLong,\\n        order.triggerPrice,\\n        order.triggerAboveThreshold,\\n        order.executionFee\\n        );\\n    }\\n    function getDecreaseOrder(address _account, uint256 _orderIndex) override public view returns (\\n        address collateralToken,\\n        uint256 collateralDelta,\\n        address indexToken,\\n        uint256 sizeDelta,\\n        bool isLong,\\n        uint256 triggerPrice,\\n        bool triggerAboveThreshold,\\n        uint256 executionFee\\n    ) {\\n        DecreaseOrder memory order = decreaseOrders[_account][_orderIndex];\\n        return (\\n        order.collateralToken,\\n        order.collateralDelta,\\n        order.indexToken,\\n        order.sizeDelta,\\n        order.isLong,\\n        order.triggerPrice,\\n        order.triggerAboveThreshold,\\n        order.executionFee\\n        );\\n    }\\n    function validatePositionOrderPrice(\\n        bool _triggerAboveThreshold,\\n        uint256 _triggerPrice,\\n        address _indexToken,\\n        bool _maximizePrice,\\n        bool _raise\\n    ) public view returns (uint256, bool) {\\n        uint256 currentPrice = _maximizePrice\\n        ? IVault(vault).getMaxPrice(_indexToken) : IVault(vault).getMinPrice(_indexToken);\\n        bool isPriceValid = _triggerAboveThreshold ? currentPrice > _triggerPrice : currentPrice < _triggerPrice;\\n        if (_raise) {\\n            require(isPriceValid, \\\"OrderBook: invalid price for execution\\\");\\n        }\\n        return (currentPrice, isPriceValid);\\n    }\\n}\",\"keccak256\":\"0x7d2beaed330505cf0201fad988946dcbb6de700fc6a7c3eb73c7f6aeb97033e3\",\"license\":\"MIT\"},\"contracts/core/storage/OrderBookAggregators.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\nimport \\\"../../tokens/interfaces/IWETH.sol\\\";\\nimport \\\"../../libraries/math/SafeMath.sol\\\";\\nimport \\\"../../libraries/token/IERC20.sol\\\";\\nimport \\\"../../libraries/token/SafeERC20.sol\\\";\\nimport \\\"../../libraries/utils/Address.sol\\\";\\nimport \\\"../../libraries/utils/ReentrancyGuard.sol\\\";\\nimport \\\"../../libraries/DataTypes.sol\\\";\\nimport \\\"../../libraries/Errors.sol\\\";\\nimport \\\"../../libraries/Constants.sol\\\";\\nimport \\\"../../libraries/Events.sol\\\";\\nimport \\\"../interfaces/IRouter.sol\\\";\\nimport \\\"../interfaces/IVault.sol\\\";\\nimport \\\"../interfaces/IOrderBook.sol\\\";\\nabstract contract OrderBookAggregators is ReentrancyGuard, IOrderBook {\\n}\",\"keccak256\":\"0xb27894d6af1cd9066666ad6cd3160e04ca079b31057916578fcb8b23d10dc2cb\",\"license\":\"MIT\"},\"contracts/core/storage/OrderBookStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\nimport \\\"./OrderBookAggregators.sol\\\";\\n\\nabstract contract OrderBookStorage is OrderBookAggregators {\\n\\n    /* constructor */\\n    address public router;\\n    address public vault;\\n    address public weth;\\n    address public zkusd;\\n\\n    /* settings */\\n    uint256 public minExecutionFee;\\n    address public gov;\\n\\n    struct IncreaseOrder {\\n        address account;\\n        address purchaseToken;\\n        uint256 purchaseTokenAmount;\\n        address collateralToken;\\n        address indexToken;\\n        uint256 sizeDelta;\\n        bool isLong;\\n        uint256 triggerPrice;\\n        bool triggerAboveThreshold;\\n        uint256 executionFee;\\n    }\\n\\n    struct DecreaseOrder {\\n        address account;\\n        address collateralToken;\\n        uint256 collateralDelta;\\n        address indexToken;\\n        uint256 sizeDelta;\\n        bool isLong;\\n        uint256 triggerPrice;\\n        bool triggerAboveThreshold;\\n        uint256 executionFee;\\n    }\\n\\n    mapping (address => mapping(uint256 => IncreaseOrder)) public increaseOrders; // account => index => order\\n    mapping (address => uint256) public increaseOrdersIndex; // account => index\\n    mapping (address => mapping(uint256 => DecreaseOrder)) public decreaseOrders;\\n    mapping (address => uint256) public decreaseOrdersIndex;\\n\\n     /* misc */\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n    using Address for address payable;\\n    modifier onlyGov() {\\n        require(msg.sender == gov, Errors.ORDERBOOK_FORBIDDEN);\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x9d3c1bb3aad07dd9fcfb5c3ec9eb9f8a788fa4095ab2ad259591bc7031ce9a83\",\"license\":\"MIT\"},\"contracts/libraries/Constants.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\nlibrary Constants {\\n    /* BASE */\\n    string public constant ZKDX_ID = \\\"ZKDX\\\";\\n    string public constant ZKDX_TOKEN_NAME = \\\"ZKDX\\\";\\n    string public constant ZKDX_TOKEN_SYMBOL = \\\"ZKDX\\\";\\n    string public constant ZKDLP_ID = \\\"ZKDLP\\\";\\n    string public constant ZKDLP_TOKEN_NAME = \\\"ZKDLP\\\";\\n    string public constant ZKDLP_TOKEN_SYMBOL = \\\"ZKDLP\\\";\\n\\n    string public constant ZKUSD_TOKEN_NAME = \\\"ZKUSD\\\";\\n    string public constant ZKUSD_TOKEN_SYMBOL = \\\"ZKUSD\\\";\\n    /* VaultPriceFeed.sol */\\n    uint256 public constant PRICE_PRECISION = 10 ** 30;\\n    uint256 public constant ONE_USD = PRICE_PRECISION;\\n    uint256 public constant BASIS_POINTS_DIVISOR = 10000;\\n    uint256 public constant MAX_SPREAD_BASIS_POINTS = 50;\\n    uint256 public constant MAX_ADJUSTMENT_INTERVAL = 2 hours;\\n    uint256 public constant MAX_ADJUSTMENT_BASIS_POINTS = 20;\\n    address constant internal FLAG_ARBITRUM_SEQ_OFFLINE = address(bytes20(bytes32(uint256(keccak256(\\\"chainlink.flags.arbitrum-seq-offline\\\")) - 1)));\\n    /* VaultUtils.sol */\\n    uint256 public constant FUNDING_RATE_PRECISION = 1000000;\\n\\n    /* Vault.sol*/\\n    uint256 public constant MIN_LEVERAGE = 10000; // 1x\\n    uint256 public constant ZKUSD_DECIMALS = 18;\\n    uint256 public constant MAX_FEE_BASIS_POINTS = 500; // 5%\\n    uint256 public constant MAX_LIQUIDATION_FEE_USD = 100 * PRICE_PRECISION; // 100 USD\\n\\n    /* OrderBook.sol */\\n    uint256 public constant ZKUSD_PRECISION = 1e18;\\n\\n    /* ZKDLP.sol */\\n    uint256 public constant ZKDLP_PRECISION = 10 ** 18;\\n    uint256 public constant MAX_COOLDOWN_DURATION = 48 hours;\\n\\n    /* ShortsTracker */\\n    uint256 public constant MAX_INT256 = uint256(type(int256).max);\\n}\\n\",\"keccak256\":\"0x049f7d98dc0cb5204187c07330c81fc8057c9471f912763fdc11f80d2ee95fb0\",\"license\":\"MIT\"},\"contracts/libraries/DataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\nlibrary DataTypes {\\n    struct IncreaseOrder {\\n        address account;\\n        address purchaseToken;\\n        uint256 purchaseTokenAmount;\\n        address collateralToken;\\n        address indexToken;\\n        uint256 sizeDelta;\\n        bool isLong;\\n        uint256 triggerPrice;\\n        bool triggerAboveThreshold;\\n        uint256 executionFee;\\n    }\\n    struct DecreaseOrder {\\n        address account;\\n        address collateralToken;\\n        uint256 collateralDelta;\\n        address indexToken;\\n        uint256 sizeDelta;\\n        bool isLong;\\n        uint256 triggerPrice;\\n        bool triggerAboveThreshold;\\n        uint256 executionFee;\\n    }\\n    struct SwapOrder {\\n        address account;\\n        address[] path;\\n        uint256 amountIn;\\n        uint256 minOut;\\n        uint256 triggerRatio;\\n        bool triggerAboveThreshold;\\n        bool shouldUnwrap;\\n        uint256 executionFee;\\n    }\\n\\n    /* Vault.sol */\\n    struct Position {\\n        uint256 size;\\n        uint256 collateral;\\n        uint256 averagePrice; // col average price\\n        uint256 entryFundingRate;\\n        uint256 reserveAmount;\\n        int256 realisedPnl;\\n        uint256 lastIncreasedTime;\\n    }\\n}\",\"keccak256\":\"0xc2404513fd45cc58ff02548d0e5a9de8c3f4f2664890b317814e9680916e6d35\",\"license\":\"MIT\"},\"contracts/libraries/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\nlibrary Errors {\\n    /* Timelock Error Message*/\\n    string public constant Timelock_Invalid_Target = \\\"Timelock: invalid _target\\\";\\n    string public constant Timelock_Invalid_Buffer = \\\"Timelock: invalid _buffer\\\";\\n    string public constant Timelock_Buffer_Cannot_Be_Decreased = \\\"Timelock: buffer cannot be decreased\\\";\\n    string public constant Timelock_invalid_maxLeverage = \\\"Timelock: invalid _maxLeverage\\\";\\n    string public constant Timelock_invalid_fundingRateFactor = \\\"Timelock: invalid _fundingRateFactor\\\";\\n    string public constant Timelock_invalid_stableFundingRateFactor = \\\"Timelock: invalid _stableFundingRateFactor\\\";\\n    string public constant TIMELOCK_INVALID_MAXGASPRICE = \\\"Invalid _maxGasPrice\\\";\\n    string public constant TIMELOCK_INVALID_LENGTHS = \\\"Timelock: invalid lengths\\\";\\n    string public constant TIMELOCK_MAXTOKENSUPPLY_EXCEEDED = \\\"Timelock: maxTokenSupply exceeded\\\";\\n    string public constant TIMELOCK_ACTION_ALREADY_SIGNALLED = \\\"Timelock: action already signalled\\\";\\n    string public constant TIMELOCK_ACTION_NOT_SIGNALLED = \\\"Timelock: action not signalled\\\";\\n    string public constant TIMELOCK_ACTION_TIME_NOT_YET_PASSED = \\\"Timelock: action time not yet passed\\\";\\n    string public constant TIMELOCK_INVALID_ACTION = \\\"Timelock: invalid _action\\\";\\n    string public constant TIMELOCK_INVALID_BUFFER = \\\"Timelock: invalid _buffer\\\";\\n    /* ZKUSD.sol*/\\n    string public constant ZKUSD_FORBIDDEN = \\\"ZKUSD: forbidden\\\";\\n    /* BasePositionManagers.sol */\\n    string public constant BASEPOSITIONMANAGER_MARK_PRICE_LOWER_THAN_LIMIT      = \\\"BasePositionManager: mark price lower than limit\\\";\\n    string public constant BASEPOSITIONMANAGER_MARK_PRICE_HIGHER_THAN_LIMIT     = \\\"BasePositionManager: mark price higher than limit\\\";\\n    string public constant BASEPOSITIONMANAGER_INVALID_PATH_LENGTH              = \\\"BasePositionManager: invalid _path.length\\\";\\n    string public constant BASEPOSITIONMANAGER_INSUFFICIENT_AMOUNTOUT           = \\\"BasePositionManager: insufficient amountOut\\\";\\n    string public constant BASEPOSITIONMANAGER_MAX_GLOBAL_LONGS_EXCEEDED        = \\\"BasePositionManager: max global longs exceeded\\\";\\n    string public constant BASEPOSITIONMANAGER_MAX_GLOBAL_SHORTS_EXCEEDED       = \\\"BasePositionManager: max global shorts exceeded\\\";\\n    string public constant BASEPOSITIONMANAGER_INVALID_SENDER                   = \\\"BasePositionManager: invalid sender\\\";\\n    string public constant BASEPOSITIONMANAGER_TRANSFER_OUT_FAILED              = \\\"BasePositionManager: failed to transfer out ether\\\";\\n    /* PositionManager.sol */\\n    string public constant POSITIONMANAGER_INVALID_PATH_LENGTH                  = \\\"PositionManager: invalid _path.length\\\";\\n    string public constant POSITIONMANAGER_INVALID_PATH                         = \\\"PositionManager: invalid _path\\\";\\n    string public constant POSITIONMANAGER_LONG_DEPOSIT                         = \\\"PositionManager: long deposit\\\";\\n    string public constant POSITIONMANAGER_LONG_LEVERAGE_DECREASE               = \\\"PositionManager: long leverage decrease\\\";\\n    string public constant POSITIONMANAGER_FORBIDDEN                            = \\\"PositionManager: forbidden\\\";\\n    string public constant POSITIONMANAGER_INSUFFICIENT_FEE                     = \\\"PositionManager: insufficient fee\\\";\\n    /* Router.sol*/\\n    string public constant ROUTER_FORBIDDEN                                     = \\\"Router: forbidden\\\";\\n    /* ZkdlpManager.sol */\\n    string public constant ZKDLPMANAGER_ACTION_NOT_ENABLED                      = \\\"ZkdlpManager: action not enabled\\\";\\n    string public constant ZKDLPMANAGER_INVALID_WEIGHT                          = \\\"ZkdlpManager: invalid weight\\\";\\n    string public constant ZKDLPMANAGER_INVALID_COOLDOWNDURATION                = \\\"ZkdlpManager: invalid _cooldownDuration\\\";\\n    string public constant ZKDLPMANAGER_INVALID_AMOUNT                          = \\\"ZkdlpManager: invalid _amount\\\";\\n    string public constant ZKDLPMANAGER_INSUFFICIENT_ZKUSD_OUTPUT               = \\\"ZkdlpManager: insufficient ZKUSD output\\\";\\n    string public constant ZKDLPMANAGER_INSUFFICIENT_ZKDLP_OUTPUT               = \\\"ZkdlpManager: insufficient ZKDLP output\\\";\\n    string public constant ZKDLPMANAGER_INVALID_ZKDLPAMOUNT                     = \\\"ZkdlpManager: invalid _ZKDLPAmount\\\";\\n    string public constant ZKDLPMANAGER_COOLDOWN_DURATION_NOT_YET_PASSED        = \\\"ZkdlpManager: cooldown duration not yet passed\\\";\\n    string public constant ZKDLPMANAGER_INSUFFICIENT_OUTPUT                     = \\\"ZkdlpManager: insufficient output\\\";\\n    string public constant ZKDLPMANAGER_FORBIDDEN                               = \\\"ZkdlpManager: forbidden\\\";\\n    /* ShortsTrack.sol*/\\n    string public constant SHORTSTRACKER_FORBIDDEN                              = \\\"ShortsTracker: forbidden\\\";\\n    string public constant SHORTSTRACKER_INVALID_HANDLER                        = \\\"ShortsTracker: invalid _handler\\\";\\n    string public constant SHORTSTRACKER_ALREADY_MIGRATED                       = \\\"ShortsTracker: already migrated\\\";\\n    string public constant SHORTSTRACKER_OVERFLOW                               = \\\"ShortsTracker: overflow\\\";\\n    /* VaultUtils.sol*/\\n    string public constant VAULT_LOSSES_EXCEED_COLLATERAL                       = \\\"Vault: losses exceed collateral\\\";\\n    string public constant VAULT_FEES_EXCEED_COLLATERAL                         = \\\"Vault: fees exceed collateral\\\";\\n    string public constant VAULT_LIQUIDATION_FEES_EXCEED_COLLATERAL             = \\\"Vault: liquidation fees exceed collateral\\\";\\n    string public constant VAULT_MAXLEVERAGE_EXCEEDED                           = \\\"Vault: maxLeverage exceeded\\\";\\n    /* VaultInternal.sol*/\\n    string internal constant VAULT_POOLAMOUNT_EXCEEDED                          = \\\"Vault: poolAmount exceeded\\\";\\n    string internal constant VAULT_INSUFFICIENT_RESERVE                         = \\\"Vault: insufficient reserve\\\";\\n    string internal constant VAULT_MAX_SHORTS_EXCEEDED                          = \\\"Vault: max shorts exceeded\\\";\\n    string internal constant VAULT_POOLAMOUNT_BUFFER                            = \\\"Vault: poolAmount < buffer\\\";\\n    string internal constant VAULT_INVALID_ERRORCONTROLLER                      = \\\"Vault: invalid errorController\\\";\\n    /* Router.sol */\\n    string internal constant ROUTER_INVALID_SENDER                              = \\\"Router: invalid sender\\\";\\n    string internal constant ROUTER_INVALID_PATH                                = \\\"Router: invalid _path\\\";\\n    string internal constant ROUTER_MARK_PRICE_HIGHER_THAN_LIMIT                = \\\"Router: mark price higher than limit\\\";\\n    string internal constant ROUTER_MARK_PRICE_LOWER_THAN_LIMIT                 = \\\"Router: mark price lower than limit\\\";\\n    string internal constant ROUTER_INVALID_PATH_LENGTH                         = \\\"Router: invalid _path.length\\\";\\n    string internal constant ROUTER_INSUFFICIENT_AMOUNTOUT                      = \\\"Router: insufficient amountOut\\\";\\n    string internal constant ROUTER_INVALID_PLUGIN                              = \\\"Router: invalid plugin\\\";\\n    /* OrderBook.sol*/\\n    string internal constant ORDERBOOK_FORBIDDEN                                = \\\"OrderBook: forbidden\\\";\\n    string internal constant ORDERBOOK_ALREADY_INITIALIZED                      = \\\"OrderBook: already initialized\\\";\\n    string internal constant ORDERBOOK_INVALID_SENDER                           = \\\"OrderBook: invalid sender\\\";\\n    string internal constant ORDERBOOK_INVALID_PATH_LENGTH                      = \\\"OrderBook: invalid _path.length\\\";\\n    string internal constant ORDERBOOK_INVALID_PATH                             = \\\"OrderBook: invalid _path\\\";\\n    string internal constant ORDERBOOK_INVALID_AMOUNTIN                         = \\\"OrderBook: invalid _amountIn\\\";\\n    string internal constant ORDERBOOK_INSUFFICIENT_EXECUTION_FEE               = \\\"OrderBook: insufficient execution fee\\\";\\n    string internal constant ORDERBOOK_ONLY_WETH_COULD_BE_WRAPPED               = \\\"OrderBook: only weth could be wrapped\\\";\\n    string internal constant ORDERBOOK_INCORRECT_VALUE_TRANSFERRED              = \\\"OrderBook: incorrect value transferred\\\";\\n    string internal constant ORDERBOOK_INCORRECT_EXECUTION_FEE_TRANSFERRED      = \\\"OrderBook: incorrect execution fee transferred\\\";\\n    string internal constant ORDERBOOK_NON_EXISTENT_ORDER                       = \\\"OrderBook: non-existent order\\\";\\n    string internal constant ORDERBOOK_INVALID_PRICE_FOR_EXECUTION              = \\\"OrderBook: invalid price for execution\\\";\\n    string internal constant ORDERBOOK_INSUFFICIENT_COLLATERAL                  = \\\"OrderBook: insufficient collateral\\\";\\n    string internal constant ORDERBOOK_INSUFFICIENT_AMOUNTOUT                   = \\\"OrderBook: insufficient amountOut\\\";\\n    /* RewardRouterV2.sol */\\n    string internal constant REWARDROUTER_INVALID_AMOUNT                        = \\\"RewardRouter: invalid _amount\\\";\\n    string internal constant REWARDROUTER_INVALID_MSG_VALUE                     = \\\"RewardRouter: invalid msg.value\\\";\\n    string internal constant REWARDROUTER_ALREADY_INITIALIZED                   = \\\"RewardRouter: already initialized\\\";\\n    string internal constant REWARDROUTER_INVALID_ZKUSDAMOUNT                   = \\\"RewardRouter: invalid _zkusdAmount\\\";\\n\\n    /* YieldToken.sol */\\n    string public constant YIELDTOKEN_ACCOUNT_ALREADY_MARKED                    = \\\"YieldToken: _account already marked\\\";\\n    string public constant YIELDTOKEN_ACCOUNT_NOT_MARKED                        = \\\"YieldToken: _account not marked\\\";\\n    string public constant YIELDTOKEN_TRANSFER_AMOUNT_EXCEEDS_ALLOWANCE         = \\\"YieldToken: transfer amount exceeds allowance\\\";\\n    string public constant YIELDTOKEN_MINT_TO_THE_ZERO_ADDRESS                  = \\\"YieldToken: mint to the zero address\\\";\\n    string public constant YIELDTOKEN_BURN_FROM_THE_ZERO_ADDRESS                = \\\"YieldToken: burn from the zero address\\\";\\n    string public constant YIELDTOKEN_BURN_AMOUNT_EXCEEDS_BALANCE               = \\\"YieldToken: burn amount exceeds balance\\\";\\n    string public constant YIELDTOKEN_TRANSFER_FROM_THE_ZERO_ADDRESS            = \\\"YieldToken: transfer from the zero address\\\";\\n    string public constant YIELDTOKEN_TRANSFER_TO_THE_ZERO_ADDRESS              = \\\"YieldToken: transfer to the zero address\\\";\\n    string public constant YIELDTOKEN_MSG_SENDER_NOT_WHITELISTED                = \\\"YieldToken: msg.sender not whitelisted\\\";\\n    string public constant YIELDTOKEN_TRANSFER_AMOUNT_EXCEEDS_BALANCE           = \\\"YieldToken: transfer amount exceeds balance\\\";\\n    string public constant YIELDTOKEN_APPROVE_FROM_THE_ZERO_ADDRESS             = \\\"YieldToken: approve from the zero address\\\";\\n    string public constant YIELDTOKEN_APPROVE_TO_THE_ZERO_ADDRESS               = \\\"YieldToken: approve to the zero address\\\";\\n\\n    string public constant MINTABLEBASETOKEN_FORBIDDEN                          = \\\"MintableBaseToken: forbidden\\\";\\n    string public constant BASETOKEN_FORBIDDEN                                  = \\\"BaseToken: forbidden\\\";\\n    string public constant BASETOKEN_ACCOUNT_ALREADY_MARKED                     = \\\"BaseToken: _account already marked\\\";\\n    string public constant BASETOKEN_ACCOUNT_NOT_MARKED                         = \\\"BaseToken: _account not marked\\\";\\n    string public constant BASETOKEN_TRANSFER_AMOUNT_EXCEEDS_ALLOWANCE          = \\\"BaseToken: transfer amount exceeds allowance\\\";\\n    string public constant BASETOKEN_MINT_TO_THE_ZERO_ADDRESS                   = \\\"BaseToken: mint to the zero address\\\";\\n    string public constant BASETOKEN_BURN_FROM_THE_ZERO_ADDRESS                 = \\\"BaseToken: burn from the zero address\\\";\\n    string public constant BASETOKEN_BURN_AMOUNT_EXCEEDS_BALANCE                = \\\"BaseToken: burn amount exceeds balance\\\";\\n    string public constant BASETOKEN_TRANSFER_FROM_THE_ZERO_ADDRESS             = \\\"BaseToken: transfer from the zero address\\\";\\n    string public constant BASETOKEN_TRANSFER_TO_THE_ZERO_ADDRESS               = \\\"BaseToken: transfer to the zero address\\\";\\n    string public constant BASETOKEN_MSG_SENDER_NOT_WHITELISTED                 = \\\"BaseToken: msg.sender not whitelisted\\\";\\n    string public constant BASETOKEN_TRANSFER_AMOUNT_EXCEEDS_BALANCE            = \\\"BaseToken: transfer amount exceeds balance\\\";\\n    string public constant BASETOKEN_APPROVE_FROM_THE_ZERO_ADDRESS              = \\\"BaseToken: approve from the zero address\\\";\\n    string public constant BASETOKEN_APPROVE_TO_THE_ZERO_ADDRESS                = \\\"BaseToken: approve to the zero address\\\";\\n}\\n\",\"keccak256\":\"0x05483ba94e083a7e9f288fa9e1ea4d0961880cf669c779b8ad46747b205615d8\",\"license\":\"MIT\"},\"contracts/libraries/Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\nlibrary Events {\\n    /* BasePositionManager Events */\\n    event SetDepositFee(uint256 depositFee);\\n    event SetIncreasePositionBufferBps(uint256 increasePositionBufferBps);\\n    event SetAdmin(address admin);\\n    event WithdrawFees(address token, address receiver, uint256 amount);\\n    event SetMaxGlobalSizes(address[] tokens, uint256[] longSizes, uint256[] shortSizes);\\n    /*Position Manager Events*/\\n    event SetOrderKeeper(address indexed account, bool isActive);\\n    event SetLiquidator(address indexed account, bool isActive);\\n    event SetPartner(address account, bool isActive);\\n    event SetOpened(bool opened);\\n    event SetShouldValidateIncreaseOrder(bool shouldValidateIncreaseOrder);\\n    /* Orderbook.sol events */\\n    event CreateSwapOrder(\\n        address indexed account, uint256 orderIndex,\\n        address[] path, uint256 amountIn, uint256 minOut,\\n        uint256 triggerRatio, bool triggerAboveThreshold, bool shouldUnwrap, uint256 executionFee);\\n    event CancelSwapOrder(\\n        address indexed account, uint256 orderIndex,\\n        address[] path, uint256 amountIn, uint256 minOut,\\n        uint256 triggerRatio, bool triggerAboveThreshold, bool shouldUnwrap, uint256 executionFee);\\n    event UpdateSwapOrder(\\n        address indexed account, uint256 ordexIndex, address[] path, uint256 amountIn, uint256 minOut, uint256 triggerRatio, bool triggerAboveThreshold, bool shouldUnwrap, uint256 executionFee);\\n    event ExecuteSwapOrder(\\n        address indexed account, uint256 orderIndex,\\n        address[] path, uint256 amountIn, uint256 minOut,\\n        uint256 amountOut, uint256 triggerRatio,\\n        bool triggerAboveThreshold, bool shouldUnwrap, uint256 executionFee);\\n    event Initialize(\\n        address router, address vault, address weth,\\n        address zkusd, uint256 minExecutionFee);\\n    event UpdateMinExecutionFee(uint256 minExecutionFee);\\n    event UpdateGov(address gov);\\n    /* Router.sol events*/\\n    event Swap(address account, address tokenIn, address tokenOut, uint256 amountIn, uint256 amountOut);\\n    /* ShortsTracker.sol events*/\\n    event GlobalShortDataUpdated(address indexed token, uint256 globalShortSize, uint256 globalShortAveragePrice);\\n    /* Vault.sol events */\\n    event BuyZKUSD(\\n        address account, address token,\\n        uint256 tokenAmount, uint256 zkusdAmount, uint256 feeBasisPoints);\\n    event SellZKUSD(\\n        address account, address token,\\n        uint256 zkusdAmount, uint256 tokenAmount, uint256 feeBasisPoints);\\n    event Swap(\\n        address account, address tokenIn,\\n        address tokenOut, uint256 amountIn,\\n        uint256 amountOut, uint256 amountOutAfterFees,\\n        uint256 feeBasisPoints);\\n    event IncreasePosition(\\n        bytes32 key, address account,\\n        address collateralToken, address indexToken,\\n        uint256 collateralDelta, uint256 sizeDelta,\\n        bool isLong, uint256 price, uint256 fee);\\n    event DecreasePosition(\\n        bytes32 key, address account,\\n        address collateralToken, address indexToken,\\n        uint256 collateralDelta, uint256 sizeDelta,\\n        bool isLong, uint256 price, uint256 fee);\\n    event LiquidatePosition(\\n        bytes32 key, address account, address collateralToken,\\n        address indexToken, bool isLong, uint256 size,\\n        uint256 collateral, uint256 reserveAmount, int256 realisedPnl, uint256 markPrice);\\n    event UpdatePosition(\\n        bytes32 key, uint256 size, uint256 collateral,\\n        uint256 averagePrice, uint256 entryFundingRate,\\n        uint256 reserveAmount, int256 realisedPnl, uint256 markPrice);\\n    event ClosePosition(\\n        bytes32 key, uint256 size, uint256 collateral,\\n        uint256 averagePrice, uint256 entryFundingRate, uint256 reserveAmount, int256 realisedPnl);\\n    event UpdateFundingRate(address token, uint256 fundingRate);\\n    event UpdatePnl(bytes32 key, bool hasProfit, uint256 delta);\\n    event CollectSwapFees(address token, uint256 feeUsd, uint256 feeTokens);\\n    event CollectMarginFees(address token, uint256 feeUsd, uint256 feeTokens);\\n    event DirectPoolDeposit(address token, uint256 amount);\\n    event IncreasePoolAmount(address token, uint256 amount);\\n    event DecreasePoolAmount(address token, uint256 amount);\\n    event IncreaseZkusdAmount(address token, uint256 amount);\\n    event DecreaseZkusdAmount(address token, uint256 amount);\\n    event IncreaseReservedAmount(address token, uint256 amount);\\n    event DecreaseReservedAmount(address token, uint256 amount);\\n    event IncreaseGuaranteedUsd(address token, uint256 amount);\\n    event DecreaseGuaranteedUsd(address token, uint256 amount);\\n    /* Timelock.sol events */\\n    event SignalPendingAction(bytes32 action);\\n    event SignalApprove(address token, address spender, uint256 amount, bytes32 action);\\n    event SignalWithdrawToken(address target, address token, address receiver, uint256 amount, bytes32 action);\\n    event SignalMint(address token, address receiver, uint256 amount, bytes32 action);\\n    event SignalSetGov(address target, address gov, bytes32 action);\\n    event SignalSetHandler(address target, address handler, bool isActive, bytes32 action);\\n    event SignalSetPriceFeed(address vault, address priceFeed, bytes32 action);\\n    event SignalRedeemZkusd(address vault, address token, uint256 amount);\\n    event SignalVaultSetTokenConfig(\\n        address vault, address token, uint256 tokenDecimals,\\n        uint256 tokenWeight, uint256 minProfitBps, uint256 maxZkusdAmount,\\n        bool isStable, bool isShortable);\\n    event ClearAction(bytes32 action);\\n    /* ZkdlpManager.sol */\\n    event AddLiquidity(address account, address token, uint256 amount, uint256 aumInUsd, uint256 zkdlpSupply, uint256 zkusdAmount, uint256 mintAmount);\\n    event RemoveLiquidity(address account, address token, uint256 zkdlpAmount, uint256 aumInUsd, uint256 zkdlpSupply, uint256 zkusdAmount, uint256 amountOut);\\n    /* RewardRouterV2 */\\n    event StakeZkdx(address account, address token, uint256 amount);\\n    event UnstakeZkdx(address account, address token, uint256 amount);\\n    event StakeZkdlp(address account, uint256 amount);\\n    event UnstakeZkdlp(address account, uint256 amount);\\n\\n    /* OrderBook.sol */\\n    event CreateIncreaseOrder(\\n        address indexed account,\\n        uint256 orderIndex,\\n        address purchaseToken,\\n        uint256 purchaseTokenAmount,\\n        address collateralToken,\\n        address indexToken,\\n        uint256 sizeDelta,\\n        bool isLong,\\n        uint256 triggerPrice,\\n        bool triggerAboveThreshold,\\n        uint256 executionFee\\n    );\\n\\n    event CancelIncreaseOrder(\\n        address indexed account,\\n        uint256 orderIndex,\\n        address purchaseToken,\\n        uint256 purchaseTokenAmount,\\n        address collateralToken,\\n        address indexToken,\\n        uint256 sizeDelta,\\n        bool isLong,\\n        uint256 triggerPrice,\\n        bool triggerAboveThreshold,\\n        uint256 executionFee\\n    );\\n\\n    event ExecuteIncreaseOrder(\\n        address indexed account,\\n        uint256 orderIndex,\\n        address purchaseToken,\\n        uint256 purchaseTokenAmount,\\n        address collateralToken,\\n        address indexToken,\\n        uint256 sizeDelta,\\n        bool isLong,\\n        uint256 triggerPrice,\\n        bool triggerAboveThreshold,\\n        uint256 executionFee,\\n        uint256 executionPrice\\n    );\\n\\n    event UpdateIncreaseOrder(\\n        address indexed account,\\n        uint256 orderIndex,\\n        address collateralToken,\\n        address indexToken,\\n        bool isLong,\\n        uint256 sizeDelta,\\n        uint256 triggerPrice,\\n        bool triggerAboveThreshold\\n    );\\n\\n    event CreateDecreaseOrder(\\n        address indexed account,\\n        uint256 orderIndex,\\n        address collateralToken,\\n        uint256 collateralDelta,\\n        address indexToken,\\n        uint256 sizeDelta,\\n        bool isLong,\\n        uint256 triggerPrice,\\n        bool triggerAboveThreshold,\\n        uint256 executionFee\\n    );\\n\\n    event CancelDecreaseOrder(\\n        address indexed account,\\n        uint256 orderIndex,\\n        address collateralToken,\\n        uint256 collateralDelta,\\n        address indexToken,\\n        uint256 sizeDelta,\\n        bool isLong,\\n        uint256 triggerPrice,\\n        bool triggerAboveThreshold,\\n        uint256 executionFee\\n    );\\n\\n    event ExecuteDecreaseOrder(\\n        address indexed account,\\n        uint256 orderIndex,\\n        address collateralToken,\\n        uint256 collateralDelta,\\n        address indexToken,\\n        uint256 sizeDelta,\\n        bool isLong,\\n        uint256 triggerPrice,\\n        bool triggerAboveThreshold,\\n        uint256 executionFee,\\n        uint256 executionPrice\\n    );\\n\\n    event UpdateDecreaseOrder(\\n        address indexed account,\\n        uint256 orderIndex,\\n        address collateralToken,\\n        uint256 collateralDelta,\\n        address indexToken,\\n        uint256 sizeDelta,\\n        bool isLong,\\n        uint256 triggerPrice,\\n        bool triggerAboveThreshold\\n    );\\n}\\n\",\"keccak256\":\"0x3656730f42a4614b3704801573c526b2a0da4f7d170071c50767a688bcd753f8\",\"license\":\"MIT\"},\"contracts/libraries/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x41b0da7db3e1f79b338824fed2bc4732430b78002a9d51c2cfa86ad5a12c2763\",\"license\":\"MIT\"},\"contracts/libraries/token/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xa3ce253082421a9e79d2b884ae6f60507b0cc73ea356674072091454c44cc556\",\"license\":\"MIT\"},\"contracts/libraries/token/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../math/SafeMath.sol\\\";\\nimport \\\"../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf80766b21ea67a73c81e0dea4543375243938c8b223e29c5d783be61ab3f424c\",\"license\":\"MIT\"},\"contracts/libraries/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.2;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x62dd54ef394959ddda751b6b9053803a746fa32c6b26cb8f871307687bb64e5f\",\"license\":\"MIT\"},\"contracts/libraries/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\ncontract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xae7a1e407ed171ecd3a0d3976875d6c58eefdccf831ebce6314ec94892dffc03\",\"license\":\"MIT\"},\"contracts/tokens/interfaces/IWETH.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\ninterface IWETH {\\n    function deposit() external payable;\\n    function transfer(address to, uint value) external returns (bool);\\n    function withdraw(uint) external;\\n}\",\"keccak256\":\"0x9322725581103de3f494f25318f2ebaf50100d57c2631a26d4c253833bc6bc23\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620028ad380380620028ad83398101604081905262000034916200009f565b6001600081905580546001600160a01b03199081166001600160a01b039788161790915560028054821695871695909517909455600380548516938616939093179092556004805484169190941617909255600591909155600680543392169190911790556200012b565b600080600080600060a08688031215620000b7578081fd5b8551620000c48162000112565b6020870151909550620000d78162000112565b6040870151909450620000ea8162000112565b6060870151909350620000fd8162000112565b80925050608086015190509295509295909350565b6001600160a01b03811681146200012857600080fd5b50565b612772806200013b6000396000f3fe6080604052600436106101395760003560e01c8063a397ea54116100ab578063d566d0ca1161006f578063d566d0ca146103f1578063f2d2e01b14610411578063f887ea4014610446578063fbfa77cf1461045b578063fc2cee6214610470578063ff637e8114610490576101a6565b8063a397ea541461033c578063aec224551461035c578063cfad57a21461037c578063d38ab5191461039c578063d3bab1d1146103bc576101a6565b806347e0bbd0116100fd57806347e0bbd0146102775780634c54f0b01461029757806363ae2103146102c55780639983ee1b146102e75780639bc90a0f146103075780639e71b0f01461031c576101a6565b8063026032ee146101ab57806311d9444a146101e857806312d43a511461020a5780632b7d62901461022c5780633fc8cef314610262576101a6565b366101a65760035460408051808201909152601981527827b93232b92137b7b59d1034b73b30b634b21039b2b73232b960391b6020820152906001600160a01b031633146101a35760405162461bcd60e51b815260040161019a919061228c565b60405180910390fd5b50005b600080fd5b3480156101b757600080fd5b506101cb6101c6366004611e43565b6104b0565b6040516101df989796959493929190612243565b60405180910390f35b3480156101f457600080fd5b50610208610203366004611e6e565b610585565b005b34801561021657600080fd5b5061021f610863565b6040516101df9190612060565b34801561023857600080fd5b5061024c610247366004611e43565b610872565b6040516101df9a99989796959493929190612124565b34801561026e57600080fd5b5061021f6108e4565b34801561028357600080fd5b50610208610292366004611f93565b6108f3565b3480156102a357600080fd5b506102b76102b2366004611f2c565b610b64565b6040516101df9291906126d6565b3480156102d157600080fd5b506102da610cbb565b6040516101df91906124e9565b3480156102f357600080fd5b50610208610302366004611fc3565b610cc1565b34801561031357600080fd5b5061021f610db8565b34801561032857600080fd5b50610208610337366004611f93565b610dc7565b34801561034857600080fd5b50610208610357366004612003565b610f9a565b34801561036857600080fd5b506102da610377366004611e27565b611084565b34801561038857600080fd5b50610208610397366004611e27565b611096565b3480156103a857600080fd5b506102086103b7366004611e6e565b611144565b3480156103c857600080fd5b506103dc6103d7366004611e43565b6114e1565b6040516101df999897969594939291906121ee565b3480156103fd57600080fd5b506102da61040c366004611e27565b6115c7565b34801561041d57600080fd5b5061043161042c366004611e43565b6115d9565b6040516101df99989796959493929190612180565b34801561045257600080fd5b5061021f611643565b34801561046757600080fd5b5061021f611652565b34801561047c57600080fd5b5061020861048b366004611f93565b611661565b34801561049c57600080fd5b506102086104ab366004611eaf565b6116ee565b6000806000806000806000806104c4611cf4565b505050506001600160a01b0396871660009081526009602090815260408083209883529781529087902087516101208101895281548a16815260018201548a169281018390526002820154988101899052600382015490991660608a01819052600482015460808b01819052600583015460ff908116151560a08d01819052600685015460c08e018190526007860154909216151560e08e01819052600890950154610100909d018d9052949c9a9b929a9199509397509295509093509150565b600260005414156105a85760405162461bcd60e51b815260040161019a906124b2565b60026000556105b5611cf4565b506001600160a01b0380841660009081526009602090815260408083208684528252918290208251610120810184528154851680825260018301548616938201939093526002820154938101939093526003810154909316606083015260048301546080830152600583015460ff908116151560a0840152600684015460c0840152600784015416151560e08301526008909201546101008201529061066d5760405162461bcd60e51b815260040161019a90612431565b600061068e8260e001518360c0015184606001518560a00151156001610b64565b506001600160a01b038087166000908152600960209081526040808320898452825280832080546001600160a01b03199081168255600180830180548316905560028301869055600383018054909216909155600480830186905560058301805460ff1990811690915560068401879055600784018054909116905560089092018590555488519389015160608a01518a85015160808c015160a08d01519651632662166b60e01b81529a9b5097999390981697632662166b9761075f9796939592949193909290913091016120e5565b602060405180830381600087803b15801561077957600080fd5b505af115801561078d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107b19190611fab565b835160208501519192506107cf916001600160a01b03169083611754565b6107de836101000151856117aa565b82600001516001600160a01b03167f9a382661d6573da86db000471303be6f0b2b1bb66089b08e3c16a85d7b6e94f88685602001518660400151876060015188608001518960a001518a60c001518b60e001518c61010001518c60405161084e9a99989796959493929190612680565b60405180910390a25050600160005550505050565b6006546001600160a01b031681565b6007602081815260009384526040808520909152918352912080546001820154600283015460038401546004850154600586015460068701549787015460088801546009909801546001600160a01b0397881699968816989597948516969490931694919360ff90811693919216908a565b6003546001600160a01b031681565b600260005414156109165760405162461bcd60e51b815260040161019a906124b2565b6002600055610923611d40565b5033600090815260076020818152604080842085855282529283902083516101408101855281546001600160a01b03908116808352600184015482169483019490945260028301549582019590955260038201548516606082015260048201549094166080850152600581015460a0850152600681015460ff908116151560c08601529281015460e0850152600881015490921615156101008401526009909101546101208301526109e75760405162461bcd60e51b815260040161019a90612431565b3360009081526007602081815260408084208685528252832080546001600160a01b03199081168255600182018054821690556002820185905560038083018054831690556004830180549092169091556005820185905560068201805460ff199081169091559382018590556008820180549094169093556009019290925554908201516001600160a01b0390811691161415610aa957610aa4610a9e826040015183610120015161188890919063ffffffff16565b336117aa565b610ade565b610acf33826040015183602001516001600160a01b03166117549092919063ffffffff16565b610ade816101200151336117aa565b80600001516001600160a01b03167fd500f34e0ec655b7614ae42e1d9c666d5e4dde909a1297829f8c5ecf00805d328383602001518460400151856060015186608001518760a001518860c001518960e001518a61010001518b6101200151604051610b539a99989796959493929190612530565b60405180910390a250506001600055565b600080600084610bf3576002546040516340d3096b60e11b81526001600160a01b03909116906381a612d690610b9e908990600401612060565b60206040518083038186803b158015610bb657600080fd5b505afa158015610bca573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bee9190611fab565b610c73565b600254604051637092736960e11b81526001600160a01b039091169063e124e6d290610c23908990600401612060565b60206040518083038186803b158015610c3b57600080fd5b505afa158015610c4f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c739190611fab565b9050600088610c8457878210610c88565b8782115b90508415610cad5780610cad5760405162461bcd60e51b815260040161019a906123eb565b909890975095505050505050565b60055481565b60026000541415610ce45760405162461bcd60e51b815260040161019a906124b2565b60026000908155338152600760209081526040808320878452909152902080546001600160a01b0316610d295760405162461bcd60e51b815260040161019a90612431565b6007810183905560088101805460ff19168315151790556005810184905560038101546004820154600683015460405133937f0a0360dd5c354235bbf8d386ba3b24ef8134088e0785677de1504df219d9149a93610da4938b936001600160a01b03938416939092169160ff909116908b908b908b906124f2565b60405180910390a250506001600055505050565b6004546001600160a01b031681565b60026000541415610dea5760405162461bcd60e51b815260040161019a906124b2565b6002600055610df7611cf4565b5033600090815260096020908152604080832084845282529182902082516101208101845281546001600160a01b0390811680835260018401548216948301949094526002830154948201949094526003820154909316606084015260048101546080840152600581015460ff908116151560a0850152600682015460c0850152600782015416151560e084015260080154610100830152610eab5760405162461bcd60e51b815260040161019a90612431565b336000818152600960209081526040808320868452909152812080546001600160a01b03199081168255600182018054821690556002820183905560038201805490911690556004810182905560058101805460ff1990811690915560068201839055600782018054909116905560080155610100820151610f2c916117aa565b80600001516001600160a01b03167f1154174c82984656b028c8021671988f60a346497e56fe02554761184f82a0758383602001518460400151856060015186608001518760a001518860c001518960e001518a6101000151604051610b5399989796959493929190612630565b60026000541415610fbd5760405162461bcd60e51b815260040161019a906124b2565b60026000908155338152600960209081526040808320888452909152902080546001600160a01b03166110025760405162461bcd60e51b815260040161019a90612431565b6006810183905560078101805460ff1916831515179055600481018490556002810185905560018101546003820154600583015460405133937f75781255bc71c83f89f29e5a2599f2c174a562d2cd8f2e818a47f132e72804989361084e938c936001600160a01b03938416938d9316918c9160ff909116908c908c906125e9565b60086020526000908152604090205481565b60065460408051808201909152601481527327b93232b92137b7b59d103337b93134b23232b760611b6020820152906001600160a01b031633146110ed5760405162461bcd60e51b815260040161019a919061228c565b50600680546001600160a01b0319166001600160a01b0383161790556040517fe24c39186e9137521953beaa8446e71f55b8f12296984f9d4273ceb1af728d9090611139908390612060565b60405180910390a150565b600260005414156111675760405162461bcd60e51b815260040161019a906124b2565b6002600055611174611d40565b506001600160a01b03808416600090815260076020818152604080842087855282529283902083516101408101855281548616808252600183015487169382019390935260028201549481019490945260038101548516606085015260048101549094166080840152600584015460a0840152600684015460ff908116151560c08501529184015460e0840152600884015490911615156101008301526009909201546101208201529061123a5760405162461bcd60e51b815260040161019a90612431565b600061125b8261010001518360e0015184608001518560c001516001610b64565b506001600160a01b0380871660009081526007602081815260408084208a8552825280842080546001600160a01b03199081168255600182018054821690556002808301879055600383018054831690556004830180549092169091556005820186905560068201805460ff199081169091559482018690556008820180549095169094556009019390935590549186015190860151939450611305938316929190911690611754565b81606001516001600160a01b031682602001516001600160a01b0316146113dd57604080516002808252606080830184529260208301908036833701905050905082602001518160008151811061135857fe5b60200260200101906001600160a01b031690816001600160a01b03168152505082606001518160018151811061138a57fe5b60200260200101906001600160a01b031690816001600160a01b03168152505060006113b8826000306118b4565b60025460608601519192506113da916001600160a01b03908116911683611754565b50505b60015482516060840151608085015160a086015160c0870151604051630f8ee8bb60e11b81526001600160a01b0390961695631f1dd176956114299590949093909290916004016120b1565b600060405180830381600087803b15801561144357600080fd5b505af1158015611457573d6000803e3d6000fd5b5050505061146a826101200151846117aa565b81600001516001600160a01b03167f7fb1c74d1ea6aa1c9c585e17ce8274c8ff98745e85e7459b73f87d784494f58e8584602001518560400151866060015187608001518860a001518960c001518a60e001518b61010001518c61012001518c604051610da49b9a99989796959493929190612587565b60008060008060008060008060006114f7611d40565b505050506001600160a01b0397881660009081526007602081815260408084209a845299815291899020895161014081018b5281548c16815260018201548c1693810184905260028201549a81018b905260038201548c16606082018190526004830154909c1660808201819052600583015460a08301819052600684015460ff908116151560c085018190529585015460e08501819052600886015490911615156101008501819052600990950154610120909401849052959e9c9d9c919b5099509297509295509350909150565b600a6020526000908152604090205481565b60096020908152600092835260408084209091529082529020805460018201546002830154600384015460048501546005860154600687015460078801546008909801546001600160a01b03978816989688169795969490951694929360ff928316939192169089565b6001546001600160a01b031681565b6002546001600160a01b031681565b60065460408051808201909152601481527327b93232b92137b7b59d103337b93134b23232b760611b6020820152906001600160a01b031633146116b85760405162461bcd60e51b815260040161019a919061228c565b5060058190556040517fbde5eafdc37b81830d70124cddccaaa6d034e71dda3c8fc18a959ca76a7cbcfc906111399083906124e9565b60005b825181101561171e5761171683828151811061170957fe5b60200260200101516108f3565b6001016116f1565b5060005b815181101561174f5761174782828151811061173a57fe5b6020026020010151610dc7565b600101611722565b505050565b61174f8363a9059cbb60e01b84846040516024016117739291906121d5565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526119d9565b600354604051632e1a7d4d60e01b81526001600160a01b0390911690632e1a7d4d906117da9085906004016124e9565b600060405180830381600087803b1580156117f457600080fd5b505af1158015611808573d6000803e3d6000fd5b505050506000816001600160a01b0316836040516118259061205d565b60006040518083038185875af1925050503d8060008114611862576040519150601f19603f3d011682016040523d82523d6000602084013e611867565b606091505b505090508061174f5760405162461bcd60e51b815260040161019a906122f6565b6000828201838110156118ad5760405162461bcd60e51b815260040161019a906122bf565b9392505050565b60008351600214156118fb576118f4846000815181106118d057fe5b6020026020010151856001815181106118e557fe5b60200260200101518585611a68565b90506118ad565b8351600314156119c157600061193c8560008151811061191757fe5b60200260200101518660018151811061192c57fe5b6020026020010151600030611a68565b9050611985600260009054906101000a90046001600160a01b0316828760018151811061196557fe5b60200260200101516001600160a01b03166117549092919063ffffffff16565b6119b98560018151811061199557fe5b6020026020010151866002815181106119aa57fe5b60200260200101518686611a68565b9150506118ad565b60405162461bcd60e51b815260040161019a906123b4565b6060611a2e826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611c089092919063ffffffff16565b80519091501561174f5780806020019051810190611a4c9190611f10565b61174f5760405162461bcd60e51b815260040161019a90612468565b60045460009081906001600160a01b0386811691161415611b0e576002546040516354d33cf960e01b81526001600160a01b03909116906354d33cf990611ab59089908790600401612074565b602060405180830381600087803b158015611acf57600080fd5b505af1158015611ae3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b079190611fab565b9050611bdf565b6004546001600160a01b0387811691161415611b56576002546040516302718b5760e21b81526001600160a01b03909116906309c62d5c90611ab59088908790600401612074565b600254604051634998b10960e11b81526001600160a01b0390911690639331621290611b8a9089908990889060040161208e565b602060405180830381600087803b158015611ba457600080fd5b505af1158015611bb8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bdc9190611fab565b90505b83811015611bff5760405162461bcd60e51b815260040161019a90612373565b95945050505050565b6060611c178484600085611c1f565b949350505050565b606082471015611c415760405162461bcd60e51b815260040161019a9061232d565b60006060866001600160a01b03168587604051611c5e9190612041565b60006040518083038185875af1925050503d8060008114611c9b576040519150601f19603f3d011682016040523d82523d6000602084013e611ca0565b606091505b5091509150611cb0828286611cbb565b979650505050505050565b60608315611cca5750816118ad565b825115611cda5782518084602001fd5b8160405162461bcd60e51b815260040161019a919061228c565b6040805161012081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e0810182905261010081019190915290565b6040805161014081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e08101829052610100810182905261012081019190915290565b600082601f830112611da4578081fd5b813567ffffffffffffffff80821115611dbb578283fd5b602080830260405182828201018181108582111715611dd8578687fd5b604052848152945081850192508582018187018301881015611df957600080fd5b600091505b84821015611e1c578035845292820192600191909101908201611dfe565b505050505092915050565b600060208284031215611e38578081fd5b81356118ad81612716565b60008060408385031215611e55578081fd5b8235611e6081612716565b946020939093013593505050565b600080600060608486031215611e82578081fd5b8335611e8d81612716565b9250602084013591506040840135611ea481612716565b809150509250925092565b60008060408385031215611ec1578182fd5b823567ffffffffffffffff80821115611ed8578384fd5b611ee486838701611d94565b93506020850135915080821115611ef9578283fd5b50611f0685828601611d94565b9150509250929050565b600060208284031215611f21578081fd5b81516118ad8161272e565b600080600080600060a08688031215611f43578081fd5b8535611f4e8161272e565b9450602086013593506040860135611f6581612716565b92506060860135611f758161272e565b91506080860135611f858161272e565b809150509295509295909350565b600060208284031215611fa4578081fd5b5035919050565b600060208284031215611fbc578081fd5b5051919050565b60008060008060808587031215611fd8578384fd5b8435935060208501359250604085013591506060850135611ff88161272e565b939692955090935050565b600080600080600060a0868803121561201a578081fd5b853594506020860135935060408601359250606086013591506080860135611f858161272e565b600082516120538184602087016126e6565b9190910192915050565b90565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b0393841681529183166020830152909116604082015260600190565b6001600160a01b03958616815293851660208501529190931660408301526060820192909252901515608082015260a00190565b6001600160a01b0397881681529587166020870152938616604086015260608501929092526080840152151560a083015290911660c082015260e00190565b6001600160a01b039a8b168152988a1660208a01526040890197909752948816606088015292909616608086015260a085015293151560c084015260e08301939093529115156101008201526101208101919091526101400190565b6001600160a01b03998a168152978916602089015260408801969096529390961660608601526080850191909152151560a084015260c083019390935291151560e08201526101008101919091526101200190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b03998a168152602081019890985295881660408801529390961660608601526080850191909152151560a084015260c083019390935291151560e08201526101008101919091526101200190565b6001600160a01b039889168152602081019790975294909616604086015260608501929092521515608084015260a083015291151560c082015260e08101919091526101000190565b60006020825282518060208401526122ab8160408501602087016126e6565b601f01601f19169190910160400192915050565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b6020808252601d908201527f4f72646572426f6f6b3a206661696c656420746f2073656e6420455448000000604082015260600190565b60208082526026908201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6040820152651c8818d85b1b60d21b606082015260800190565b60208082526021908201527f4f72646572426f6f6b3a20696e73756666696369656e7420616d6f756e744f756040820152601d60fa1b606082015260800190565b6020808252601f908201527f4f72646572426f6f6b3a20696e76616c6964205f706174682e6c656e67746800604082015260600190565b60208082526026908201527f4f72646572426f6f6b3a20696e76616c696420707269636520666f722065786560408201526531baba34b7b760d11b606082015260800190565b6020808252601d908201527f4f72646572426f6f6b3a206e6f6e2d6578697374656e74206f72646572000000604082015260600190565b6020808252602a908201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6040820152691bdd081cdd58d8d9595960b21b606082015260800190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b90815260200190565b9687526001600160a01b0395861660208801529390941660408601529015156060850152608084015260a0830191909152151560c082015260e00190565b998a526001600160a01b0398891660208b015260408a0197909752948716606089015292909516608087015260a086015292151560c085015260e08401929092529015156101008301526101208201526101400190565b9a8b526001600160a01b03998a1660208c015260408b019890985295881660608a015293909616608088015260a0870191909152151560c086015260e08501939093529115156101008401526101208301919091526101408201526101600190565b9788526001600160a01b0396871660208901526040880195909552929094166060860152608085015291151560a084015260c0830191909152151560e08201526101000190565b9889526001600160a01b0397881660208a015260408901969096529390951660608701526080860191909152151560a085015260c084019290925290151560e08301526101008201526101200190565b998a526001600160a01b0398891660208b015260408a01979097529490961660608801526080870192909252151560a086015260c085015291151560e08401526101008301919091526101208201526101400190565b9182521515602082015260400190565b60005b838110156127015781810151838201526020016126e9565b83811115612710576000848401525b50505050565b6001600160a01b038116811461272b57600080fd5b50565b801515811461272b57600080fdfea26469706673582212206aa252234fd4075d790a3af6c3561abfbcc17223ec1e3b04c9f245a676cd897f64736f6c634300060c0033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 15334,
        "contract": "contracts/core/OrderBook.sol:OrderBook",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 12024,
        "contract": "contracts/core/OrderBook.sol:OrderBook",
        "label": "router",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 12026,
        "contract": "contracts/core/OrderBook.sol:OrderBook",
        "label": "vault",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 12028,
        "contract": "contracts/core/OrderBook.sol:OrderBook",
        "label": "weth",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 12030,
        "contract": "contracts/core/OrderBook.sol:OrderBook",
        "label": "zkusd",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 12032,
        "contract": "contracts/core/OrderBook.sol:OrderBook",
        "label": "minExecutionFee",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 12034,
        "contract": "contracts/core/OrderBook.sol:OrderBook",
        "label": "gov",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 12080,
        "contract": "contracts/core/OrderBook.sol:OrderBook",
        "label": "increaseOrders",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(IncreaseOrder)12055_storage))"
      },
      {
        "astId": 12084,
        "contract": "contracts/core/OrderBook.sol:OrderBook",
        "label": "increaseOrdersIndex",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 12090,
        "contract": "contracts/core/OrderBook.sol:OrderBook",
        "label": "decreaseOrders",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(DecreaseOrder)12074_storage))"
      },
      {
        "astId": 12094,
        "contract": "contracts/core/OrderBook.sol:OrderBook",
        "label": "decreaseOrdersIndex",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_struct(DecreaseOrder)12074_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => struct OrderBookStorage.DecreaseOrder))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(DecreaseOrder)12074_storage)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_struct(IncreaseOrder)12055_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => struct OrderBookStorage.IncreaseOrder))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(IncreaseOrder)12055_storage)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(DecreaseOrder)12074_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct OrderBookStorage.DecreaseOrder)",
        "numberOfBytes": "32",
        "value": "t_struct(DecreaseOrder)12074_storage"
      },
      "t_mapping(t_uint256,t_struct(IncreaseOrder)12055_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct OrderBookStorage.IncreaseOrder)",
        "numberOfBytes": "32",
        "value": "t_struct(IncreaseOrder)12055_storage"
      },
      "t_struct(DecreaseOrder)12074_storage": {
        "encoding": "inplace",
        "label": "struct OrderBookStorage.DecreaseOrder",
        "members": [
          {
            "astId": 12057,
            "contract": "contracts/core/OrderBook.sol:OrderBook",
            "label": "account",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 12059,
            "contract": "contracts/core/OrderBook.sol:OrderBook",
            "label": "collateralToken",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 12061,
            "contract": "contracts/core/OrderBook.sol:OrderBook",
            "label": "collateralDelta",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 12063,
            "contract": "contracts/core/OrderBook.sol:OrderBook",
            "label": "indexToken",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 12065,
            "contract": "contracts/core/OrderBook.sol:OrderBook",
            "label": "sizeDelta",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 12067,
            "contract": "contracts/core/OrderBook.sol:OrderBook",
            "label": "isLong",
            "offset": 0,
            "slot": "5",
            "type": "t_bool"
          },
          {
            "astId": 12069,
            "contract": "contracts/core/OrderBook.sol:OrderBook",
            "label": "triggerPrice",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 12071,
            "contract": "contracts/core/OrderBook.sol:OrderBook",
            "label": "triggerAboveThreshold",
            "offset": 0,
            "slot": "7",
            "type": "t_bool"
          },
          {
            "astId": 12073,
            "contract": "contracts/core/OrderBook.sol:OrderBook",
            "label": "executionFee",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "288"
      },
      "t_struct(IncreaseOrder)12055_storage": {
        "encoding": "inplace",
        "label": "struct OrderBookStorage.IncreaseOrder",
        "members": [
          {
            "astId": 12036,
            "contract": "contracts/core/OrderBook.sol:OrderBook",
            "label": "account",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 12038,
            "contract": "contracts/core/OrderBook.sol:OrderBook",
            "label": "purchaseToken",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 12040,
            "contract": "contracts/core/OrderBook.sol:OrderBook",
            "label": "purchaseTokenAmount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 12042,
            "contract": "contracts/core/OrderBook.sol:OrderBook",
            "label": "collateralToken",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 12044,
            "contract": "contracts/core/OrderBook.sol:OrderBook",
            "label": "indexToken",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          },
          {
            "astId": 12046,
            "contract": "contracts/core/OrderBook.sol:OrderBook",
            "label": "sizeDelta",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 12048,
            "contract": "contracts/core/OrderBook.sol:OrderBook",
            "label": "isLong",
            "offset": 0,
            "slot": "6",
            "type": "t_bool"
          },
          {
            "astId": 12050,
            "contract": "contracts/core/OrderBook.sol:OrderBook",
            "label": "triggerPrice",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 12052,
            "contract": "contracts/core/OrderBook.sol:OrderBook",
            "label": "triggerAboveThreshold",
            "offset": 0,
            "slot": "8",
            "type": "t_bool"
          },
          {
            "astId": 12054,
            "contract": "contracts/core/OrderBook.sol:OrderBook",
            "label": "executionFee",
            "offset": 0,
            "slot": "9",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "320"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}