{
  "address": "0xeE89bc0171e252dE4996EFaEB63c2D186E17AA12",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "_orderBookAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "_indices",
          "type": "uint256[]"
        }
      ],
      "name": "getDecreaseOrders",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "_orderBookAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "_indices",
          "type": "uint256[]"
        }
      ],
      "name": "getIncreaseOrders",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xc6108813163a1f31c38bcd23d0fb07f5440e83b8903c9ff410fe892d2b389c08",
  "receipt": {
    "to": null,
    "from": "0x4e8730f175811C3079C411309DB823E62a4f9598",
    "contractAddress": "0xeE89bc0171e252dE4996EFaEB63c2D186E17AA12",
    "transactionIndex": 0,
    "gasUsed": "593201",
    "logsBloom": "0x
    "blockHash": "0x52e228c3aa7f066995d8f686c6bbf0c2fb50b70b82526e0609053c213db32f2e",
    "transactionHash": "0xc6108813163a1f31c38bcd23d0fb07f5440e83b8903c9ff410fe892d2b389c08",
    "logs": [],
    "blockNumber": 94333,
    "cumulativeGasUsed": "593201",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "45f986e69ef0b1c3adec9bb2994aea31",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_orderBookAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_indices\",\"type\":\"uint256[]\"}],\"name\":\"getDecreaseOrders\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_orderBookAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_indices\",\"type\":\"uint256[]\"}],\"name\":\"getIncreaseOrders\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/peripherals/OrderBookReader.sol\":\"OrderBookReader\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"contracts/core/interfaces/IOrderBook.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\ninterface IOrderBook {\\n\\n    function getIncreaseOrder(address _account, uint256 _orderIndex) external view returns (\\n        address purchaseToken,\\n        uint256 purchaseTokenAmount,\\n        address collateralToken,\\n        address indexToken,\\n        uint256 sizeDelta,\\n        bool isLong,\\n        uint256 triggerPrice,\\n        bool triggerAboveThreshold,\\n        uint256 executionFee\\n    );\\n\\n    function getDecreaseOrder(address _account, uint256 _orderIndex) external view returns (\\n        address collateralToken,\\n        uint256 collateralDelta,\\n        address indexToken,\\n        uint256 sizeDelta,\\n        bool isLong,\\n        uint256 triggerPrice,\\n        bool triggerAboveThreshold,\\n        uint256 executionFee\\n    );\\n\\n    function executeDecreaseOrder(address, uint256, address payable) external;\\n    function executeIncreaseOrder(address, uint256, address payable) external;\\n}\\n\",\"keccak256\":\"0xea15c5413e388051840d1036373a46beae11ba137f539927ebdd9a2ee961ab32\",\"license\":\"MIT\"},\"contracts/libraries/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x41b0da7db3e1f79b338824fed2bc4732430b78002a9d51c2cfa86ad5a12c2763\",\"license\":\"MIT\"},\"contracts/peripherals/OrderBookReader.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"../libraries/math/SafeMath.sol\\\";\\n\\nimport \\\"../core/interfaces/IOrderBook.sol\\\";\\n\\ncontract OrderBookReader {\\n    using SafeMath for uint256;\\n\\n    struct Vars {\\n        uint256 i;\\n        uint256 index;\\n        address account;\\n        uint256 uintLength;\\n        uint256 addressLength;\\n    }\\n\\n    function getIncreaseOrders(\\n        address payable _orderBookAddress,\\n        address _account,\\n        uint256[] memory _indices\\n    ) external view returns (uint256[] memory, address[] memory) {\\n        Vars memory vars = Vars(0, 0, _account, 5, 3);\\n\\n        uint256[] memory uintProps = new uint256[](vars.uintLength * _indices.length);\\n        address[] memory addressProps = new address[](vars.addressLength * _indices.length);\\n\\n        IOrderBook orderBook = IOrderBook(_orderBookAddress);\\n\\n        while (vars.i < _indices.length) {\\n            vars.index = _indices[vars.i];\\n            (\\n                address purchaseToken,\\n                uint256 purchaseTokenAmount,\\n                address collateralToken,\\n                address indexToken,\\n                uint256 sizeDelta,\\n                bool isLong,\\n                uint256 triggerPrice,\\n                bool triggerAboveThreshold,\\n                // uint256 executionFee\\n            ) = orderBook.getIncreaseOrder(vars.account, vars.index);\\n\\n            uintProps[vars.i * vars.uintLength] = uint256(purchaseTokenAmount);\\n            uintProps[vars.i * vars.uintLength + 1] = uint256(sizeDelta);\\n            uintProps[vars.i * vars.uintLength + 2] = uint256(isLong ? 1 : 0);\\n            uintProps[vars.i * vars.uintLength + 3] = uint256(triggerPrice);\\n            uintProps[vars.i * vars.uintLength + 4] = uint256(triggerAboveThreshold ? 1 : 0);\\n\\n            addressProps[vars.i * vars.addressLength] = (purchaseToken);\\n            addressProps[vars.i * vars.addressLength + 1] = (collateralToken);\\n            addressProps[vars.i * vars.addressLength + 2] = (indexToken);\\n\\n            vars.i++;\\n        }\\n\\n        return (uintProps, addressProps);\\n    }\\n\\n    function getDecreaseOrders(\\n        address payable _orderBookAddress,\\n        address _account,\\n        uint256[] memory _indices\\n    ) external view returns (uint256[] memory, address[] memory) {\\n        Vars memory vars = Vars(0, 0, _account, 5, 2);\\n\\n        uint256[] memory uintProps = new uint256[](vars.uintLength * _indices.length);\\n        address[] memory addressProps = new address[](vars.addressLength * _indices.length);\\n\\n        IOrderBook orderBook = IOrderBook(_orderBookAddress);\\n\\n        while (vars.i < _indices.length) {\\n            vars.index = _indices[vars.i];\\n            (\\n                address collateralToken,\\n                uint256 collateralDelta,\\n                address indexToken,\\n                uint256 sizeDelta,\\n                bool isLong,\\n                uint256 triggerPrice,\\n                bool triggerAboveThreshold,\\n                // uint256 executionFee\\n            ) = orderBook.getDecreaseOrder(vars.account, vars.index);\\n\\n            uintProps[vars.i * vars.uintLength] = uint256(collateralDelta);\\n            uintProps[vars.i * vars.uintLength + 1] = uint256(sizeDelta);\\n            uintProps[vars.i * vars.uintLength + 2] = uint256(isLong ? 1 : 0);\\n            uintProps[vars.i * vars.uintLength + 3] = uint256(triggerPrice);\\n            uintProps[vars.i * vars.uintLength + 4] = uint256(triggerAboveThreshold ? 1 : 0);\\n\\n            addressProps[vars.i * vars.addressLength] = (collateralToken);\\n            addressProps[vars.i * vars.addressLength + 1] = (indexToken);\\n\\n            vars.i++;\\n        }\\n\\n        return (uintProps, addressProps);\\n    }\\n\\n}\\n\",\"keccak256\":\"0xe290e71e6fa697afd1595a972b8cddf07eb1853ff4a9d97d6b4bb59f66223bd0\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506109c4806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80630ce933b91461003b578063c38ccd501461018e575b600080fd5b6100f56004803603606081101561005157600080fd5b6001600160a01b038235811692602081013590911691810190606081016040820135600160201b81111561008457600080fd5b82018360208201111561009657600080fd5b803590602001918460208302840111600160201b831117156100b757600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550610248945050505050565b604051808060200180602001838103835285818151815260200191508051906020019060200280838360005b83811015610139578181015183820152602001610121565b50505050905001838103825284818151815260200191508051906020019060200280838360005b83811015610178578181015183820152602001610160565b5050505090500194505050505060405180910390f35b6100f5600480360360608110156101a457600080fd5b6001600160a01b038235811692602081013590911691810190606081016040820135600160201b8111156101d757600080fd5b8201836020820111156101e957600080fd5b803590602001918460208302840111600160201b8311171561020a57600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295506105b2945050505050565b606080610253610956565b6040518060a001604052806000815260200160008152602001866001600160a01b0316815260200160058152602001600281525090506060845182606001510267ffffffffffffffff811180156102a957600080fd5b506040519080825280602002602001820160405280156102d3578160200160208202803683370190505b5090506060855183608001510267ffffffffffffffff811180156102f657600080fd5b50604051908082528060200260200182016040528015610320578160200160208202803683370190505b509050875b8651845110156105a4578684600001518151811061033f57fe5b60200260200101518460200181815250506000806000806000806000876001600160a01b031663026032ee8c604001518d602001516040518363ffffffff1660e01b815260040180836001600160a01b03168152602001828152602001925050506101006040518083038186803b1580156103b957600080fd5b505afa1580156103cd573d6000803e3d6000fd5b505050506040513d6101008110156103e457600080fd5b810190808051906020019092919080519060200190929190805190602001909291908051906020019092919080519060200190929190805190602001909291908051906020019092919080519060200190929190505050509650965096509650965096509650858a8c606001518d60000151028151811061046157fe5b602002602001018181525050838a8c606001518d60000151026001018151811061048757fe5b6020026020010181815250508261049f5760006104a2565b60015b60ff168a8c606001518d6000015102600201815181106104be57fe5b602002602001018181525050818a8c606001518d6000015102600301815181106104e457fe5b602002602001018181525050806104fc5760006104ff565b60015b60ff168a8c606001518d60000151026004018151811061051b57fe5b60200260200101818152505086898c608001518d60000151028151811061053e57fe5b60200260200101906001600160a01b031690816001600160a01b03168152505084898c608001518d60000151026001018151811061057857fe5b6001600160a01b0390921660209283029190910190910152505088516001018952506103259350505050565b509097909650945050505050565b6060806105bd610956565b6040518060a001604052806000815260200160008152602001866001600160a01b0316815260200160058152602001600381525090506060845182606001510267ffffffffffffffff8111801561061357600080fd5b5060405190808252806020026020018201604052801561063d578160200160208202803683370190505b5090506060855183608001510267ffffffffffffffff8111801561066057600080fd5b5060405190808252806020026020018201604052801561068a578160200160208202803683370190505b509050875b8651845110156105a457868460000151815181106106a957fe5b6020026020010151846020018181525050600080600080600080600080886001600160a01b031663d3bab1d18d604001518e602001516040518363ffffffff1660e01b815260040180836001600160a01b03168152602001828152602001925050506101206040518083038186803b15801561072457600080fd5b505afa158015610738573d6000803e3d6000fd5b505050506040513d61012081101561074f57600080fd5b810190808051906020019092919080519060200190929190805190602001909291908051906020019092919080519060200190929190805190602001909291908051906020019092919080519060200190929190805190602001909291905050505097509750975097509750975097509750868b8d606001518e6000015102815181106107d857fe5b602002602001018181525050838b8d606001518e6000015102600101815181106107fe57fe5b60200260200101818152505082610816576000610819565b60015b60ff168b8d606001518e60000151026002018151811061083557fe5b602002602001018181525050818b8d606001518e60000151026003018151811061085b57fe5b60200260200101818152505080610873576000610876565b60015b60ff168b8d606001518e60000151026004018151811061089257fe5b602002602001018181525050878a8d608001518e6000015102815181106108b557fe5b60200260200101906001600160a01b031690816001600160a01b031681525050858a8d608001518e6000015102600101815181106108ef57fe5b60200260200101906001600160a01b031690816001600160a01b031681525050848a8d608001518e60000151026002018151811061092957fe5b6001600160a01b0390921660209283029190910190910152505089516001018a525061068f945050505050565b6040518060a00160405280600081526020016000815260200160006001600160a01b031681526020016000815260200160008152509056fea26469706673582212209314ddfe89db1a41396db300b09629b3d72617a40a2ec7efbbc6eea76493136164736f6c634300060c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100365760003560e01c80630ce933b91461003b578063c38ccd501461018e575b600080fd5b6100f56004803603606081101561005157600080fd5b6001600160a01b038235811692602081013590911691810190606081016040820135600160201b81111561008457600080fd5b82018360208201111561009657600080fd5b803590602001918460208302840111600160201b831117156100b757600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550610248945050505050565b604051808060200180602001838103835285818151815260200191508051906020019060200280838360005b83811015610139578181015183820152602001610121565b50505050905001838103825284818151815260200191508051906020019060200280838360005b83811015610178578181015183820152602001610160565b5050505090500194505050505060405180910390f35b6100f5600480360360608110156101a457600080fd5b6001600160a01b038235811692602081013590911691810190606081016040820135600160201b8111156101d757600080fd5b8201836020820111156101e957600080fd5b803590602001918460208302840111600160201b8311171561020a57600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295506105b2945050505050565b606080610253610956565b6040518060a001604052806000815260200160008152602001866001600160a01b0316815260200160058152602001600281525090506060845182606001510267ffffffffffffffff811180156102a957600080fd5b506040519080825280602002602001820160405280156102d3578160200160208202803683370190505b5090506060855183608001510267ffffffffffffffff811180156102f657600080fd5b50604051908082528060200260200182016040528015610320578160200160208202803683370190505b509050875b8651845110156105a4578684600001518151811061033f57fe5b60200260200101518460200181815250506000806000806000806000876001600160a01b031663026032ee8c604001518d602001516040518363ffffffff1660e01b815260040180836001600160a01b03168152602001828152602001925050506101006040518083038186803b1580156103b957600080fd5b505afa1580156103cd573d6000803e3d6000fd5b505050506040513d6101008110156103e457600080fd5b810190808051906020019092919080519060200190929190805190602001909291908051906020019092919080519060200190929190805190602001909291908051906020019092919080519060200190929190505050509650965096509650965096509650858a8c606001518d60000151028151811061046157fe5b602002602001018181525050838a8c606001518d60000151026001018151811061048757fe5b6020026020010181815250508261049f5760006104a2565b60015b60ff168a8c606001518d6000015102600201815181106104be57fe5b602002602001018181525050818a8c606001518d6000015102600301815181106104e457fe5b602002602001018181525050806104fc5760006104ff565b60015b60ff168a8c606001518d60000151026004018151811061051b57fe5b60200260200101818152505086898c608001518d60000151028151811061053e57fe5b60200260200101906001600160a01b031690816001600160a01b03168152505084898c608001518d60000151026001018151811061057857fe5b6001600160a01b0390921660209283029190910190910152505088516001018952506103259350505050565b509097909650945050505050565b6060806105bd610956565b6040518060a001604052806000815260200160008152602001866001600160a01b0316815260200160058152602001600381525090506060845182606001510267ffffffffffffffff8111801561061357600080fd5b5060405190808252806020026020018201604052801561063d578160200160208202803683370190505b5090506060855183608001510267ffffffffffffffff8111801561066057600080fd5b5060405190808252806020026020018201604052801561068a578160200160208202803683370190505b509050875b8651845110156105a457868460000151815181106106a957fe5b6020026020010151846020018181525050600080600080600080600080886001600160a01b031663d3bab1d18d604001518e602001516040518363ffffffff1660e01b815260040180836001600160a01b03168152602001828152602001925050506101206040518083038186803b15801561072457600080fd5b505afa158015610738573d6000803e3d6000fd5b505050506040513d61012081101561074f57600080fd5b810190808051906020019092919080519060200190929190805190602001909291908051906020019092919080519060200190929190805190602001909291908051906020019092919080519060200190929190805190602001909291905050505097509750975097509750975097509750868b8d606001518e6000015102815181106107d857fe5b602002602001018181525050838b8d606001518e6000015102600101815181106107fe57fe5b60200260200101818152505082610816576000610819565b60015b60ff168b8d606001518e60000151026002018151811061083557fe5b602002602001018181525050818b8d606001518e60000151026003018151811061085b57fe5b60200260200101818152505080610873576000610876565b60015b60ff168b8d606001518e60000151026004018151811061089257fe5b602002602001018181525050878a8d608001518e6000015102815181106108b557fe5b60200260200101906001600160a01b031690816001600160a01b031681525050858a8d608001518e6000015102600101815181106108ef57fe5b60200260200101906001600160a01b031690816001600160a01b031681525050848a8d608001518e60000151026002018151811061092957fe5b6001600160a01b0390921660209283029190910190910152505089516001018a525061068f945050505050565b6040518060a00160405280600081526020016000815260200160006001600160a01b031681526020016000815260200160008152509056fea26469706673582212209314ddfe89db1a41396db300b09629b3d72617a40a2ec7efbbc6eea76493136164736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}